------- FILE Playfieldborder.asm LEVEL 1 PASS 1
      1  0000					      Processor	6502
      2  0000 ????
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE Playfieldborder.asm
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.07, 08/OCT/2021
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_VCS =	107
      5  0000 ????
      6  0000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at https://dasm-assembler.github.io/
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  0000 ????						; contents, or would like ot add something, please report as an issue at...
     17  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  0000 ????
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  0000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  0000 ????						;			    This will allow conditional code to verify VCS.H being
     26  0000 ????						;			    used for code assembly.
     27  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  0000 ????						;			 mirrored reading/writing differences.	This is more a
     30  0000 ????						;			 readability issue, and binary compatibility with disassembled
     31  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  0000 ????						;			 which was broken by the use of segments in this file, as
     34  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  0000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  0000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  0000 ????						;			    it is safe to leave it undefined, and the base address will
     39  0000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  0000 ????						;			  - register definitions are now generated through assignment
     42  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  0000 ????						;			    address architecture.
     44  0000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  0000 ????
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????
     49  0000 ????						; TIA_BASE_ADDRESS
     50  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  0000 ????						; Normally 0, the base address should (externally, before including this file)
     52  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  0000 ????						; < $40 as a bankswitch.
     55  0000 ????
     56  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     57  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     58  0000 ????				      ENDIF
     59  0000 ????
     60  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  0000 ????						; *OR* by declaring the label before including this file, eg:
     63  0000 ????						; TIA_BASE_ADDRESS = $40
     64  0000 ????						;   include "vcs.h"
     65  0000 ????
     66  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  0000 ????						; for the mirrored ROM hardware registers.
     69  0000 ????
     70  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  0000 ????
     74  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     75  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  0000 ????				      ENDIF
     77  0000 ????
     78  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  0000 ????				      ENDIF
     81  0000 ????
     82  0000 ????						;-------------------------------------------------------------------------------
     83  0000 ????
     84 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U0000 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE Playfieldborder.asm
      5  0000 ????
      6  0000 ????				      seg	code
      7  f000					      org	$F000
      8  f000
      9  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     11  f00a
     12  f00a		       a2 24		      ldx	#$24	;purple background colour
     13  f00c		       86 09		      stx	COLUBK
     14  f00e
     15  f00e		       a9 70		      lda	#$70
     16  f010		       85 08		      sta	COLUPF	;blue playfield colour
     17  f012
     18  f012							;start a new frame by configuring VSYNC and VBLANK
     19  f012				   StartFrame
     20  f012		       a9 02		      lda	#2
     21  f014		       85 00		      sta	VSYNC
     22  f016		       85 01		      sta	VBLANK
     23  f018
     24  f018							;generate 3 lines of VSYNC
     25  f018					      REPEAT	3
     26  f018		       85 02		      sta	WSYNC	;repeats 3 VSYNC scanlines
     25  f018					      REPEND
     26  f01a		       85 02		      sta	WSYNC	;repeats 3 VSYNC scanlines
     25  f01a					      REPEND
     26  f01c		       85 02		      sta	WSYNC	;repeats 3 VSYNC scanlines
     27  f01e					      REPEND
     28  f01e
     29  f01e		       a9 00		      lda	#0
     30  f020		       85 00		      sta	VSYNC	;turn off VSYNC
     31  f022
     32  f022							;generate 37 scanlines of VBLANK
     33  f022					      REPEAT	37
     34  f022		       85 02		      sta	WSYNC
     33  f022					      REPEND
     34  f024		       85 02		      sta	WSYNC
     33  f024					      REPEND
     34  f026		       85 02		      sta	WSYNC
     33  f026					      REPEND
     34  f028		       85 02		      sta	WSYNC
     33  f028					      REPEND
     34  f02a		       85 02		      sta	WSYNC
     33  f02a					      REPEND
     34  f02c		       85 02		      sta	WSYNC
     33  f02c					      REPEND
     34  f02e		       85 02		      sta	WSYNC
     33  f02e					      REPEND
     34  f030		       85 02		      sta	WSYNC
     33  f030					      REPEND
     34  f032		       85 02		      sta	WSYNC
     33  f032					      REPEND
     34  f034		       85 02		      sta	WSYNC
     33  f034					      REPEND
     34  f036		       85 02		      sta	WSYNC
     33  f036					      REPEND
     34  f038		       85 02		      sta	WSYNC
     33  f038					      REPEND
     34  f03a		       85 02		      sta	WSYNC
     33  f03a					      REPEND
     34  f03c		       85 02		      sta	WSYNC
     33  f03c					      REPEND
     34  f03e		       85 02		      sta	WSYNC
     33  f03e					      REPEND
     34  f040		       85 02		      sta	WSYNC
     33  f040					      REPEND
     34  f042		       85 02		      sta	WSYNC
     33  f042					      REPEND
     34  f044		       85 02		      sta	WSYNC
     33  f044					      REPEND
     34  f046		       85 02		      sta	WSYNC
     33  f046					      REPEND
     34  f048		       85 02		      sta	WSYNC
     33  f048					      REPEND
     34  f04a		       85 02		      sta	WSYNC
     33  f04a					      REPEND
     34  f04c		       85 02		      sta	WSYNC
     33  f04c					      REPEND
     34  f04e		       85 02		      sta	WSYNC
     33  f04e					      REPEND
     34  f050		       85 02		      sta	WSYNC
     33  f050					      REPEND
     34  f052		       85 02		      sta	WSYNC
     33  f052					      REPEND
     34  f054		       85 02		      sta	WSYNC
     33  f054					      REPEND
     34  f056		       85 02		      sta	WSYNC
     33  f056					      REPEND
     34  f058		       85 02		      sta	WSYNC
     33  f058					      REPEND
     34  f05a		       85 02		      sta	WSYNC
     33  f05a					      REPEND
     34  f05c		       85 02		      sta	WSYNC
     33  f05c					      REPEND
     34  f05e		       85 02		      sta	WSYNC
     33  f05e					      REPEND
     34  f060		       85 02		      sta	WSYNC
     33  f060					      REPEND
     34  f062		       85 02		      sta	WSYNC
     33  f062					      REPEND
     34  f064		       85 02		      sta	WSYNC
     33  f064					      REPEND
     34  f066		       85 02		      sta	WSYNC
     33  f066					      REPEND
     34  f068		       85 02		      sta	WSYNC
     33  f068					      REPEND
     34  f06a		       85 02		      sta	WSYNC
     35  f06c					      REPEND
     36  f06c
     37  f06c		       a9 00		      lda	#0
     38  f06e		       85 01		      sta	VBLANK	;turn off VBLANK
     39  f070
     40  f070							;set the CTRLPF register to allow playfield reflection
     41  f070		       a2 01		      ldx	#%00000001	;CTRLPF register (00000001 means reflect, 00000000 means repeat)
     42  f072		       86 0a		      stx	CTRLPF
     43  f074
     44  f074							;draw the 192 visible scanlines
     45  f074		       a2 00		      ldx	#0
     46  f076		       86 0d		      stx	PF0	;disable the PF0, 1 and 2 registers
     47  f078		       86 0e		      stx	PF1
     48  f07a		       86 0f		      stx	PF2
     49  f07c					      REPEAT	7	;disable the PF registers for 7 scanlines
     50  f07c		       85 02		      sta	WSYNC
     49  f07c					      REPEND
     50  f07e		       85 02		      sta	WSYNC
     49  f07e					      REPEND
     50  f080		       85 02		      sta	WSYNC
     49  f080					      REPEND
     50  f082		       85 02		      sta	WSYNC
     49  f082					      REPEND
     50  f084		       85 02		      sta	WSYNC
     49  f084					      REPEND
     50  f086		       85 02		      sta	WSYNC
     49  f086					      REPEND
     50  f088		       85 02		      sta	WSYNC
     51  f08a					      REPEND
     52  f08a
     53  f08a							;set the PF0 to 1110 (LSB first) and PF1 and 2 to 1111 1111
     54  f08a		       a2 e0		      ldx	#%11100000
     55  f08c		       86 0d		      stx	PF0
     56  f08e
     57  f08e		       a2 ff		      ldx	#%11111111
     58  f090		       86 0e		      stx	PF1
     59  f092		       86 0f		      stx	PF2
     60  f094
     61  f094					      REPEAT	7
     62  f094		       85 02		      sta	WSYNC
     61  f094					      REPEND
     62  f096		       85 02		      sta	WSYNC
     61  f096					      REPEND
     62  f098		       85 02		      sta	WSYNC
     61  f098					      REPEND
     62  f09a		       85 02		      sta	WSYNC
     61  f09a					      REPEND
     62  f09c		       85 02		      sta	WSYNC
     61  f09c					      REPEND
     62  f09e		       85 02		      sta	WSYNC
     61  f09e					      REPEND
     62  f0a0		       85 02		      sta	WSYNC
     63  f0a2					      REPEND
     64  f0a2
     65  f0a2							;set the next 164 lines with only the PF0 third bit enabled
     66  f0a2		       a2 20		      ldx	#%00100000
     67  f0a4		       86 0d		      stx	PF0
     68  f0a6
     69  f0a6		       a2 00		      ldx	#0
     70  f0a8		       86 0e		      stx	PF1
     71  f0aa		       86 0f		      stx	PF2
     72  f0ac
     73  f0ac					      REPEAT	164
     74  f0ac		       86 02		      stx	WSYNC
     73  f0ac					      REPEND
     74  f0ae		       86 02		      stx	WSYNC
     73  f0ae					      REPEND
     74  f0b0		       86 02		      stx	WSYNC
     73  f0b0					      REPEND
     74  f0b2		       86 02		      stx	WSYNC
     73  f0b2					      REPEND
     74  f0b4		       86 02		      stx	WSYNC
     73  f0b4					      REPEND
     74  f0b6		       86 02		      stx	WSYNC
     73  f0b6					      REPEND
     74  f0b8		       86 02		      stx	WSYNC
     73  f0b8					      REPEND
     74  f0ba		       86 02		      stx	WSYNC
     73  f0ba					      REPEND
     74  f0bc		       86 02		      stx	WSYNC
     73  f0bc					      REPEND
     74  f0be		       86 02		      stx	WSYNC
     73  f0be					      REPEND
     74  f0c0		       86 02		      stx	WSYNC
     73  f0c0					      REPEND
     74  f0c2		       86 02		      stx	WSYNC
     73  f0c2					      REPEND
     74  f0c4		       86 02		      stx	WSYNC
     73  f0c4					      REPEND
     74  f0c6		       86 02		      stx	WSYNC
     73  f0c6					      REPEND
     74  f0c8		       86 02		      stx	WSYNC
     73  f0c8					      REPEND
     74  f0ca		       86 02		      stx	WSYNC
     73  f0ca					      REPEND
     74  f0cc		       86 02		      stx	WSYNC
     73  f0cc					      REPEND
     74  f0ce		       86 02		      stx	WSYNC
     73  f0ce					      REPEND
     74  f0d0		       86 02		      stx	WSYNC
     73  f0d0					      REPEND
     74  f0d2		       86 02		      stx	WSYNC
     73  f0d2					      REPEND
     74  f0d4		       86 02		      stx	WSYNC
     73  f0d4					      REPEND
     74  f0d6		       86 02		      stx	WSYNC
     73  f0d6					      REPEND
     74  f0d8		       86 02		      stx	WSYNC
     73  f0d8					      REPEND
     74  f0da		       86 02		      stx	WSYNC
     73  f0da					      REPEND
     74  f0dc		       86 02		      stx	WSYNC
     73  f0dc					      REPEND
     74  f0de		       86 02		      stx	WSYNC
     73  f0de					      REPEND
     74  f0e0		       86 02		      stx	WSYNC
     73  f0e0					      REPEND
     74  f0e2		       86 02		      stx	WSYNC
     73  f0e2					      REPEND
     74  f0e4		       86 02		      stx	WSYNC
     73  f0e4					      REPEND
     74  f0e6		       86 02		      stx	WSYNC
     73  f0e6					      REPEND
     74  f0e8		       86 02		      stx	WSYNC
     73  f0e8					      REPEND
     74  f0ea		       86 02		      stx	WSYNC
     73  f0ea					      REPEND
     74  f0ec		       86 02		      stx	WSYNC
     73  f0ec					      REPEND
     74  f0ee		       86 02		      stx	WSYNC
     73  f0ee					      REPEND
     74  f0f0		       86 02		      stx	WSYNC
     73  f0f0					      REPEND
     74  f0f2		       86 02		      stx	WSYNC
     73  f0f2					      REPEND
     74  f0f4		       86 02		      stx	WSYNC
     73  f0f4					      REPEND
     74  f0f6		       86 02		      stx	WSYNC
     73  f0f6					      REPEND
     74  f0f8		       86 02		      stx	WSYNC
     73  f0f8					      REPEND
     74  f0fa		       86 02		      stx	WSYNC
     73  f0fa					      REPEND
     74  f0fc		       86 02		      stx	WSYNC
     73  f0fc					      REPEND
     74  f0fe		       86 02		      stx	WSYNC
     73  f0fe					      REPEND
     74  f100		       86 02		      stx	WSYNC
     73  f100					      REPEND
     74  f102		       86 02		      stx	WSYNC
     73  f102					      REPEND
     74  f104		       86 02		      stx	WSYNC
     73  f104					      REPEND
     74  f106		       86 02		      stx	WSYNC
     73  f106					      REPEND
     74  f108		       86 02		      stx	WSYNC
     73  f108					      REPEND
     74  f10a		       86 02		      stx	WSYNC
     73  f10a					      REPEND
     74  f10c		       86 02		      stx	WSYNC
     73  f10c					      REPEND
     74  f10e		       86 02		      stx	WSYNC
     73  f10e					      REPEND
     74  f110		       86 02		      stx	WSYNC
     73  f110					      REPEND
     74  f112		       86 02		      stx	WSYNC
     73  f112					      REPEND
     74  f114		       86 02		      stx	WSYNC
     73  f114					      REPEND
     74  f116		       86 02		      stx	WSYNC
     73  f116					      REPEND
     74  f118		       86 02		      stx	WSYNC
     73  f118					      REPEND
     74  f11a		       86 02		      stx	WSYNC
     73  f11a					      REPEND
     74  f11c		       86 02		      stx	WSYNC
     73  f11c					      REPEND
     74  f11e		       86 02		      stx	WSYNC
     73  f11e					      REPEND
     74  f120		       86 02		      stx	WSYNC
     73  f120					      REPEND
     74  f122		       86 02		      stx	WSYNC
     73  f122					      REPEND
     74  f124		       86 02		      stx	WSYNC
     73  f124					      REPEND
     74  f126		       86 02		      stx	WSYNC
     73  f126					      REPEND
     74  f128		       86 02		      stx	WSYNC
     73  f128					      REPEND
     74  f12a		       86 02		      stx	WSYNC
     73  f12a					      REPEND
     74  f12c		       86 02		      stx	WSYNC
     73  f12c					      REPEND
     74  f12e		       86 02		      stx	WSYNC
     73  f12e					      REPEND
     74  f130		       86 02		      stx	WSYNC
     73  f130					      REPEND
     74  f132		       86 02		      stx	WSYNC
     73  f132					      REPEND
     74  f134		       86 02		      stx	WSYNC
     73  f134					      REPEND
     74  f136		       86 02		      stx	WSYNC
     73  f136					      REPEND
     74  f138		       86 02		      stx	WSYNC
     73  f138					      REPEND
     74  f13a		       86 02		      stx	WSYNC
     73  f13a					      REPEND
     74  f13c		       86 02		      stx	WSYNC
     73  f13c					      REPEND
     74  f13e		       86 02		      stx	WSYNC
     73  f13e					      REPEND
     74  f140		       86 02		      stx	WSYNC
     73  f140					      REPEND
     74  f142		       86 02		      stx	WSYNC
     73  f142					      REPEND
     74  f144		       86 02		      stx	WSYNC
     73  f144					      REPEND
     74  f146		       86 02		      stx	WSYNC
     73  f146					      REPEND
     74  f148		       86 02		      stx	WSYNC
     73  f148					      REPEND
     74  f14a		       86 02		      stx	WSYNC
     73  f14a					      REPEND
     74  f14c		       86 02		      stx	WSYNC
     73  f14c					      REPEND
     74  f14e		       86 02		      stx	WSYNC
     73  f14e					      REPEND
     74  f150		       86 02		      stx	WSYNC
     73  f150					      REPEND
     74  f152		       86 02		      stx	WSYNC
     73  f152					      REPEND
     74  f154		       86 02		      stx	WSYNC
     73  f154					      REPEND
     74  f156		       86 02		      stx	WSYNC
     73  f156					      REPEND
     74  f158		       86 02		      stx	WSYNC
     73  f158					      REPEND
     74  f15a		       86 02		      stx	WSYNC
     73  f15a					      REPEND
     74  f15c		       86 02		      stx	WSYNC
     73  f15c					      REPEND
     74  f15e		       86 02		      stx	WSYNC
     73  f15e					      REPEND
     74  f160		       86 02		      stx	WSYNC
     73  f160					      REPEND
     74  f162		       86 02		      stx	WSYNC
     73  f162					      REPEND
     74  f164		       86 02		      stx	WSYNC
     73  f164					      REPEND
     74  f166		       86 02		      stx	WSYNC
     73  f166					      REPEND
     74  f168		       86 02		      stx	WSYNC
     73  f168					      REPEND
     74  f16a		       86 02		      stx	WSYNC
     73  f16a					      REPEND
     74  f16c		       86 02		      stx	WSYNC
     73  f16c					      REPEND
     74  f16e		       86 02		      stx	WSYNC
     73  f16e					      REPEND
     74  f170		       86 02		      stx	WSYNC
     73  f170					      REPEND
     74  f172		       86 02		      stx	WSYNC
     73  f172					      REPEND
     74  f174		       86 02		      stx	WSYNC
     73  f174					      REPEND
     74  f176		       86 02		      stx	WSYNC
     73  f176					      REPEND
     74  f178		       86 02		      stx	WSYNC
     73  f178					      REPEND
     74  f17a		       86 02		      stx	WSYNC
     73  f17a					      REPEND
     74  f17c		       86 02		      stx	WSYNC
     73  f17c					      REPEND
     74  f17e		       86 02		      stx	WSYNC
     73  f17e					      REPEND
     74  f180		       86 02		      stx	WSYNC
     73  f180					      REPEND
     74  f182		       86 02		      stx	WSYNC
     73  f182					      REPEND
     74  f184		       86 02		      stx	WSYNC
     73  f184					      REPEND
     74  f186		       86 02		      stx	WSYNC
     73  f186					      REPEND
     74  f188		       86 02		      stx	WSYNC
     73  f188					      REPEND
     74  f18a		       86 02		      stx	WSYNC
     73  f18a					      REPEND
     74  f18c		       86 02		      stx	WSYNC
     73  f18c					      REPEND
     74  f18e		       86 02		      stx	WSYNC
     73  f18e					      REPEND
     74  f190		       86 02		      stx	WSYNC
     73  f190					      REPEND
     74  f192		       86 02		      stx	WSYNC
     73  f192					      REPEND
     74  f194		       86 02		      stx	WSYNC
     73  f194					      REPEND
     74  f196		       86 02		      stx	WSYNC
     73  f196					      REPEND
     74  f198		       86 02		      stx	WSYNC
     73  f198					      REPEND
     74  f19a		       86 02		      stx	WSYNC
     73  f19a					      REPEND
     74  f19c		       86 02		      stx	WSYNC
     73  f19c					      REPEND
     74  f19e		       86 02		      stx	WSYNC
     73  f19e					      REPEND
     74  f1a0		       86 02		      stx	WSYNC
     73  f1a0					      REPEND
     74  f1a2		       86 02		      stx	WSYNC
     73  f1a2					      REPEND
     74  f1a4		       86 02		      stx	WSYNC
     73  f1a4					      REPEND
     74  f1a6		       86 02		      stx	WSYNC
     73  f1a6					      REPEND
     74  f1a8		       86 02		      stx	WSYNC
     73  f1a8					      REPEND
     74  f1aa		       86 02		      stx	WSYNC
     73  f1aa					      REPEND
     74  f1ac		       86 02		      stx	WSYNC
     73  f1ac					      REPEND
     74  f1ae		       86 02		      stx	WSYNC
     73  f1ae					      REPEND
     74  f1b0		       86 02		      stx	WSYNC
     73  f1b0					      REPEND
     74  f1b2		       86 02		      stx	WSYNC
     73  f1b2					      REPEND
     74  f1b4		       86 02		      stx	WSYNC
     73  f1b4					      REPEND
     74  f1b6		       86 02		      stx	WSYNC
     73  f1b6					      REPEND
     74  f1b8		       86 02		      stx	WSYNC
     73  f1b8					      REPEND
     74  f1ba		       86 02		      stx	WSYNC
     73  f1ba					      REPEND
     74  f1bc		       86 02		      stx	WSYNC
     73  f1bc					      REPEND
     74  f1be		       86 02		      stx	WSYNC
     73  f1be					      REPEND
     74  f1c0		       86 02		      stx	WSYNC
     73  f1c0					      REPEND
     74  f1c2		       86 02		      stx	WSYNC
     73  f1c2					      REPEND
     74  f1c4		       86 02		      stx	WSYNC
     73  f1c4					      REPEND
     74  f1c6		       86 02		      stx	WSYNC
     73  f1c6					      REPEND
     74  f1c8		       86 02		      stx	WSYNC
     73  f1c8					      REPEND
     74  f1ca		       86 02		      stx	WSYNC
     73  f1ca					      REPEND
     74  f1cc		       86 02		      stx	WSYNC
     73  f1cc					      REPEND
     74  f1ce		       86 02		      stx	WSYNC
     73  f1ce					      REPEND
     74  f1d0		       86 02		      stx	WSYNC
     73  f1d0					      REPEND
     74  f1d2		       86 02		      stx	WSYNC
     73  f1d2					      REPEND
     74  f1d4		       86 02		      stx	WSYNC
     73  f1d4					      REPEND
     74  f1d6		       86 02		      stx	WSYNC
     73  f1d6					      REPEND
     74  f1d8		       86 02		      stx	WSYNC
     73  f1d8					      REPEND
     74  f1da		       86 02		      stx	WSYNC
     73  f1da					      REPEND
     74  f1dc		       86 02		      stx	WSYNC
     73  f1dc					      REPEND
     74  f1de		       86 02		      stx	WSYNC
     73  f1de					      REPEND
     74  f1e0		       86 02		      stx	WSYNC
     73  f1e0					      REPEND
     74  f1e2		       86 02		      stx	WSYNC
     73  f1e2					      REPEND
     74  f1e4		       86 02		      stx	WSYNC
     73  f1e4					      REPEND
     74  f1e6		       86 02		      stx	WSYNC
     73  f1e6					      REPEND
     74  f1e8		       86 02		      stx	WSYNC
     73  f1e8					      REPEND
     74  f1ea		       86 02		      stx	WSYNC
     73  f1ea					      REPEND
     74  f1ec		       86 02		      stx	WSYNC
     73  f1ec					      REPEND
     74  f1ee		       86 02		      stx	WSYNC
     73  f1ee					      REPEND
     74  f1f0		       86 02		      stx	WSYNC
     73  f1f0					      REPEND
     74  f1f2		       86 02		      stx	WSYNC
     75  f1f4					      REPEND
     76  f1f4
     77  f1f4							;set the PF0 to 1110 (LSB first) and PF1 and 2 to 1111 1111
     78  f1f4		       a2 e0		      ldx	#%11100000
     79  f1f6		       86 0d		      stx	PF0
     80  f1f8
     81  f1f8		       a2 ff		      ldx	#%11111111
     82  f1fa		       86 0e		      stx	PF1
     83  f1fc		       86 0f		      stx	PF2
     84  f1fe
     85  f1fe					      REPEAT	7
     86  f1fe		       85 02		      sta	WSYNC
     85  f1fe					      REPEND
     86  f200		       85 02		      sta	WSYNC
     85  f200					      REPEND
     86  f202		       85 02		      sta	WSYNC
     85  f202					      REPEND
     86  f204		       85 02		      sta	WSYNC
     85  f204					      REPEND
     86  f206		       85 02		      sta	WSYNC
     85  f206					      REPEND
     86  f208		       85 02		      sta	WSYNC
     85  f208					      REPEND
     86  f20a		       85 02		      sta	WSYNC
     87  f20c					      REPEND
     88  f20c
     89  f20c							;skip 7 lines with no PF set
     90  f20c		       a2 00		      ldx	#0
     91  f20e		       86 0d		      stx	PF0	;disable the PF0, 1 and 2 registers
     92  f210		       86 0e		      stx	PF1
     93  f212		       86 0f		      stx	PF2
     94  f214					      REPEAT	7	;disable the PF registers for 7 scanlines
     95  f214		       85 02		      sta	WSYNC
     94  f214					      REPEND
     95  f216		       85 02		      sta	WSYNC
     94  f216					      REPEND
     95  f218		       85 02		      sta	WSYNC
     94  f218					      REPEND
     95  f21a		       85 02		      sta	WSYNC
     94  f21a					      REPEND
     95  f21c		       85 02		      sta	WSYNC
     94  f21c					      REPEND
     95  f21e		       85 02		      sta	WSYNC
     94  f21e					      REPEND
     95  f220		       85 02		      sta	WSYNC
     96  f222					      REPEND
     97  f222
     98  f222							;generate 30 lines of VBLANK overscan
     99  f222		       a9 02		      lda	#2
    100  f224		       85 01		      sta	VBLANK
    101  f226
    102  f226					      REPEAT	30
    103  f226		       85 02		      sta	WSYNC
    102  f226					      REPEND
    103  f228		       85 02		      sta	WSYNC
    102  f228					      REPEND
    103  f22a		       85 02		      sta	WSYNC
    102  f22a					      REPEND
    103  f22c		       85 02		      sta	WSYNC
    102  f22c					      REPEND
    103  f22e		       85 02		      sta	WSYNC
    102  f22e					      REPEND
    103  f230		       85 02		      sta	WSYNC
    102  f230					      REPEND
    103  f232		       85 02		      sta	WSYNC
    102  f232					      REPEND
    103  f234		       85 02		      sta	WSYNC
    102  f234					      REPEND
    103  f236		       85 02		      sta	WSYNC
    102  f236					      REPEND
    103  f238		       85 02		      sta	WSYNC
    102  f238					      REPEND
    103  f23a		       85 02		      sta	WSYNC
    102  f23a					      REPEND
    103  f23c		       85 02		      sta	WSYNC
    102  f23c					      REPEND
    103  f23e		       85 02		      sta	WSYNC
    102  f23e					      REPEND
    103  f240		       85 02		      sta	WSYNC
    102  f240					      REPEND
    103  f242		       85 02		      sta	WSYNC
    102  f242					      REPEND
    103  f244		       85 02		      sta	WSYNC
    102  f244					      REPEND
    103  f246		       85 02		      sta	WSYNC
    102  f246					      REPEND
    103  f248		       85 02		      sta	WSYNC
    102  f248					      REPEND
    103  f24a		       85 02		      sta	WSYNC
    102  f24a					      REPEND
    103  f24c		       85 02		      sta	WSYNC
    102  f24c					      REPEND
    103  f24e		       85 02		      sta	WSYNC
    102  f24e					      REPEND
    103  f250		       85 02		      sta	WSYNC
    102  f250					      REPEND
    103  f252		       85 02		      sta	WSYNC
    102  f252					      REPEND
    103  f254		       85 02		      sta	WSYNC
    102  f254					      REPEND
    103  f256		       85 02		      sta	WSYNC
    102  f256					      REPEND
    103  f258		       85 02		      sta	WSYNC
    102  f258					      REPEND
    103  f25a		       85 02		      sta	WSYNC
    102  f25a					      REPEND
    103  f25c		       85 02		      sta	WSYNC
    102  f25c					      REPEND
    103  f25e		       85 02		      sta	WSYNC
    102  f25e					      REPEND
    103  f260		       85 02		      sta	WSYNC
    104  f262					      REPEND
    105  f262
    106  f262		       a9 00		      lda	#0
    107  f264		       85 01		      sta	VBLANK
    108  f266
    109  f266							;jump back to the beginning for next frame
    110  f266		       4c 12 f0 	      jmp	StartFrame
    111  f269
    112  f269							;ROM Padding and end
    113  fffc					      org	$FFFC
    114  fffc		       00 f0		      .word.w	Reset
    115  fffe		       00 f0		      .word.w	Reset
