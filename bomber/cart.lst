------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;include required files
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						;segment for uninitialized variables starting at $80
      8 U009b ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		;player 0 X position
     12 U0081		       00	   JetYPos    byte.b		;player 0 Y position
     13 U0082		       00	   BomberXPos byte.b		;player 1 X position
     14 U0083		       00	   BomberYPos byte.b		;player 1 Y position
     15 U0084		       00	   MissileXPos byte.b		;missile X position
     16 U0085		       00	   MissileYPos byte.b		;missile Y position
     17 U0086		       00 00	   JetSpritePtr word.w		;Player 0 sprite pointer
     18 U0088		       00 00	   JetColourPtr word.w		;player 0 colour pointer
     19 U008a		       00 00	   BomberSpritePtr word.w		;Player 1 sprite pointer
     20 U008c		       00 00	   BomberColourPtr word.w		;player 1 colour pointer
     21 U008e		       00	   JetAnimOffset byte.b		;player 0 frame offset
     22 U008f		       00	   Random     byte.b		;set random number
     23 U0090		       00	   ScoreSprite byte.b		;store the bit pattern for the score sprite
     24 U0091		       00	   TimerSprite byte.b		;score the bit pattern for the timer sprite
     25 U0092		       00	   Score      byte.b		;2 digit score variable stored as BCD
     26 U0093		       00	   Timer      byte.b		;2 digit timer variable stored as BCD
     27 U0094		       00	   Temp       byte.b		;Temporary variable
     28 U0095		       00 00	   OnesDigitOffset word.w		;offset for score ones digit
     29 U0097		       00 00	   TensDigitOffset word.w		;offset for score tens digit
     30 U0099		       00	   TerrainColour byte.b		;grass pattern colour
     31 U009a		       00	   RiverColour byte.b		;river pattern colour
     32 U009b
     33 U009b							;define constants
     34 U009b		       00 09	   JET_HEIGHT =	9	;Player 0 sprite height
     35 U009b		       00 09	   BOMBER_HEIGHT =	9	;Player 1 sprite height
     36 U009b		       00 05	   DIGIT_HEIGHT =	5	;Scoreboard height
     37 U009b
     38 U009b
     39 U009b							;start of ROM at $F000
     40  10000 ????				       seg	code
     41  f000					      org	$F000
     42  f000
     43  f000				   reset
      0  f000					      CLEAN_START		;call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     45  f00a
     46  f00a							;initialize variables-----------------------------------------------
     47  f00a		       a9 41		      lda	#65
     48  f00c		       85 80		      sta	JetXPos	;JetXPos = 65
     49  f00e		       a9 05		      lda	#5
     50  f010		       85 81		      sta	JetYPos	;JetYPos = 5
     51  f012		       a9 53		      lda	#83
     52  f014		       85 83		      sta	BomberYPos	;BomberYPos = 83
     53  f016		       a9 41		      lda	#65
     54  f018		       85 82		      sta	BomberXPos	;BomberXPos = 65
     55  f01a		       a9 d4		      lda	#%11010100
     56  f01c		       85 8f		      sta	Random	;Random = $D4
     57  f01e		       a9 00		      lda	#0
     58  f020		       85 92		      sta	Score
     59  f022		       85 93		      sta	Timer	;score and timer = 0
     60  f024
     61  f024							;declare missile macro-----------------------------------------------
     62  f024					      MAC	draw_missile
     63  f024					      lda	#%00000000
     64  f024					      cpx	MissileYPos	;compare current scanline to missile y position
     65  f024					      bne	SkipMissileDraw	;skip draw if not equal
     66  f024				   DrawMissile
     67  f024					      lda	#%00000010	;enable missile 0 display
     68  f024					      inc	MissileYPos
     69  f024				   SkipMissileDraw
     70  f024					      sta	ENAM0	;store the value in the missile 0 TIA register
     71  f024					      ENDM
     72  f024
     73  f024							;initialize pointers------------------------------------------------
     74  f024		       a9 e5		      lda	#<JetSprite
     75  f026		       85 86		      sta	JetSpritePtr	;low byte pointer to jet sprite lookup table
     76  f028		       a9 f2		      lda	#>JetSprite
     77  f02a		       85 87		      sta	JetSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     78  f02c
     79  f02c		       a9 ff		      lda	#<JetColour
     80  f02e		       85 88		      sta	JetColourPtr	;low byte pointer to jet colour lookup table
     81  f030		       a9 f2		      lda	#>JetColour
     82  f032		       85 89		      sta	JetColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     83  f034
     84  f034		       a9 f6		      lda	#<BomberSprite
     85  f036		       85 8a		      sta	BomberSpritePtr	;low byte pointer to jet sprite lookup table
     86  f038		       a9 f2		      lda	#>BomberSprite
     87  f03a		       85 8b		      sta	BomberSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     88  f03c
     89  f03c		       a9 11		      lda	#<BomberColour
     90  f03e		       85 8c		      sta	BomberColourPtr	;low byte pointer to jet colour lookup table
     91  f040		       a9 f3		      lda	#>BomberColour
     92  f042		       85 8d		      sta	BomberColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     93  f044
     94  f044							;start main display loop--------------------------------------------
     95  f044				   StartFrame
     96  f044							;display VSYNC and VBLANK-------------------------------------------
     97  f044		       a9 02		      lda	#2
     98  f046		       85 00		      sta	VSYNC
     99  f048		       85 01		      sta	VBLANK
    100  f04a							;generate 3 lines of VSYNC------------------------------------------
    101  f04a					      REPEAT	3
    102  f04a		       85 02		      sta	WSYNC
    101  f04a					      REPEND
    102  f04c		       85 02		      sta	WSYNC
    101  f04c					      REPEND
    102  f04e		       85 02		      sta	WSYNC
    103  f050					      REPEND
    104  f050							;turn off VSYNC-----------------------------------------------------
    105  f050		       a9 00		      lda	#0
    106  f052		       85 00		      sta	VSYNC
    107  f054
    108  f054							;generate 37 lines of VBLANK----------------------------------------
    109  f054					      REPEAT	33
    110  f054		       85 02		      sta	WSYNC
    109  f054					      REPEND
    110  f056		       85 02		      sta	WSYNC
    109  f056					      REPEND
    110  f058		       85 02		      sta	WSYNC
    109  f058					      REPEND
    110  f05a		       85 02		      sta	WSYNC
    109  f05a					      REPEND
    110  f05c		       85 02		      sta	WSYNC
    109  f05c					      REPEND
    110  f05e		       85 02		      sta	WSYNC
    109  f05e					      REPEND
    110  f060		       85 02		      sta	WSYNC
    109  f060					      REPEND
    110  f062		       85 02		      sta	WSYNC
    109  f062					      REPEND
    110  f064		       85 02		      sta	WSYNC
    109  f064					      REPEND
    110  f066		       85 02		      sta	WSYNC
    109  f066					      REPEND
    110  f068		       85 02		      sta	WSYNC
    109  f068					      REPEND
    110  f06a		       85 02		      sta	WSYNC
    109  f06a					      REPEND
    110  f06c		       85 02		      sta	WSYNC
    109  f06c					      REPEND
    110  f06e		       85 02		      sta	WSYNC
    109  f06e					      REPEND
    110  f070		       85 02		      sta	WSYNC
    109  f070					      REPEND
    110  f072		       85 02		      sta	WSYNC
    109  f072					      REPEND
    110  f074		       85 02		      sta	WSYNC
    109  f074					      REPEND
    110  f076		       85 02		      sta	WSYNC
    109  f076					      REPEND
    110  f078		       85 02		      sta	WSYNC
    109  f078					      REPEND
    110  f07a		       85 02		      sta	WSYNC
    109  f07a					      REPEND
    110  f07c		       85 02		      sta	WSYNC
    109  f07c					      REPEND
    110  f07e		       85 02		      sta	WSYNC
    109  f07e					      REPEND
    110  f080		       85 02		      sta	WSYNC
    109  f080					      REPEND
    110  f082		       85 02		      sta	WSYNC
    109  f082					      REPEND
    110  f084		       85 02		      sta	WSYNC
    109  f084					      REPEND
    110  f086		       85 02		      sta	WSYNC
    109  f086					      REPEND
    110  f088		       85 02		      sta	WSYNC
    109  f088					      REPEND
    110  f08a		       85 02		      sta	WSYNC
    109  f08a					      REPEND
    110  f08c		       85 02		      sta	WSYNC
    109  f08c					      REPEND
    110  f08e		       85 02		      sta	WSYNC
    109  f08e					      REPEND
    110  f090		       85 02		      sta	WSYNC
    109  f090					      REPEND
    110  f092		       85 02		      sta	WSYNC
    109  f092					      REPEND
    110  f094		       85 02		      sta	WSYNC
    111  f096					      REPEND
    112  f096
    113  f096							;calculations and tasks in VBLANK-----------------------------------
    114  f096		       a5 80		      lda	JetXPos
    115  f098		       a0 00		      ldy	#0
    116  f09a		       20 5f f2 	      jsr	SetObjectXPos	;set player 0 horizontal position
    117  f09d
    118  f09d		       a5 82		      lda	BomberXPos
    119  f09f		       a0 01		      ldy	#1
    120  f0a1		       20 5f f2 	      jsr	SetObjectXPos	;set player 1 horizontal position
    121  f0a4
    122  f0a4		       a5 84		      lda	MissileXPos
    123  f0a6		       a0 02		      ldy	#2
    124  f0a8		       20 5f f2 	      jsr	SetObjectXPos	;set missile horizontal position
    125  f0ab
    126  f0ab		       20 a4 f2 	      jsr	CalculateDigitOffset	;calculate the scoreboard offset
    127  f0ae
    128  f0ae		       20 ce f2 	      jsr	GenerateJetSound
    129  f0b1
    130  f0b1		       85 02		      sta	WSYNC
    131  f0b3		       85 2a		      sta	HMOVE	;apply the horizontal offsets previously set
    132  f0b5
    133  f0b5							;turn off VBLANK---------------------------------------------------
    134  f0b5		       a9 00		      lda	#0
    135  f0b7		       85 01		      sta	VBLANK
    136  f0b9
    137  f0b9							;clear TIA registers-----------------------------------------------
    138  f0b9		       a9 00		      lda	#0	;clear TIA registers
    139  f0bb		       85 0d		      sta	PF0
    140  f0bd		       85 0e		      sta	PF1
    141  f0bf		       85 0f		      sta	PF2
    142  f0c1		       85 1b		      sta	GRP0
    143  f0c3		       85 1c		      sta	GRP1
    144  f0c5		       85 09		      sta	COLUBK
    145  f0c7		       a9 1c		      lda	#$1C	;set scoreboard colour to white
    146  f0c9		       85 08		      sta	COLUPF
    147  f0cb		       a9 00		      lda	#%00000000
    148  f0cd		       85 0a		      sta	CTRLPF	;disable playfield reflection
    149  f0cf
    150  f0cf							;display scoreboard lines------------------------------------------
    151  f0cf		       a2 05		      ldx	#DIGIT_HEIGHT	;store 5 in X
    152  f0d1				   ScoreDigitLoop
    153  f0d1		       a4 97		      ldy	TensDigitOffset	;get the tens digit offset for the score
    154  f0d3		       b9 1a f3 	      lda	Digits,Y	;load sprite
    155  f0d6		       29 f0		      and	#$F0	;mask the graphics for ones digit
    156  f0d8		       85 90		      sta	ScoreSprite	;score the tens digit pattern
    157  f0da
    158  f0da		       a4 95		      ldy	OnesDigitOffset
    159  f0dc		       b9 1a f3 	      lda	Digits,Y
    160  f0df		       29 0f		      and	#$0F
    161  f0e1		       05 90		      ora	ScoreSprite	;merge ones and tens into one sprite
    162  f0e3		       85 90		      sta	ScoreSprite
    163  f0e5		       85 02		      sta	WSYNC	;wait for new scanline
    164  f0e7		       85 0e		      sta	PF1	;update the playfield
    165  f0e9
    166  f0e9		       a4 98		      ldy	TensDigitOffset+1
    167  f0eb		       b9 1a f3 	      lda	Digits,Y
    168  f0ee		       29 f0		      and	#$F0
    169  f0f0		       85 91		      sta	TimerSprite
    170  f0f2
    171  f0f2		       a4 96		      ldy	OnesDigitOffset+1
    172  f0f4		       b9 1a f3 	      lda	Digits,Y
    173  f0f7		       29 0f		      and	#$0F
    174  f0f9		       05 91		      ora	TimerSprite
    175  f0fb		       85 91		      sta	TimerSprite
    176  f0fd
    177  f0fd		       20 c4 f2 	      jsr	Sleep12Cycles
    178  f100		       85 0e		      sta	PF1
    179  f102		       a4 90		      ldy	ScoreSprite
    180  f104		       85 02		      sta	WSYNC
    181  f106
    182  f106		       84 0e		      sty	PF1
    183  f108		       e6 97		      inc	TensDigitOffset
    184  f10a		       e6 98		      inc	TensDigitOffset+1
    185  f10c		       e6 95		      inc	OnesDigitOffset
    186  f10e		       e6 96		      inc	OnesDigitOffset+1
    187  f110
    188  f110		       20 c4 f2 	      jsr	Sleep12Cycles
    189  f113
    190  f113		       ca		      dex		;X--
    191  f114		       85 0e		      sta	PF1
    192  f116		       d0 b9		      bne	ScoreDigitLoop	;branch back to ScoreDigitLoop if dex != 0
    193  f118		       85 02		      sta	WSYNC
    194  f11a
    195  f11a		       a9 00		      lda	#0
    196  f11c		       85 0d		      sta	PF0
    197  f11e		       85 0e		      sta	PF1
    198  f120		       85 0f		      sta	PF2
    199  f122		       85 02		      sta	WSYNC
    200  f124		       85 02		      sta	WSYNC
    201  f126		       85 02		      sta	WSYNC
    202  f128
    203  f128							;display 96 visible scanlines (2 line kernel)-----------------------------
    204  f128				   VisibleLine
    205  f128		       a5 99		      lda	TerrainColour
    206  f12a		       85 08		      sta	COLUPF	;set the terrain colour to TerrainColour
    207  f12c
    208  f12c		       a5 9a		      lda	RiverColour
    209  f12e		       85 09		      sta	COLUBK	;set the river colour to RiverColour
    210  f130
    211  f130		       a5 01		      lda	%00000001
    212  f132		       85 0a		      sta	CTRLPF	;enable playfield reflection
    213  f134		       a9 f0		      lda	#$F0
    214  f136		       85 0d		      sta	PF0	; setting PF0 bit pattern
    215  f138		       a9 fc		      lda	#$FC
    216  f13a		       85 0e		      sta	PF1	; setting PF1 bit pattern
    217  f13c		       a9 00		      lda	#0
    218  f13e		       85 0f		      sta	PF2	; setting PF2 bit pattern
    219  f140
    220  f140		       a2 55		      ldx	#85	;X counts the remaining number of scanlines
    221  f142
    222  f142				   LineLoop
      0  f142					      DRAW_MISSILE		;assembler macro to draw missile
      1  f142		       a9 00		      lda	#%00000000
      2  f144		       e4 85		      cpx	MissileYPos
      3  f146		       d0 04		      bne	SkipMissileDraw
      4  f148				   DrawMissile
      5  f148		       a9 02		      lda	#%00000010
      6  f14a		       e6 85		      inc	MissileYPos
      7  f14c				   SkipMissileDraw
      8  f14c		       85 1d		      sta	ENAM0
    224  f14e
    225  f14e				   InsideJetSprite
    226  f14e		       8a		      txa		;transfer x to acc
    227  f14f		       38		      sec		;set carry flag for subtraction
    228  f150		       e5 81		      sbc	JetYPos	;subtract sprite Y coord
    229  f152		       c9 09		      cmp	#JET_HEIGHT	;compare with jet height
    230  f154		       90 02		      bcc	DrawSpriteP0	;if result < SpriteHeight call draw routine
    231  f156		       a9 00		      lda	#0	;else, load 0
    232  f158
    233  f158				   DrawSpriteP0
    234  f158		       18		      clc		;clear carry before addition
    235  f159		       65 8e		      adc	JetAnimOffset	;jump to the sprite frame in memory
    236  f15b
    237  f15b		       a8		      tay		;Load Y so pointer can be worked with
    238  f15c		       b1 86		      lda	(JetSpritePtr),Y	;Load P0 Bitmap data
    239  f15e		       85 02		      sta	WSYNC	;wait for next scanline
    240  f160		       85 1b		      sta	GRP0	;set graphics for P0
    241  f162		       b1 88		      lda	(JetColourPtr),Y	;load P0 Colour data
    242  f164		       85 06		      sta	COLUP0	;set colour of P0
    243  f166
    244  f166				   InsideBomberSprite
    245  f166		       8a		      txa		;transfer x to acc
    246  f167		       38		      sec		;set carry flag for subtraction
    247  f168		       e5 83		      sbc	BomberYPos	;subtract sprite Y coord
    248  f16a		       c9 09		      cmp	#BOMBER_HEIGHT	;compare with jet height
    249  f16c		       90 02		      bcc	DrawSpriteP1	;if result < SpriteHeight call draw routine
    250  f16e		       a9 00		      lda	#0	;else, load 0
    251  f170
    252  f170				   DrawSpriteP1
    253  f170		       a8		      tay		;Load Y so pointer can be worked with
    254  f171		       b1 8a		      lda	(BomberSpritePtr),Y	;Load P0 Bitmap data
    255  f173		       85 02		      sta	WSYNC	;wait for next scanline
    256  f175		       85 1c		      sta	GRP1	;set graphics for P0
    257  f177		       b1 8c		      lda	(BomberColourPtr),Y	;load P0 Colour data
    258  f179		       85 07		      sta	COLUP1	;set colour of P0
    259  f17b
    260  f17b		       ca		      dex		;X--
    261  f17c		       d0 c4		      bne	LineLoop	;repeat next visible scanline until finished
    262  f17e
    263  f17e		       a9 00		      lda	#0
    264  f180		       85 8e		      sta	JetAnimOffset	;reset jet animation
    265  f182
    266  f182
    267  f182		       a9 02		      lda	#2
    268  f184		       85 01		      sta	VBLANK	;turn on VBLANK
    269  f186
    270  f186					      REPEAT	30
    271  f186		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f186					      REPEND
    271  f188		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f188					      REPEND
    271  f18a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f18a					      REPEND
    271  f18c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f18c					      REPEND
    271  f18e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f18e					      REPEND
    271  f190		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f190					      REPEND
    271  f192		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f192					      REPEND
    271  f194		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f194					      REPEND
    271  f196		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f196					      REPEND
    271  f198		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f198					      REPEND
    271  f19a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f19a					      REPEND
    271  f19c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f19c					      REPEND
    271  f19e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f19e					      REPEND
    271  f1a0		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1a0					      REPEND
    271  f1a2		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1a2					      REPEND
    271  f1a4		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1a4					      REPEND
    271  f1a6		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1a6					      REPEND
    271  f1a8		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1a8					      REPEND
    271  f1aa		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1aa					      REPEND
    271  f1ac		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1ac					      REPEND
    271  f1ae		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1ae					      REPEND
    271  f1b0		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1b0					      REPEND
    271  f1b2		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1b2					      REPEND
    271  f1b4		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1b4					      REPEND
    271  f1b6		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1b6					      REPEND
    271  f1b8		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1b8					      REPEND
    271  f1ba		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1ba					      REPEND
    271  f1bc		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1bc					      REPEND
    271  f1be		       85 02		      sta	WSYNC	;display 30 lines of overscan
    270  f1be					      REPEND
    271  f1c0		       85 02		      sta	WSYNC	;display 30 lines of overscan
    272  f1c2					      REPEND
    273  f1c2
    274  f1c2		       a9 00		      lda	#0
    275  f1c4		       85 01		      sta	VBLANK	;turn off VBLANK
    276  f1c6
    277  f1c6							;process joystick input for P0--------------------------------------------------------------------
    278  f1c6				   CheckP0Up
    279  f1c6		       a9 10		      lda	#%00010000	;player 0 joystick up
    280  f1c8		       2c 80 02 	      bit	SWCHA
    281  f1cb		       d0 0c		      bne	CheckP0Down
    282  f1cd		       a5 81		      lda	JetYPos	;if up isnt being pressed skip to down
    283  f1cf		       c9 46		      cmp	#70
    284  f1d1		       10 2c		      bpl	CheckP0Right
    285  f1d3				   P0UpPressed
    286  f1d3		       e6 81		      inc	JetYPos
    287  f1d5		       a9 00		      lda	#0
    288  f1d7		       85 8e		      sta	JetAnimOffset	;reset animation
    289  f1d9
    290  f1d9				   CheckP0Down
    291  f1d9		       a9 20		      lda	#%00100000	;Player 0 joystick down
    292  f1db		       2c 80 02 	      bit	SWCHA
    293  f1de		       d0 0c		      bne	CheckP0Left	;skip to left if not pressed
    294  f1e0		       a5 81		      lda	JetYPos
    295  f1e2		       c9 05		      cmp	#5
    296  f1e4		       30 06		      bmi	CheckP0Left
    297  f1e6				   P0DownPressed
    298  f1e6		       c6 81		      dec	JetYPos
    299  f1e8		       a9 00		      lda	#0
    300  f1ea		       85 8e		      sta	JetAnimOffset	;reset animation
    301  f1ec
    302  f1ec				   CheckP0Left
    303  f1ec		       a9 40		      lda	#%01000000	;Player 0 joystick left
    304  f1ee		       2c 80 02 	      bit	SWCHA
    305  f1f1		       d0 0c		      bne	CheckP0Right	;skip to right if not pressed
    306  f1f3		       a5 80		      lda	JetXPos
    307  f1f5		       c9 23		      cmp	#35
    308  f1f7		       30 06		      bmi	CheckP0Right
    309  f1f9				   P0LeftPressed
    310  f1f9		       c6 80		      dec	JetXPos
    311  f1fb		       a9 09		      lda	#JET_HEIGHT	;9
    312  f1fd		       85 8e		      sta	JetAnimOffset	;set the animation offset to the next frame
    313  f1ff
    314  f1ff				   CheckP0Right
    315  f1ff		       a9 80		      lda	#%10000000	;player 0 joystick right
    316  f201		       2c 80 02 	      bit	SWCHA
    317  f204		       d0 0c		      bne	CheckButtonPressed	;fallback to button press
    318  f206		       a5 80		      lda	JetXPos
    319  f208		       c9 64		      cmp	#100
    320  f20a		       10 06		      bpl	CheckButtonPressed
    321  f20c				   P0RightPressed
    322  f20c		       e6 80		      inc	JetXPos
    323  f20e		       a9 09		      lda	#JET_HEIGHT	;9
    324  f210		       85 8e		      sta	JetAnimOffset	;set the animation offset to the next frame
    325  f212
    326  f212				   CheckButtonPressed
    327  f212		       a9 80		      lda	#%10000000
    328  f214		       24 0c		      bit	INPT4	;if button is pressed and not equal end input check
    329  f216		       d0 0e		      bne	NoInput
    330  f218				   ButtonPressed
    331  f218		       a5 80		      lda	JetXPos
    332  f21a		       18		      clc
    333  f21b		       69 04		      adc	#4
    334  f21d		       85 84		      sta	MissileXPos	;spawn missile at jet x position
    335  f21f		       a5 81		      lda	JetYPos
    336  f221		       18		      clc
    337  f222		       69 05		      adc	#5
    338  f224		       85 85		      sta	MissileYPos	;spawn missile at jet y position
    339  f226
    340  f226				   NoInput
    341  f226
    342  f226							;calculations to update position for next frame--------------------------------------------------
    343  f226				   UpdateBomberPosition
    344  f226		       a5 83		      lda	BomberYPos	;load Bomber Y position to acc
    345  f228		       18		      clc		;clear the carry flag
    346  f229		       c9 00		      cmp	#0	;compare Y position to 0
    347  f22b		       30 05		      bmi	ResetBomberPosition	;branch to ResetBomberPosition if the number is a negative
    348  f22d		       c6 83		      dec	BomberYPos	;decrement the bomber y position
    349  f22f		       4c 35 f2 	      jmp	EndPositionUpdate	;jump to fallback
    350  f232
    351  f232				   ResetBomberPosition		;resets Bomber Y position back to the top of the screen
    352  f232		       20 7e f2 	      jsr	GetRandomBomberPosition	;call subroutine for random bomber x position
    353  f235
    354  f235				   EndPositionUpdate		;fallback for position update code
    355  f235
    356  f235							;check for object collision----------------------------------------------------------------------
    357  f235				   CheckCollisionP0P1
    358  f235		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects P0 and P1 collision
    359  f237		       24 07		      bit	CXPPMM	;check CXPPMM with the above pattern
    360  f239		       d0 06		      bne	CollisionP0P1	;collision between P0 and P1
    361  f23b		       20 c5 f2 	      jsr	SetTerrainRiverColour
    362  f23e		       4c 44 f2 	      jmp	CheckCollisionM0P1
    363  f241
    364  f241				   CollisionP0P1
    365  f241		       20 73 f2 	      jsr	GameOver	;game over
    366  f244
    367  f244				   CheckCollisionM0P1
    368  f244		       a9 80		      lda	#%10000000
    369  f246		       24 00		      bit	CXM0P
    370  f248		       d0 03		      bne	M0P1Collided
    371  f24a		       4c 5a f2 	      jmp	EndCollisionCheck
    372  f24d
    373  f24d				   M0P1Collided
    374  f24d		       f8		      sed
    375  f24e		       a5 92		      lda	Score
    376  f250		       18		      clc
    377  f251		       69 01		      adc	#1
    378  f253		       85 92		      sta	Score
    379  f255		       d8		      cld
    380  f256		       a9 00		      lda	#0
    381  f258		       85 85		      sta	MissileYPos
    382  f25a
    383  f25a				   EndCollisionCheck		;collision check fallback
    384  f25a		       85 2c		      sta	CXCLR
    385  f25c
    386  f25c							;loop new frame
    387  f25c		       4c 44 f0 	      jmp	StartFrame
    388  f25f
    389  f25f							;subroutine to handle sprite X offset----------------------------------------------------------
    390  f25f							;A is the target offset position,
    391  f25f							;Y is the object type (0: Player0 1: Player1 2: missile0 3: missile1 4: ball)
    392  f25f				   SetObjectXPos subroutine
    393  f25f		       85 02		      sta	WSYNC	;wait for fresh scanline
    394  f261		       38		      sec		;carry flag for subtraction
    395  f262				   DivideLoop
    396  f262		       e9 0f		      sbc	#15	;subtract 15 from acc
    397  f264		       b0 fc		      bcs	DivideLoop	;loop until carry flag is clear
    398  f266		       49 07		      eor	#7	;adjust remainder to -8 to 7
    399  f268		       0a		      asl
    400  f269		       0a		      asl
    401  f26a		       0a		      asl
    402  f26b		       0a		      asl		;four left shifts as HMP0 only targets the top 4 bits
    403  f26c		       99 20 00 	      sta	HMP0,Y	;store the fine offset
    404  f26f		       99 10 00 	      sta	RESP0,Y	;fix object in 15 step intervals
    405  f272		       60		      rts
    406  f273
    407  f273							;Game over Subroutine-------------------------------------------------------------------------
    408  f273				   GameOver   subroutine
    409  f273		       a9 30		      lda	#$30
    410  f275		       85 99		      sta	TerrainColour	;set terrain colour to red
    411  f277		       85 9a		      sta	RiverColour	;set river colour to red
    412  f279		       a9 00		      lda	#0
    413  f27b		       85 92		      sta	Score	;score = 0
    414  f27d		       60		      rts
    415  f27e
    416  f27e							;subroutine to generate Linear Feedback Shift Register random number--------------------------
    417  f27e							;generate a random number
    418  f27e							;divide the random by 4 to match river width
    419  f27e							;add 30 to compensate for left playfield
    420  f27e				   GetRandomBomberPosition subroutine
    421  f27e		       a5 8f		      lda	Random
    422  f280		       0a		      asl
    423  f281		       45 8f		      eor	Random
    424  f283		       0a		      asl
    425  f284		       45 8f		      eor	Random
    426  f286		       0a		      asl
    427  f287		       0a		      asl
    428  f288		       45 8f		      eor	Random
    429  f28a		       0a		      asl
    430  f28b		       26 8f		      rol	Random	; performs a series of shifts and bit operations
    431  f28d
    432  f28d		       4a		      lsr
    433  f28e		       4a		      lsr		; divide the value by 4 with 2 right shifts
    434  f28f		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    435  f291		       a9 1e		      lda	#30
    436  f293		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    437  f295		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    438  f297
    439  f297		       a9 60		      lda	#96
    440  f299		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    441  f29b
    442  f29b				   SetScoreValues
    443  f29b		       f8		      sed		;set decimal mode
    444  f29c		       a5 93		      lda	Timer
    445  f29e		       18		      clc
    446  f29f		       69 01		      adc	#1
    447  f2a1		       85 93		      sta	Timer	;add 1 to timer
    448  f2a3
    449  f2a3		       d8		      cld		;disable BCD mode
    450  f2a4
    451  f2a4							;Subroutine to handle scoreboard digits---------------------------------------------------------------------
    452  f2a4							;convert the top and bottom nybbles into the score and timer offset
    453  f2a4							;each digit is 5 bytes tall
    454  f2a4							;for low nybble multiplication of 5 is required
    455  f2a4							;left shift to multiply by two
    456  f2a4							;right shift to divide
    457  f2a4
    458  f2a4				   CalculateDigitOffset subroutine
    459  f2a4		       a2 01		      ldx	#1	;loop counter
    460  f2a6				   PrepareScoreLoop		;loop twice, first 1 then 0
    461  f2a6		       b5 92		      lda	Score,X	;Score + 1 = timer
    462  f2a8		       29 0f		      and	#$0F	;remove the tens digit by masking 4 bits
    463  f2aa		       85 94		      sta	Temp	;Save the value in a temporary variable
    464  f2ac		       0a		      asl		;shift left twice and add N for multiplication by 5
    465  f2ad		       0a		      asl
    466  f2ae		       65 94		      adc	Temp
    467  f2b0		       95 95		      sta	OnesDigitOffset,X
    468  f2b2
    469  f2b2		       b5 92		      lda	Score,X
    470  f2b4		       29 f0		      and	#$F0
    471  f2b6		       4a		      lsr
    472  f2b7		       4a		      lsr
    473  f2b8		       85 94		      sta	Temp
    474  f2ba		       4a		      lsr
    475  f2bb		       4a		      lsr
    476  f2bc		       65 94		      adc	Temp
    477  f2be		       95 97		      sta	TensDigitOffset,X
    478  f2c0
    479  f2c0		       ca		      dex
    480  f2c1		       10 e3		      bpl	PrepareScoreLoop	;to prepare score loop
    481  f2c3		       60		      rts
    482  f2c4
    483  f2c4				   Sleep12Cycles subroutine
    484  f2c4		       60		      rts
    485  f2c5
    486  f2c5				   SetTerrainRiverColour subroutine
    487  f2c5		       a9 c2		      lda	#$C2
    488  f2c7		       85 99		      sta	TerrainColour	;set colour to green
    489  f2c9		       a9 84		      lda	#$84
    490  f2cb		       85 9a		      sta	RiverColour	;set river to blue
    491  f2cd		       60		      rts
    492  f2ce
    493  f2ce				   GenerateJetSound subroutine
    494  f2ce		       a9 01		      lda	#1
    495  f2d0		       85 19		      sta	AUDV0	;set volume register to 3
    496  f2d2
    497  f2d2		       a5 81		      lda	JetYPos	;load y position into A
    498  f2d4		       4a		      lsr
    499  f2d5		       4a		      lsr
    500  f2d6		       4a		      lsr		;divide JetYPos by 8
    501  f2d7		       85 94		      sta	Temp	;store in Temp
    502  f2d9		       a9 19		      lda	#25	;load 31 into A
    503  f2db		       38		      sec		;set carry flag
    504  f2dc		       e5 94		      sbc	Temp	;subtract JetYPos from 31
    505  f2de		       85 17		      sta	AUDF0	;set new pitch
    506  f2e0
    507  f2e0		       a9 08		      lda	#8
    508  f2e2		       85 15		      sta	AUDC0	;set tone register to 4
    509  f2e4
    510  f2e4
    511  f2e4		       60		      rts
    512  f2e5							;ROM lookup tables-----------------------------------------------------------------------
    513  f2e5				   JetSprite
    514  f2e5		       00		      .byte.b	#%00000000
    515  f2e6		       54		      .byte.b	#%01010100	;$1E
    516  f2e7		       54		      .byte.b	#%01010100	;$40
    517  f2e8		       7c		      .byte.b	#%01111100	;$40
    518  f2e9		       38		      .byte.b	#%00111000	;$40
    519  f2ea		       38		      .byte.b	#%00111000	;$40
    520  f2eb		       38		      .byte.b	#%00111000	;$40
    521  f2ec		       10		      .byte.b	#%00010000	;$40
    522  f2ed		       10		      .byte.b	#%00010000	;$40
    523  f2ee
    524  f2ee
    525  f2ee				   JetSpriteTurn
    526  f2ee		       00		      .byte.b	#%00000000	;$1E
    527  f2ef		       28		      .byte.b	#%00101000	;$1E
    528  f2f0		       38		      .byte.b	#%00111000	;$40
    529  f2f1		       38		      .byte.b	#%00111000	;$40
    530  f2f2		       10		      .byte.b	#%00010000	;$40
    531  f2f3		       10		      .byte.b	#%00010000	;$40
    532  f2f4		       10		      .byte.b	#%00010000	;$40
    533  f2f5		       10		      .byte.b	#%00010000	;$40
    534  f2f6
    535  f2f6				   BomberSprite
    536  f2f6		       00		      .byte.b	#%00000000
    537  f2f7		       00		      .byte.b	#%00000000
    538  f2f8		       08		      .byte.b	#%00001000
    539  f2f9		       14		      .byte.b	#%00010100
    540  f2fa		       2a		      .byte.b	#%00101010
    541  f2fb		       2a		      .byte.b	#%00101010
    542  f2fc		       7f		      .byte.b	#%01111111
    543  f2fd		       49		      .byte.b	#%01001001
    544  f2fe		       49		      .byte.b	#%01001001
    545  f2ff
    546  f2ff				   JetColour
    547  f2ff		       00		      .byte.b	#$00
    548  f300		       1e		      .byte.b	#$1E
    549  f301		       40		      .byte.b	#$40
    550  f302		       40		      .byte.b	#$40
    551  f303		       40		      .byte.b	#$40
    552  f304		       40		      .byte.b	#$40
    553  f305		       40		      .byte.b	#$40
    554  f306		       40		      .byte.b	#$40
    555  f307		       40		      .byte.b	#$40
    556  f308
    557  f308				   JetTurnColour
    558  f308		       1e		      .byte.b	#$1E	;
    559  f309		       1e		      .byte.b	#$1E	;
    560  f30a		       40		      .byte.b	#$40	;
    561  f30b		       40		      .byte.b	#$40	;
    562  f30c		       40		      .byte.b	#$40	;
    563  f30d		       40		      .byte.b	#$40	;
    564  f30e		       40		      .byte.b	#$40	;
    565  f30f		       40		      .byte.b	#$40	;
    566  f310		       40		      .byte.b	#$40	;
    567  f311
    568  f311				   BomberColour
    569  f311		       00		      .byte.b	#$00
    570  f312		       00		      .byte.b	#$00
    571  f313		       ff		      .byte.b	#$FF
    572  f314		       ff		      .byte.b	#$FF
    573  f315		       40		      .byte.b	#$40
    574  f316		       40		      .byte.b	#$40
    575  f317		       40		      .byte.b	#$40
    576  f318		       40		      .byte.b	#$40
    577  f319		       0f		      .byte.b	#$0F
    578  f31a
    579  f31a				   Digits
    580  f31a		       77		      .byte.b	%01110111	; ### ###
    581  f31b		       55		      .byte.b	%01010101	; # # # #
    582  f31c		       55		      .byte.b	%01010101	; # # # #
    583  f31d		       55		      .byte.b	%01010101	; # # # #
    584  f31e		       77		      .byte.b	%01110111	; ### ###
    585  f31f
    586  f31f		       11		      .byte.b	%00010001	;   #	 #
    587  f320		       11		      .byte.b	%00010001	;   #	 #
    588  f321		       11		      .byte.b	%00010001	;   #	 #
    589  f322		       11		      .byte.b	%00010001	;   #	 #
    590  f323		       11		      .byte.b	%00010001	;   #	 #
    591  f324
    592  f324		       77		      .byte.b	%01110111	; ### ###
    593  f325		       11		      .byte.b	%00010001	;   #	 #
    594  f326		       77		      .byte.b	%01110111	; ### ###
    595  f327		       44		      .byte.b	%01000100	; #   #
    596  f328		       77		      .byte.b	%01110111	; ### ###
    597  f329
    598  f329		       77		      .byte.b	%01110111	; ### ###
    599  f32a		       11		      .byte.b	%00010001	;   #	 #
    600  f32b		       33		      .byte.b	%00110011	;  ##	##
    601  f32c		       11		      .byte.b	%00010001	;   #	 #
    602  f32d		       77		      .byte.b	%01110111	; ### ###
    603  f32e
    604  f32e		       55		      .byte.b	%01010101	; # # # #
    605  f32f		       55		      .byte.b	%01010101	; # # # #
    606  f330		       77		      .byte.b	%01110111	; ### ###
    607  f331		       11		      .byte.b	%00010001	;   #	 #
    608  f332		       11		      .byte.b	%00010001	;   #	 #
    609  f333
    610  f333		       77		      .byte.b	%01110111	; ### ###
    611  f334		       44		      .byte.b	%01000100	; #   #
    612  f335		       77		      .byte.b	%01110111	; ### ###
    613  f336		       11		      .byte.b	%00010001	;   #	 #
    614  f337		       77		      .byte.b	%01110111	; ### ###
    615  f338
    616  f338		       77		      .byte.b	%01110111	; ### ###
    617  f339		       44		      .byte.b	%01000100	; #   #
    618  f33a		       77		      .byte.b	%01110111	; ### ###
    619  f33b		       55		      .byte.b	%01010101	; # # # #
    620  f33c		       77		      .byte.b	%01110111	; ### ###
    621  f33d
    622  f33d		       77		      .byte.b	%01110111	; ### ###
    623  f33e		       11		      .byte.b	%00010001	;   #	 #
    624  f33f		       11		      .byte.b	%00010001	;   #	 #
    625  f340		       11		      .byte.b	%00010001	;   #	 #
    626  f341		       11		      .byte.b	%00010001	;   #	 #
    627  f342
    628  f342		       77		      .byte.b	%01110111	; ### ###
    629  f343		       55		      .byte.b	%01010101	; # # # #
    630  f344		       77		      .byte.b	%01110111	; ### ###
    631  f345		       55		      .byte.b	%01010101	; # # # #
    632  f346		       77		      .byte.b	%01110111	; ### ###
    633  f347
    634  f347		       77		      .byte.b	%01110111	; ### ###
    635  f348		       55		      .byte.b	%01010101	; # # # #
    636  f349		       77		      .byte.b	%01110111	; ### ###
    637  f34a		       11		      .byte.b	%00010001	;   #	 #
    638  f34b		       77		      .byte.b	%01110111	; ### ###
    639  f34c
    640  f34c		       22		      .byte.b	%00100010	;  #	#
    641  f34d		       55		      .byte.b	%01010101	; # # # #
    642  f34e		       77		      .byte.b	%01110111	; ### ###
    643  f34f		       55		      .byte.b	%01010101	; # # # #
    644  f350		       55		      .byte.b	%01010101	; # # # #
    645  f351
    646  f351		       77		      .byte.b	%01110111	; ### ###
    647  f352		       55		      .byte.b	%01010101	; # # # #
    648  f353		       66		      .byte.b	%01100110	; ##  ##
    649  f354		       55		      .byte.b	%01010101	; # # # #
    650  f355		       77		      .byte.b	%01110111	; ### ###
    651  f356
    652  f356		       77		      .byte.b	%01110111	; ### ###
    653  f357		       44		      .byte.b	%01000100	; #   #
    654  f358		       44		      .byte.b	%01000100	; #   #
    655  f359		       44		      .byte.b	%01000100	; #   #
    656  f35a		       77		      .byte.b	%01110111	; ### ###
    657  f35b
    658  f35b		       66		      .byte.b	%01100110	; ##  ##
    659  f35c		       55		      .byte.b	%01010101	; # # # #
    660  f35d		       55		      .byte.b	%01010101	; # # # #
    661  f35e		       55		      .byte.b	%01010101	; # # # #
    662  f35f		       66		      .byte.b	%01100110	; ##  ##
    663  f360
    664  f360		       77		      .byte.b	%01110111	; ### ###
    665  f361		       44		      .byte.b	%01000100	; #   #
    666  f362		       77		      .byte.b	%01110111	; ### ###
    667  f363		       44		      .byte.b	%01000100	; #   #
    668  f364		       77		      .byte.b	%01110111	; ### ###
    669  f365
    670  f365		       77		      .byte.b	%01110111	; ### ###
    671  f366		       44		      .byte.b	%01000100	; #   #
    672  f367		       66		      .byte.b	%01100110	; ##  ##
    673  f368		       44		      .byte.b	%01000100	; #   #
    674  f369		       44		      .byte.b	%01000100	; #   #
    675  f36a
    676  f36a							;end of ROM------------------------------------------------------------------
    677  fffc					      org	$FFFC
    678  fffc		       00 f0		      .word.w	reset
    679  fffe		       00 f0		      .word.w	reset
