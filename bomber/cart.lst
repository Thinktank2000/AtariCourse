------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;include required files
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						;segment for uninitialized variables starting at $80
      8 U008e ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		;player 0 X position
     12 U0081		       00	   JetYPos    byte.b		;player 0 Y position
     13 U0082		       00	   BomberXPos byte.b		;player 1 X position
     14 U0083		       00	   BomberYPos byte.b		;player 1 Y position
     15 U0084		       00 00	   JetSpritePtr word.w		;Player 0 sprite pointer
     16 U0086		       00 00	   JetColourPtr word.w		;player 0 colour pointer
     17 U0088		       00 00	   BomberSpritePtr word.w		;Player 1 sprite pointer
     18 U008a		       00 00	   BomberColourPtr word.w		;player 1 colour pointer
     19 U008c		       00	   JetAnimOffset byte.b		;player 0 frame offset
     20 U008d		       00	   Random     byte.b		;set random number
     21 U008e
     22 U008e							;define constants
     23 U008e		       00 09	   JET_HEIGHT =	9	;Player 0 sprite height
     24 U008e		       00 09	   BOMBER_HEIGHT =	9	;PLayer 1 sprite height
     25 U008e
     26 U008e
     27 U008e							;start of ROM at $F000
     28  10000 ????				       seg	code
     29  f000					      org	$F000
     30  f000
     31  f000				   reset
      0  f000					      CLEAN_START		;call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     33  f00a
     34  f00a							;initialize variables
     35  f00a		       a9 41		      lda	#65
     36  f00c		       85 80		      sta	JetXPos	;JetXPos = 65
     37  f00e		       a9 05		      lda	#5
     38  f010		       85 81		      sta	JetYPos	;JetYPos = 5
     39  f012		       a9 53		      lda	#83
     40  f014		       85 83		      sta	BomberYPos	;BomberYPos = 83
     41  f016		       a9 41		      lda	#65
     42  f018		       85 82		      sta	BomberXPos	;BomberXPos = 65
     43  f01a		       a9 d4		      lda	#%11010100
     44  f01c		       85 8d		      sta	Random	;Random = $D4
     45  f01e
     46  f01e							;initialize pointers
     47  f01e		       a9 0d		      lda	#<JetSprite
     48  f020		       85 84		      sta	JetSpritePtr	;low byte pointer to jet sprite lookup table
     49  f022		       a9 f2		      lda	#>JetSprite
     50  f024		       85 85		      sta	JetSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     51  f026
     52  f026		       a9 27		      lda	#<JetColour
     53  f028		       85 86		      sta	JetColourPtr	;low byte pointer to jet colour lookup table
     54  f02a		       a9 f2		      lda	#>JetColour
     55  f02c		       85 87		      sta	JetColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     56  f02e
     57  f02e		       a9 1e		      lda	#<BomberSprite
     58  f030		       85 88		      sta	BomberSpritePtr	;low byte pointer to jet sprite lookup table
     59  f032		       a9 f2		      lda	#>BomberSprite
     60  f034		       85 89		      sta	BomberSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     61  f036
     62  f036		       a9 39		      lda	#<BomberColour
     63  f038		       85 8a		      sta	BomberColourPtr	;low byte pointer to jet colour lookup table
     64  f03a		       a9 f2		      lda	#>BomberColour
     65  f03c		       85 8b		      sta	BomberColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     66  f03e
     67  f03e
     68  f03e
     69  f03e							;start main display loop
     70  f03e				   StartFrame
     71  f03e							;calculations and tasks pre VBLANK
     72  f03e		       a5 80		      lda	JetXPos
     73  f040		       a0 00		      ldy	#0
     74  f042		       20 d6 f1 	      jsr	SetObjectXPos	;set player 0 horizontal position
     75  f045
     76  f045		       a5 82		      lda	BomberXPos
     77  f047		       a0 01		      ldy	#1
     78  f049		       20 d6 f1 	      jsr	SetObjectXPos	;set player 1 horizontal position
     79  f04c
     80  f04c		       85 02		      sta	WSYNC
     81  f04e		       85 2a		      sta	HMOVE	;apply the horizontal offsets previously set
     82  f050
     83  f050
     84  f050							;display VSYNC and VBLANK
     85  f050		       a9 02		      lda	#2
     86  f052		       85 00		      sta	VSYNC
     87  f054		       85 01		      sta	VBLANK
     88  f056
     89  f056							;generate 3 lines of VSYNC
     90  f056					      REPEAT	3
     91  f056		       85 02		      sta	WSYNC
     90  f056					      REPEND
     91  f058		       85 02		      sta	WSYNC
     90  f058					      REPEND
     91  f05a		       85 02		      sta	WSYNC
     92  f05c					      REPEND
     93  f05c
     94  f05c							;turn off VSYNC
     95  f05c		       a9 00		      lda	#0
     96  f05e		       85 00		      sta	VSYNC
     97  f060
     98  f060							;generate 37 lines of VBLANK
     99  f060					      REPEAT	37
    100  f060		       85 02		      sta	WSYNC
     99  f060					      REPEND
    100  f062		       85 02		      sta	WSYNC
     99  f062					      REPEND
    100  f064		       85 02		      sta	WSYNC
     99  f064					      REPEND
    100  f066		       85 02		      sta	WSYNC
     99  f066					      REPEND
    100  f068		       85 02		      sta	WSYNC
     99  f068					      REPEND
    100  f06a		       85 02		      sta	WSYNC
     99  f06a					      REPEND
    100  f06c		       85 02		      sta	WSYNC
     99  f06c					      REPEND
    100  f06e		       85 02		      sta	WSYNC
     99  f06e					      REPEND
    100  f070		       85 02		      sta	WSYNC
     99  f070					      REPEND
    100  f072		       85 02		      sta	WSYNC
     99  f072					      REPEND
    100  f074		       85 02		      sta	WSYNC
     99  f074					      REPEND
    100  f076		       85 02		      sta	WSYNC
     99  f076					      REPEND
    100  f078		       85 02		      sta	WSYNC
     99  f078					      REPEND
    100  f07a		       85 02		      sta	WSYNC
     99  f07a					      REPEND
    100  f07c		       85 02		      sta	WSYNC
     99  f07c					      REPEND
    100  f07e		       85 02		      sta	WSYNC
     99  f07e					      REPEND
    100  f080		       85 02		      sta	WSYNC
     99  f080					      REPEND
    100  f082		       85 02		      sta	WSYNC
     99  f082					      REPEND
    100  f084		       85 02		      sta	WSYNC
     99  f084					      REPEND
    100  f086		       85 02		      sta	WSYNC
     99  f086					      REPEND
    100  f088		       85 02		      sta	WSYNC
     99  f088					      REPEND
    100  f08a		       85 02		      sta	WSYNC
     99  f08a					      REPEND
    100  f08c		       85 02		      sta	WSYNC
     99  f08c					      REPEND
    100  f08e		       85 02		      sta	WSYNC
     99  f08e					      REPEND
    100  f090		       85 02		      sta	WSYNC
     99  f090					      REPEND
    100  f092		       85 02		      sta	WSYNC
     99  f092					      REPEND
    100  f094		       85 02		      sta	WSYNC
     99  f094					      REPEND
    100  f096		       85 02		      sta	WSYNC
     99  f096					      REPEND
    100  f098		       85 02		      sta	WSYNC
     99  f098					      REPEND
    100  f09a		       85 02		      sta	WSYNC
     99  f09a					      REPEND
    100  f09c		       85 02		      sta	WSYNC
     99  f09c					      REPEND
    100  f09e		       85 02		      sta	WSYNC
     99  f09e					      REPEND
    100  f0a0		       85 02		      sta	WSYNC
     99  f0a0					      REPEND
    100  f0a2		       85 02		      sta	WSYNC
     99  f0a2					      REPEND
    100  f0a4		       85 02		      sta	WSYNC
     99  f0a4					      REPEND
    100  f0a6		       85 02		      sta	WSYNC
     99  f0a6					      REPEND
    100  f0a8		       85 02		      sta	WSYNC
    101  f0aa					      REPEND
    102  f0aa
    103  f0aa							;turn off VBLANK
    104  f0aa		       a9 00		      lda	#0
    105  f0ac		       85 01		      sta	VBLANK
    106  f0ae
    107  f0ae							;display scoreboard lines
    108  f0ae		       a9 00		      lda	#0	;clear TIA registers
    109  f0b0		       85 0d		      sta	PF0
    110  f0b2		       85 0e		      sta	PF1
    111  f0b4		       85 0f		      sta	PF2
    112  f0b6		       85 1b		      sta	GRP0
    113  f0b8		       85 1c		      sta	GRP1
    114  f0ba		       85 08		      sta	COLUPF
    115  f0bc					      REPEAT	20
    116  f0bc		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0bc					      REPEND
    116  f0be		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0be					      REPEND
    116  f0c0		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0c0					      REPEND
    116  f0c2		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0c2					      REPEND
    116  f0c4		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0c4					      REPEND
    116  f0c6		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0c6					      REPEND
    116  f0c8		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0c8					      REPEND
    116  f0ca		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0ca					      REPEND
    116  f0cc		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0cc					      REPEND
    116  f0ce		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0ce					      REPEND
    116  f0d0		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0d0					      REPEND
    116  f0d2		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0d2					      REPEND
    116  f0d4		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0d4					      REPEND
    116  f0d6		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0d6					      REPEND
    116  f0d8		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0d8					      REPEND
    116  f0da		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0da					      REPEND
    116  f0dc		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0dc					      REPEND
    116  f0de		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0de					      REPEND
    116  f0e0		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    115  f0e0					      REPEND
    116  f0e2		       85 02		      sta	WSYNC	;display 20 scoreboard scanlines
    117  f0e4					      REPEND
    118  f0e4
    119  f0e4							;display 96 visible scanlines (2 line kernel)
    120  f0e4				   VisibleLine
    121  f0e4		       a9 84		      lda	#$84
    122  f0e6		       85 09		      sta	COLUBK	;set background to pale blue
    123  f0e8
    124  f0e8		       a9 c2		      lda	#$C2
    125  f0ea		       85 08		      sta	COLUPF	;set playfield to green
    126  f0ec
    127  f0ec		       a5 01		      lda	%00000001
    128  f0ee		       85 0a		      sta	CTRLPF	;enable playfield reflection
    129  f0f0
    130  f0f0		       a9 f0		      lda	#$F0
    131  f0f2		       85 0d		      sta	PF0
    132  f0f4							; setting PF0 bit pattern
    133  f0f4		       a9 fc		      lda	#$FC
    134  f0f6		       85 0e		      sta	PF1
    135  f0f8							; setting PF1 bit pattern
    136  f0f8		       a9 00		      lda	#0
    137  f0fa		       85 0f		      sta	PF2	; setting PF2 bit pattern
    138  f0fc
    139  f0fc		       a2 54		      ldx	#84	;X counts the remaining number of scanlines
    140  f0fe				   LineLoop
    141  f0fe				   InsideJetSprite
    142  f0fe		       8a		      txa		;transfer x to acc
    143  f0ff		       38		      sec		;set carry flag for subtraction
    144  f100		       e5 81		      sbc	JetYPos	;subtract sprite Y coord
    145  f102		       c5 09		      cmp	JET_HEIGHT	;compare with jet height
    146  f104		       90 02		      bcc	DrawSpriteP0	;if result < SpriteHeight call draw routine
    147  f106		       a9 00		      lda	#0	;else, load 0
    148  f108
    149  f108				   DrawSpriteP0
    150  f108		       18		      clc		;clear carry before addition
    151  f109		       65 8c		      adc	JetAnimOffset	;jump to the sprite frame in memory
    152  f10b
    153  f10b		       a8		      tay		;Load Y so pointer can be worked with
    154  f10c		       b1 84		      lda	(JetSpritePtr),Y	;Load P0 Bitmap data
    155  f10e		       85 02		      sta	WSYNC	;wait for next scanline
    156  f110		       85 1b		      sta	GRP0	;set graphics for P0
    157  f112		       b1 86		      lda	(JetColourPtr),Y	;load P0 Colour data
    158  f114		       85 06		      sta	COLUP0	;set colour of P0
    159  f116
    160  f116				   InsideBomberSprite
    161  f116		       8a		      txa		;transfer x to acc
    162  f117		       38		      sec		;set carry flag for subtraction
    163  f118		       e5 83		      sbc	BomberYPos	;subtract sprite Y coord
    164  f11a		       c5 09		      cmp	BOMBER_HEIGHT	;compare with jet height
    165  f11c		       90 02		      bcc	DrawSpriteP1	;if result < SpriteHeight call draw routine
    166  f11e		       a9 00		      lda	#0	;else, load 0
    167  f120
    168  f120				   DrawSpriteP1
    169  f120		       a8		      tay		;Load Y so pointer can be worked with
    170  f121		       b1 88		      lda	(BomberSpritePtr),Y	;Load P0 Bitmap data
    171  f123		       85 02		      sta	WSYNC	;wait for next scanline
    172  f125		       85 1c		      sta	GRP1	;set graphics for P0
    173  f127		       b1 8a		      lda	(BomberColourPtr),Y	;load P0 Colour data
    174  f129		       85 07		      sta	COLUP1	;set colour of P0
    175  f12b
    176  f12b		       ca		      dex		;X--
    177  f12c		       d0 d0		      bne	LineLoop	;repeat next visible scanline until finished
    178  f12e
    179  f12e		       a9 00		      lda	#0
    180  f130		       85 8c		      sta	JetAnimOffset	;reset jet animation
    181  f132
    182  f132
    183  f132		       a9 02		      lda	#2
    184  f134		       85 01		      sta	VBLANK	;turn on VBLANK
    185  f136
    186  f136					      REPEAT	30
    187  f136		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f136					      REPEND
    187  f138		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f138					      REPEND
    187  f13a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f13a					      REPEND
    187  f13c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f13c					      REPEND
    187  f13e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f13e					      REPEND
    187  f140		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f140					      REPEND
    187  f142		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f142					      REPEND
    187  f144		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f144					      REPEND
    187  f146		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f146					      REPEND
    187  f148		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f148					      REPEND
    187  f14a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f14a					      REPEND
    187  f14c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f14c					      REPEND
    187  f14e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f14e					      REPEND
    187  f150		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f150					      REPEND
    187  f152		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f152					      REPEND
    187  f154		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f154					      REPEND
    187  f156		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f156					      REPEND
    187  f158		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f158					      REPEND
    187  f15a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f15a					      REPEND
    187  f15c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f15c					      REPEND
    187  f15e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f15e					      REPEND
    187  f160		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f160					      REPEND
    187  f162		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f162					      REPEND
    187  f164		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f164					      REPEND
    187  f166		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f166					      REPEND
    187  f168		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f168					      REPEND
    187  f16a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f16a					      REPEND
    187  f16c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f16c					      REPEND
    187  f16e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    186  f16e					      REPEND
    187  f170		       85 02		      sta	WSYNC	;display 30 lines of overscan
    188  f172					      REPEND
    189  f172
    190  f172		       a9 00		      lda	#0
    191  f174		       85 01		      sta	VBLANK	;turn off VBLANK
    192  f176
    193  f176							;process joystick input for P0
    194  f176				   CheckP0Up
    195  f176		       a9 10		      lda	#%00010000	;player 0 joystick up
    196  f178		       2c 80 02 	      bit	SWCHA
    197  f17b		       d0 06		      bne	CheckP0Down	;if up isnt being pressed skip to down
    198  f17d		       e6 81		      inc	JetYPos
    199  f17f		       a9 00		      lda	#0
    200  f181		       85 8c		      sta	JetAnimOffset	;reset animation
    201  f183
    202  f183				   CheckP0Down
    203  f183		       a9 20		      lda	#%00100000	;Player 0 joystick down
    204  f185		       2c 80 02 	      bit	SWCHA
    205  f188		       d0 06		      bne	CheckP0Left	;skip to left if not pressed
    206  f18a		       c6 81		      dec	JetYPos
    207  f18c		       a9 00		      lda	#0
    208  f18e		       85 8c		      sta	JetAnimOffset	;reset animation
    209  f190
    210  f190				   CheckP0Left
    211  f190		       a9 40		      lda	#%01000000	;Player 0 joystick left
    212  f192		       2c 80 02 	      bit	SWCHA
    213  f195		       d0 06		      bne	CheckP0Right	;skip to right if not pressed
    214  f197		       c6 80		      dec	JetXPos
    215  f199		       a5 09		      lda	JET_HEIGHT	;9
    216  f19b		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    217  f19d
    218  f19d				   CheckP0Right
    219  f19d		       a9 80		      lda	#%10000000	;player 0 joystick right
    220  f19f		       2c 80 02 	      bit	SWCHA
    221  f1a2		       d0 06		      bne	NoInput	;fallback to no input
    222  f1a4		       e6 80		      inc	JetXPos
    223  f1a6		       a5 09		      lda	JET_HEIGHT	;9
    224  f1a8		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    225  f1aa
    226  f1aa				   NoInput
    227  f1aa
    228  f1aa							;calculations to update position for next frame
    229  f1aa				   UpdateBomberPosition
    230  f1aa		       a5 83		      lda	BomberYPos	;load Bomber Y position to acc
    231  f1ac		       18		      clc		;clear the carry flag
    232  f1ad		       c9 00		      cmp	#0	;compare Y position to 0
    233  f1af		       30 05		      bmi	ResetBomberPosition	;branch to ResetBomberPosition if the number is a negative
    234  f1b1		       c6 83		      dec	BomberYPos	;decrement the bomber y position
    235  f1b3		       4c b9 f1 	      jmp	EndPositionUpdate	;jump to fallback
    236  f1b6
    237  f1b6				   ResetBomberPosition		;resets Bomber Y position back to the top of the screen
    238  f1b6		       20 ef f1 	      jsr	GetRandomBomberPosition	;call subroutine for random bomber x position
    239  f1b9
    240  f1b9				   EndPositionUpdate		;fallback for position update code
    241  f1b9
    242  f1b9							;check for object collision
    243  f1b9				   CheckCollisionP0P1
    244  f1b9		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects P0 and P1 collision
    245  f1bb		       24 07		      bit	CXPPMM	;check CXPPMM with the above pattern
    246  f1bd		       d0 0c		      bne	CollisionP0P1	;collision between P0 and P1
    247  f1bf		       4c c2 f1 	      jmp	CheckCollisionP0PF
    248  f1c2
    249  f1c2				   CheckCollisionP0PF
    250  f1c2		       a9 80		      lda	#%10000000	;CXP0FB bit 7 detects P0 and PF collision
    251  f1c4		       24 02		      bit	CXP0FB	;checks CXP0FB with the abover pattern
    252  f1c6		       d0 06		      bne	CollisionP0PF
    253  f1c8		       4c d1 f1 	      jmp	EndCollisionCheck
    254  f1cb
    255  f1cb				   CollisionP0P1
    256  f1cb		       20 ea f1 	      jsr	GameOver	;game over
    257  f1ce
    258  f1ce				   CollisionP0PF
    259  f1ce		       20 ea f1 	      jsr	GameOver
    260  f1d1
    261  f1d1				   EndCollisionCheck		;collision check fallback
    262  f1d1		       85 2c		      sta	CXCLR
    263  f1d3
    264  f1d3							;loop new frame
    265  f1d3		       4c 3e f0 	      jmp	StartFrame
    266  f1d6
    267  f1d6							;subroutine to handle sprite X offset
    268  f1d6							;A is the target offset position,
    269  f1d6							;Y is the object type (0: Player0 1: Player1 2: missile0 3: missile1 4: ball)
    270  f1d6				   SetObjectXPos subroutine
    271  f1d6		       85 02		      sta	WSYNC	;wait for fresh scanline
    272  f1d8		       38		      sec		;carry flag for subtraction
    273  f1d9				   DivideLoop
    274  f1d9		       e9 0f		      sbc	#15	;subtract 15 from acc
    275  f1db		       b0 fc		      bcs	DivideLoop	;loop until carry flag is clear
    276  f1dd		       49 07		      eor	#7	;adjust remainder to -8 to 7
    277  f1df		       0a		      asl
    278  f1e0		       0a		      asl
    279  f1e1		       0a		      asl
    280  f1e2		       0a		      asl		;four left shifts as HMP0 only targets the top 4 bits
    281  f1e3		       99 20 00 	      sta	HMP0,Y	;store the fine offset
    282  f1e6		       99 10 00 	      sta	RESP0,Y	;fix object in 15 step intervals
    283  f1e9		       60		      rts
    284  f1ea
    285  f1ea							;Game over Subroutine
    286  f1ea				   GameOver   subroutine
    287  f1ea		       a9 30		      lda	#$30
    288  f1ec		       85 09		      sta	COLUBK
    289  f1ee		       60		      rts
    290  f1ef
    291  f1ef							;subroutine to generate Linear Feedback Shift Register random number
    292  f1ef							;generate a random number
    293  f1ef							;divide the random by 4 to match river width
    294  f1ef							;add 30 to compensate for left playfield
    295  f1ef				   GetRandomBomberPosition subroutine
    296  f1ef		       a5 8d		      lda	Random
    297  f1f1		       0a		      asl
    298  f1f2		       45 8d		      eor	Random
    299  f1f4		       0a		      asl
    300  f1f5		       45 8d		      eor	Random
    301  f1f7		       0a		      asl
    302  f1f8		       0a		      asl
    303  f1f9		       45 8d		      eor	Random
    304  f1fb		       0a		      asl
    305  f1fc		       26 8d		      rol	Random	; performs a series of shifts and bit operations
    306  f1fe
    307  f1fe		       4a		      lsr
    308  f1ff		       4a		      lsr		; divide the value by 4 with 2 right shifts
    309  f200		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    310  f202		       a9 1e		      lda	#30
    311  f204		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    312  f206		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    313  f208
    314  f208		       a9 60		      lda	#96
    315  f20a		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    316  f20c
    317  f20c		       60		      rts
    318  f20d
    319  f20d							;ROM lookup tables
    320  f20d				   JetSprite
    321  f20d		       00		      .byte.b	#%00000000
    322  f20e		       54		      .byte.b	#%01010100	;$1E
    323  f20f		       54		      .byte.b	#%01010100	;$40
    324  f210		       7c		      .byte.b	#%01111100	;$40
    325  f211		       38		      .byte.b	#%00111000	;$40
    326  f212		       38		      .byte.b	#%00111000	;$40
    327  f213		       38		      .byte.b	#%00111000	;$40
    328  f214		       10		      .byte.b	#%00010000	;$40
    329  f215		       10		      .byte.b	#%00010000	;$40
    330  f216
    331  f216
    332  f216				   JetSpriteTurn
    333  f216		       00		      .byte.b	#%00000000	;$1E
    334  f217		       28		      .byte.b	#%00101000	;$1E
    335  f218		       38		      .byte.b	#%00111000	;$40
    336  f219		       38		      .byte.b	#%00111000	;$40
    337  f21a		       10		      .byte.b	#%00010000	;$40
    338  f21b		       10		      .byte.b	#%00010000	;$40
    339  f21c		       10		      .byte.b	#%00010000	;$40
    340  f21d		       10		      .byte.b	#%00010000	;$40
    341  f21e
    342  f21e				   BomberSprite
    343  f21e		       00		      .byte.b	#%00000000
    344  f21f		       00		      .byte.b	#%00000000
    345  f220		       08		      .byte.b	#%00001000
    346  f221		       14		      .byte.b	#%00010100
    347  f222		       2a		      .byte.b	#%00101010
    348  f223		       2a		      .byte.b	#%00101010
    349  f224		       7f		      .byte.b	#%01111111
    350  f225		       49		      .byte.b	#%01001001
    351  f226		       49		      .byte.b	#%01001001
    352  f227
    353  f227				   JetColour
    354  f227		       00		      .byte.b	#$00
    355  f228		       1e		      .byte.b	#$1E
    356  f229		       40		      .byte.b	#$40
    357  f22a		       40		      .byte.b	#$40
    358  f22b		       40		      .byte.b	#$40
    359  f22c		       40		      .byte.b	#$40
    360  f22d		       40		      .byte.b	#$40
    361  f22e		       40		      .byte.b	#$40
    362  f22f		       40		      .byte.b	#$40
    363  f230
    364  f230				   JetTurnColour
    365  f230		       1e		      .byte.b	#$1E	;
    366  f231		       1e		      .byte.b	#$1E	;
    367  f232		       40		      .byte.b	#$40	;
    368  f233		       40		      .byte.b	#$40	;
    369  f234		       40		      .byte.b	#$40	;
    370  f235		       40		      .byte.b	#$40	;
    371  f236		       40		      .byte.b	#$40	;
    372  f237		       40		      .byte.b	#$40	;
    373  f238		       40		      .byte.b	#$40	;
    374  f239
    375  f239				   BomberColour
    376  f239		       00		      .byte.b	#$00
    377  f23a		       00		      .byte.b	#$00
    378  f23b		       ff		      .byte.b	#$FF
    379  f23c		       ff		      .byte.b	#$FF
    380  f23d		       40		      .byte.b	#$40
    381  f23e		       40		      .byte.b	#$40
    382  f23f		       40		      .byte.b	#$40
    383  f240		       40		      .byte.b	#$40
    384  f241		       0f		      .byte.b	#$0F
    385  f242
    386  f242							;end of ROM
    387  fffc					      org	$FFFC
    388  fffc		       00 f0		      .word.w	reset
    389  fffe		       00 f0		      .word.w	reset
