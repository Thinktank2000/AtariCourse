------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;include required files
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						;segment for uninitialized variables starting at $80
      8 U0097 ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		;player 0 X position
     12 U0081		       00	   JetYPos    byte.b		;player 0 Y position
     13 U0082		       00	   BomberXPos byte.b		;player 1 X position
     14 U0083		       00	   BomberYPos byte.b		;player 1 Y position
     15 U0084		       00 00	   JetSpritePtr word.w		;Player 0 sprite pointer
     16 U0086		       00 00	   JetColourPtr word.w		;player 0 colour pointer
     17 U0088		       00 00	   BomberSpritePtr word.w		;Player 1 sprite pointer
     18 U008a		       00 00	   BomberColourPtr word.w		;player 1 colour pointer
     19 U008c		       00	   JetAnimOffset byte.b		;player 0 frame offset
     20 U008d		       00	   Random     byte.b		;set random number
     21 U008e		       00	   ScoreSprite byte.b		;store the bit pattern for the score sprite
     22 U008f		       00	   TimerSprite byte.b		;score the bit pattern for the timer sprite
     23 U0090		       00	   Score      byte.b		;2 digit score variable stored as BCD
     24 U0091		       00	   Timer      byte.b		;2 digit timer variable stored as BCD
     25 U0092		       00	   Temp       byte.b		;Temporary variable
     26 U0093		       00 00	   OnesDigitOffset word.w		;offset for score ones digit
     27 U0095		       00 00	   TensDigitOffset word.w		;offset for score tens digit
     28 U0097
     29 U0097							;define constants
     30 U0097		       00 09	   JET_HEIGHT =	9	;Player 0 sprite height
     31 U0097		       00 09	   BOMBER_HEIGHT =	9	;Player 1 sprite height
     32 U0097		       00 05	   DIGIT_HEIGHT =	5	;Scoreboard height
     33 U0097
     34 U0097
     35 U0097							;start of ROM at $F000
     36  10000 ????				       seg	code
     37  f000					      org	$F000
     38  f000
     39  f000				   reset
      0  f000					      CLEAN_START		;call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     41  f00a
     42  f00a							;initialize variables
     43  f00a		       a9 41		      lda	#65
     44  f00c		       85 80		      sta	JetXPos	;JetXPos = 65
     45  f00e		       a9 05		      lda	#5
     46  f010		       85 81		      sta	JetYPos	;JetYPos = 5
     47  f012		       a9 53		      lda	#83
     48  f014		       85 83		      sta	BomberYPos	;BomberYPos = 83
     49  f016		       a9 41		      lda	#65
     50  f018		       85 82		      sta	BomberXPos	;BomberXPos = 65
     51  f01a		       a9 d4		      lda	#%11010100
     52  f01c		       85 8d		      sta	Random	;Random = $D4
     53  f01e		       a9 00		      lda	#0
     54  f020		       85 90		      sta	Score
     55  f022		       85 91		      sta	Timer	;score and timer = 0
     56  f024
     57  f024							;initialize pointers
     58  f024		       a9 45		      lda	#<JetSprite
     59  f026		       85 84		      sta	JetSpritePtr	;low byte pointer to jet sprite lookup table
     60  f028		       a9 f2		      lda	#>JetSprite
     61  f02a		       85 85		      sta	JetSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     62  f02c
     63  f02c		       a9 5f		      lda	#<JetColour
     64  f02e		       85 86		      sta	JetColourPtr	;low byte pointer to jet colour lookup table
     65  f030		       a9 f2		      lda	#>JetColour
     66  f032		       85 87		      sta	JetColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     67  f034
     68  f034		       a9 56		      lda	#<BomberSprite
     69  f036		       85 88		      sta	BomberSpritePtr	;low byte pointer to jet sprite lookup table
     70  f038		       a9 f2		      lda	#>BomberSprite
     71  f03a		       85 89		      sta	BomberSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     72  f03c
     73  f03c		       a9 71		      lda	#<BomberColour
     74  f03e		       85 8a		      sta	BomberColourPtr	;low byte pointer to jet colour lookup table
     75  f040		       a9 f2		      lda	#>BomberColour
     76  f042		       85 8b		      sta	BomberColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     77  f044
     78  f044
     79  f044
     80  f044							;start main display loop
     81  f044				   StartFrame
     82  f044							;calculations and tasks pre VBLANK
     83  f044		       a5 80		      lda	JetXPos
     84  f046		       a0 00		      ldy	#0
     85  f048		       20 ee f1 	      jsr	SetObjectXPos	;set player 0 horizontal position
     86  f04b
     87  f04b		       a5 82		      lda	BomberXPos
     88  f04d		       a0 01		      ldy	#1
     89  f04f		       20 ee f1 	      jsr	SetObjectXPos	;set player 1 horizontal position
     90  f052
     91  f052		       20 25 f2 	      jsr	CalculateDigitOffset	;calculate the scoreboard offset
     92  f055
     93  f055		       85 02		      sta	WSYNC
     94  f057		       85 2a		      sta	HMOVE	;apply the horizontal offsets previously set
     95  f059
     96  f059
     97  f059							;display VSYNC and VBLANK
     98  f059		       a9 02		      lda	#2
     99  f05b		       85 00		      sta	VSYNC
    100  f05d		       85 01		      sta	VBLANK
    101  f05f
    102  f05f							;generate 3 lines of VSYNC
    103  f05f					      REPEAT	3
    104  f05f		       85 02		      sta	WSYNC
    103  f05f					      REPEND
    104  f061		       85 02		      sta	WSYNC
    103  f061					      REPEND
    104  f063		       85 02		      sta	WSYNC
    105  f065					      REPEND
    106  f065
    107  f065							;turn off VSYNC
    108  f065		       a9 00		      lda	#0
    109  f067		       85 00		      sta	VSYNC
    110  f069
    111  f069							;generate 37 lines of VBLANK
    112  f069					      REPEAT	37
    113  f069		       85 02		      sta	WSYNC
    112  f069					      REPEND
    113  f06b		       85 02		      sta	WSYNC
    112  f06b					      REPEND
    113  f06d		       85 02		      sta	WSYNC
    112  f06d					      REPEND
    113  f06f		       85 02		      sta	WSYNC
    112  f06f					      REPEND
    113  f071		       85 02		      sta	WSYNC
    112  f071					      REPEND
    113  f073		       85 02		      sta	WSYNC
    112  f073					      REPEND
    113  f075		       85 02		      sta	WSYNC
    112  f075					      REPEND
    113  f077		       85 02		      sta	WSYNC
    112  f077					      REPEND
    113  f079		       85 02		      sta	WSYNC
    112  f079					      REPEND
    113  f07b		       85 02		      sta	WSYNC
    112  f07b					      REPEND
    113  f07d		       85 02		      sta	WSYNC
    112  f07d					      REPEND
    113  f07f		       85 02		      sta	WSYNC
    112  f07f					      REPEND
    113  f081		       85 02		      sta	WSYNC
    112  f081					      REPEND
    113  f083		       85 02		      sta	WSYNC
    112  f083					      REPEND
    113  f085		       85 02		      sta	WSYNC
    112  f085					      REPEND
    113  f087		       85 02		      sta	WSYNC
    112  f087					      REPEND
    113  f089		       85 02		      sta	WSYNC
    112  f089					      REPEND
    113  f08b		       85 02		      sta	WSYNC
    112  f08b					      REPEND
    113  f08d		       85 02		      sta	WSYNC
    112  f08d					      REPEND
    113  f08f		       85 02		      sta	WSYNC
    112  f08f					      REPEND
    113  f091		       85 02		      sta	WSYNC
    112  f091					      REPEND
    113  f093		       85 02		      sta	WSYNC
    112  f093					      REPEND
    113  f095		       85 02		      sta	WSYNC
    112  f095					      REPEND
    113  f097		       85 02		      sta	WSYNC
    112  f097					      REPEND
    113  f099		       85 02		      sta	WSYNC
    112  f099					      REPEND
    113  f09b		       85 02		      sta	WSYNC
    112  f09b					      REPEND
    113  f09d		       85 02		      sta	WSYNC
    112  f09d					      REPEND
    113  f09f		       85 02		      sta	WSYNC
    112  f09f					      REPEND
    113  f0a1		       85 02		      sta	WSYNC
    112  f0a1					      REPEND
    113  f0a3		       85 02		      sta	WSYNC
    112  f0a3					      REPEND
    113  f0a5		       85 02		      sta	WSYNC
    112  f0a5					      REPEND
    113  f0a7		       85 02		      sta	WSYNC
    112  f0a7					      REPEND
    113  f0a9		       85 02		      sta	WSYNC
    112  f0a9					      REPEND
    113  f0ab		       85 02		      sta	WSYNC
    112  f0ab					      REPEND
    113  f0ad		       85 02		      sta	WSYNC
    112  f0ad					      REPEND
    113  f0af		       85 02		      sta	WSYNC
    112  f0af					      REPEND
    113  f0b1		       85 02		      sta	WSYNC
    114  f0b3					      REPEND
    115  f0b3
    116  f0b3							;turn off VBLANK
    117  f0b3		       a9 00		      lda	#0
    118  f0b5		       85 01		      sta	VBLANK
    119  f0b7
    120  f0b7							;display scoreboard lines
    121  f0b7		       a9 00		      lda	#0	;clear TIA registers
    122  f0b9		       85 0d		      sta	PF0
    123  f0bb		       85 0e		      sta	PF1
    124  f0bd		       85 0f		      sta	PF2
    125  f0bf		       85 1b		      sta	GRP0
    126  f0c1		       85 1c		      sta	GRP1
    127  f0c3		       a9 1c		      lda	#$1C	;set scoreboard colour to white
    128  f0c5		       85 08		      sta	COLUPF
    129  f0c7		       a9 00		      lda	#%00000000
    130  f0c9		       85 0a		      sta	CTRLPF	;disable playfield reflection
    131  f0cb		       a2 05		      ldx	#DIGIT_HEIGHT	;store 5 in X
    132  f0cd
    133  f0cd				   ScoreDigitLoop
    134  f0cd		       a4 95		      ldy	TensDigitOffset	;get the tens digit offset for the score
    135  f0cf		       b9 7a f2 	      lda	Digits,Y	;load sprite
    136  f0d2		       29 f0		      and	#$F0	;mask the graphics for ones digit
    137  f0d4		       85 8e		      sta	ScoreSprite	;score the tens digit pattern
    138  f0d6
    139  f0d6		       a4 93		      ldy	OnesDigitOffset
    140  f0d8		       b9 7a f2 	      lda	Digits,Y
    141  f0db		       29 0f		      and	#$0F
    142  f0dd		       05 8e		      ora	ScoreSprite	;merge ones and tens into one sprite
    143  f0df		       85 8e		      sta	ScoreSprite
    144  f0e1		       85 02		      sta	WSYNC	;wait for new scanline
    145  f0e3		       85 0e		      sta	PF1	;update the playfield
    146  f0e5
    147  f0e5		       a4 96		      ldy	TensDigitOffset+1
    148  f0e7		       b9 7a f2 	      lda	Digits,Y
    149  f0ea		       29 f0		      and	#$F0
    150  f0ec		       85 8f		      sta	TimerSprite
    151  f0ee
    152  f0ee		       a4 94		      ldy	OnesDigitOffset+1
    153  f0f0		       b9 7a f2 	      lda	Digits,Y
    154  f0f3		       29 0f		      and	#$0F
    155  f0f5		       05 8f		      ora	TimerSprite
    156  f0f7		       85 8f		      sta	TimerSprite
    157  f0f9
    158  f0f9		       ca		      dex		;X--
    159  f0fa		       d0 d1		      bne	ScoreDigitLoop	;branch back to ScoreDigitLoop if dex != 0
    160  f0fc
    161  f0fc
    162  f0fc							;display 96 visible scanlines (2 line kernel)
    163  f0fc				   VisibleLine
    164  f0fc		       a9 84		      lda	#$84
    165  f0fe		       85 09		      sta	COLUBK	;set background to pale blue
    166  f100
    167  f100		       a9 c2		      lda	#$C2
    168  f102		       85 08		      sta	COLUPF	;set playfield to green
    169  f104
    170  f104		       a5 01		      lda	%00000001
    171  f106		       85 0a		      sta	CTRLPF	;enable playfield reflection
    172  f108
    173  f108		       a9 f0		      lda	#$F0
    174  f10a		       85 0d		      sta	PF0
    175  f10c							; setting PF0 bit pattern
    176  f10c		       a9 fc		      lda	#$FC
    177  f10e		       85 0e		      sta	PF1
    178  f110							; setting PF1 bit pattern
    179  f110		       a9 00		      lda	#0
    180  f112		       85 0f		      sta	PF2	; setting PF2 bit pattern
    181  f114
    182  f114		       a2 54		      ldx	#84	;X counts the remaining number of scanlines
    183  f116				   LineLoop
    184  f116				   InsideJetSprite
    185  f116		       8a		      txa		;transfer x to acc
    186  f117		       38		      sec		;set carry flag for subtraction
    187  f118		       e5 81		      sbc	JetYPos	;subtract sprite Y coord
    188  f11a		       c5 09		      cmp	JET_HEIGHT	;compare with jet height
    189  f11c		       90 02		      bcc	DrawSpriteP0	;if result < SpriteHeight call draw routine
    190  f11e		       a9 00		      lda	#0	;else, load 0
    191  f120
    192  f120				   DrawSpriteP0
    193  f120		       18		      clc		;clear carry before addition
    194  f121		       65 8c		      adc	JetAnimOffset	;jump to the sprite frame in memory
    195  f123
    196  f123		       a8		      tay		;Load Y so pointer can be worked with
    197  f124		       b1 84		      lda	(JetSpritePtr),Y	;Load P0 Bitmap data
    198  f126		       85 02		      sta	WSYNC	;wait for next scanline
    199  f128		       85 1b		      sta	GRP0	;set graphics for P0
    200  f12a		       b1 86		      lda	(JetColourPtr),Y	;load P0 Colour data
    201  f12c		       85 06		      sta	COLUP0	;set colour of P0
    202  f12e
    203  f12e				   InsideBomberSprite
    204  f12e		       8a		      txa		;transfer x to acc
    205  f12f		       38		      sec		;set carry flag for subtraction
    206  f130		       e5 83		      sbc	BomberYPos	;subtract sprite Y coord
    207  f132		       c5 09		      cmp	BOMBER_HEIGHT	;compare with jet height
    208  f134		       90 02		      bcc	DrawSpriteP1	;if result < SpriteHeight call draw routine
    209  f136		       a9 00		      lda	#0	;else, load 0
    210  f138
    211  f138				   DrawSpriteP1
    212  f138		       a8		      tay		;Load Y so pointer can be worked with
    213  f139		       b1 88		      lda	(BomberSpritePtr),Y	;Load P0 Bitmap data
    214  f13b		       85 02		      sta	WSYNC	;wait for next scanline
    215  f13d		       85 1c		      sta	GRP1	;set graphics for P0
    216  f13f		       b1 8a		      lda	(BomberColourPtr),Y	;load P0 Colour data
    217  f141		       85 07		      sta	COLUP1	;set colour of P0
    218  f143
    219  f143		       ca		      dex		;X--
    220  f144		       d0 d0		      bne	LineLoop	;repeat next visible scanline until finished
    221  f146
    222  f146		       a9 00		      lda	#0
    223  f148		       85 8c		      sta	JetAnimOffset	;reset jet animation
    224  f14a
    225  f14a
    226  f14a		       a9 02		      lda	#2
    227  f14c		       85 01		      sta	VBLANK	;turn on VBLANK
    228  f14e
    229  f14e					      REPEAT	30
    230  f14e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f14e					      REPEND
    230  f150		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f150					      REPEND
    230  f152		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f152					      REPEND
    230  f154		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f154					      REPEND
    230  f156		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f156					      REPEND
    230  f158		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f158					      REPEND
    230  f15a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f15a					      REPEND
    230  f15c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f15c					      REPEND
    230  f15e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f15e					      REPEND
    230  f160		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f160					      REPEND
    230  f162		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f162					      REPEND
    230  f164		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f164					      REPEND
    230  f166		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f166					      REPEND
    230  f168		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f168					      REPEND
    230  f16a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f16a					      REPEND
    230  f16c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f16c					      REPEND
    230  f16e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f16e					      REPEND
    230  f170		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f170					      REPEND
    230  f172		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f172					      REPEND
    230  f174		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f174					      REPEND
    230  f176		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f176					      REPEND
    230  f178		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f178					      REPEND
    230  f17a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f17a					      REPEND
    230  f17c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f17c					      REPEND
    230  f17e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f17e					      REPEND
    230  f180		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f180					      REPEND
    230  f182		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f182					      REPEND
    230  f184		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f184					      REPEND
    230  f186		       85 02		      sta	WSYNC	;display 30 lines of overscan
    229  f186					      REPEND
    230  f188		       85 02		      sta	WSYNC	;display 30 lines of overscan
    231  f18a					      REPEND
    232  f18a
    233  f18a		       a9 00		      lda	#0
    234  f18c		       85 01		      sta	VBLANK	;turn off VBLANK
    235  f18e
    236  f18e							;process joystick input for P0
    237  f18e				   CheckP0Up
    238  f18e		       a9 10		      lda	#%00010000	;player 0 joystick up
    239  f190		       2c 80 02 	      bit	SWCHA
    240  f193		       d0 06		      bne	CheckP0Down	;if up isnt being pressed skip to down
    241  f195		       e6 81		      inc	JetYPos
    242  f197		       a9 00		      lda	#0
    243  f199		       85 8c		      sta	JetAnimOffset	;reset animation
    244  f19b
    245  f19b				   CheckP0Down
    246  f19b		       a9 20		      lda	#%00100000	;Player 0 joystick down
    247  f19d		       2c 80 02 	      bit	SWCHA
    248  f1a0		       d0 06		      bne	CheckP0Left	;skip to left if not pressed
    249  f1a2		       c6 81		      dec	JetYPos
    250  f1a4		       a9 00		      lda	#0
    251  f1a6		       85 8c		      sta	JetAnimOffset	;reset animation
    252  f1a8
    253  f1a8				   CheckP0Left
    254  f1a8		       a9 40		      lda	#%01000000	;Player 0 joystick left
    255  f1aa		       2c 80 02 	      bit	SWCHA
    256  f1ad		       d0 06		      bne	CheckP0Right	;skip to right if not pressed
    257  f1af		       c6 80		      dec	JetXPos
    258  f1b1		       a5 09		      lda	JET_HEIGHT	;9
    259  f1b3		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    260  f1b5
    261  f1b5				   CheckP0Right
    262  f1b5		       a9 80		      lda	#%10000000	;player 0 joystick right
    263  f1b7		       2c 80 02 	      bit	SWCHA
    264  f1ba		       d0 06		      bne	NoInput	;fallback to no input
    265  f1bc		       e6 80		      inc	JetXPos
    266  f1be		       a5 09		      lda	JET_HEIGHT	;9
    267  f1c0		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    268  f1c2
    269  f1c2				   NoInput
    270  f1c2
    271  f1c2							;calculations to update position for next frame
    272  f1c2				   UpdateBomberPosition
    273  f1c2		       a5 83		      lda	BomberYPos	;load Bomber Y position to acc
    274  f1c4		       18		      clc		;clear the carry flag
    275  f1c5		       c9 00		      cmp	#0	;compare Y position to 0
    276  f1c7		       30 05		      bmi	ResetBomberPosition	;branch to ResetBomberPosition if the number is a negative
    277  f1c9		       c6 83		      dec	BomberYPos	;decrement the bomber y position
    278  f1cb		       4c d1 f1 	      jmp	EndPositionUpdate	;jump to fallback
    279  f1ce
    280  f1ce				   ResetBomberPosition		;resets Bomber Y position back to the top of the screen
    281  f1ce		       20 07 f2 	      jsr	GetRandomBomberPosition	;call subroutine for random bomber x position
    282  f1d1
    283  f1d1				   EndPositionUpdate		;fallback for position update code
    284  f1d1
    285  f1d1							;check for object collision
    286  f1d1				   CheckCollisionP0P1
    287  f1d1		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects P0 and P1 collision
    288  f1d3		       24 07		      bit	CXPPMM	;check CXPPMM with the above pattern
    289  f1d5		       d0 0c		      bne	CollisionP0P1	;collision between P0 and P1
    290  f1d7		       4c da f1 	      jmp	CheckCollisionP0PF
    291  f1da
    292  f1da				   CheckCollisionP0PF
    293  f1da		       a9 80		      lda	#%10000000	;CXP0FB bit 7 detects P0 and PF collision
    294  f1dc		       24 02		      bit	CXP0FB	;checks CXP0FB with the abover pattern
    295  f1de		       d0 06		      bne	CollisionP0PF
    296  f1e0		       4c e9 f1 	      jmp	EndCollisionCheck
    297  f1e3
    298  f1e3				   CollisionP0P1
    299  f1e3		       20 02 f2 	      jsr	GameOver	;game over
    300  f1e6
    301  f1e6				   CollisionP0PF
    302  f1e6		       20 02 f2 	      jsr	GameOver
    303  f1e9
    304  f1e9				   EndCollisionCheck		;collision check fallback
    305  f1e9		       85 2c		      sta	CXCLR
    306  f1eb
    307  f1eb							;loop new frame
    308  f1eb		       4c 44 f0 	      jmp	StartFrame
    309  f1ee
    310  f1ee							;subroutine to handle sprite X offset
    311  f1ee							;A is the target offset position,
    312  f1ee							;Y is the object type (0: Player0 1: Player1 2: missile0 3: missile1 4: ball)
    313  f1ee				   SetObjectXPos subroutine
    314  f1ee		       85 02		      sta	WSYNC	;wait for fresh scanline
    315  f1f0		       38		      sec		;carry flag for subtraction
    316  f1f1				   DivideLoop
    317  f1f1		       e9 0f		      sbc	#15	;subtract 15 from acc
    318  f1f3		       b0 fc		      bcs	DivideLoop	;loop until carry flag is clear
    319  f1f5		       49 07		      eor	#7	;adjust remainder to -8 to 7
    320  f1f7		       0a		      asl
    321  f1f8		       0a		      asl
    322  f1f9		       0a		      asl
    323  f1fa		       0a		      asl		;four left shifts as HMP0 only targets the top 4 bits
    324  f1fb		       99 20 00 	      sta	HMP0,Y	;store the fine offset
    325  f1fe		       99 10 00 	      sta	RESP0,Y	;fix object in 15 step intervals
    326  f201		       60		      rts
    327  f202
    328  f202							;Game over Subroutine
    329  f202				   GameOver   subroutine
    330  f202		       a9 30		      lda	#$30
    331  f204		       85 09		      sta	COLUBK
    332  f206		       60		      rts
    333  f207
    334  f207							;subroutine to generate Linear Feedback Shift Register random number
    335  f207							;generate a random number
    336  f207							;divide the random by 4 to match river width
    337  f207							;add 30 to compensate for left playfield
    338  f207				   GetRandomBomberPosition subroutine
    339  f207		       a5 8d		      lda	Random
    340  f209		       0a		      asl
    341  f20a		       45 8d		      eor	Random
    342  f20c		       0a		      asl
    343  f20d		       45 8d		      eor	Random
    344  f20f		       0a		      asl
    345  f210		       0a		      asl
    346  f211		       45 8d		      eor	Random
    347  f213		       0a		      asl
    348  f214		       26 8d		      rol	Random	; performs a series of shifts and bit operations
    349  f216
    350  f216		       4a		      lsr
    351  f217		       4a		      lsr		; divide the value by 4 with 2 right shifts
    352  f218		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    353  f21a		       a9 1e		      lda	#30
    354  f21c		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    355  f21e		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    356  f220
    357  f220		       a9 60		      lda	#96
    358  f222		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    359  f224
    360  f224		       60		      rts
    361  f225
    362  f225							;Subroutine to handle scoreboard digits
    363  f225							;convert the top and bottom nybbles into the score and timer offset
    364  f225							;each digit is 5 bytes tall
    365  f225							;for low nybble multiplication of 5 is required
    366  f225							;left shift to multiply by two
    367  f225							;right shift to divide
    368  f225
    369  f225				   CalculateDigitOffset subroutine
    370  f225		       a2 01		      ldx	#1	;loop counter
    371  f227				   PrepareScoreLoop		;loop twice, first 1 then 0
    372  f227		       b5 90		      lda	Score,X	;Score + 1 = timer
    373  f229		       29 0f		      and	#$0F	;remove the tens digit by masking 4 bits
    374  f22b		       85 92		      sta	Temp	;Save the value in a temporary variable
    375  f22d		       0a		      asl		;shift left twice and add N for multiplication by 5
    376  f22e		       0a		      asl
    377  f22f		       65 92		      adc	Temp
    378  f231		       95 93		      sta	OnesDigitOffset,X
    379  f233
    380  f233		       b5 90		      lda	Score,X
    381  f235		       29 f0		      and	#$F0
    382  f237		       4a		      lsr
    383  f238		       4a		      lsr
    384  f239		       85 92		      sta	Temp
    385  f23b		       4a		      lsr
    386  f23c		       4a		      lsr
    387  f23d		       65 92		      adc	Temp
    388  f23f		       95 95		      sta	TensDigitOffset,X
    389  f241
    390  f241		       ca		      dex
    391  f242		       10 e3		      bpl	PrepareScoreLoop	;to prepare score loop
    392  f244		       60		      rts
    393  f245							;ROM lookup tables
    394  f245				   JetSprite
    395  f245		       00		      .byte.b	#%00000000
    396  f246		       54		      .byte.b	#%01010100	;$1E
    397  f247		       54		      .byte.b	#%01010100	;$40
    398  f248		       7c		      .byte.b	#%01111100	;$40
    399  f249		       38		      .byte.b	#%00111000	;$40
    400  f24a		       38		      .byte.b	#%00111000	;$40
    401  f24b		       38		      .byte.b	#%00111000	;$40
    402  f24c		       10		      .byte.b	#%00010000	;$40
    403  f24d		       10		      .byte.b	#%00010000	;$40
    404  f24e
    405  f24e
    406  f24e				   JetSpriteTurn
    407  f24e		       00		      .byte.b	#%00000000	;$1E
    408  f24f		       28		      .byte.b	#%00101000	;$1E
    409  f250		       38		      .byte.b	#%00111000	;$40
    410  f251		       38		      .byte.b	#%00111000	;$40
    411  f252		       10		      .byte.b	#%00010000	;$40
    412  f253		       10		      .byte.b	#%00010000	;$40
    413  f254		       10		      .byte.b	#%00010000	;$40
    414  f255		       10		      .byte.b	#%00010000	;$40
    415  f256
    416  f256				   BomberSprite
    417  f256		       00		      .byte.b	#%00000000
    418  f257		       00		      .byte.b	#%00000000
    419  f258		       08		      .byte.b	#%00001000
    420  f259		       14		      .byte.b	#%00010100
    421  f25a		       2a		      .byte.b	#%00101010
    422  f25b		       2a		      .byte.b	#%00101010
    423  f25c		       7f		      .byte.b	#%01111111
    424  f25d		       49		      .byte.b	#%01001001
    425  f25e		       49		      .byte.b	#%01001001
    426  f25f
    427  f25f				   JetColour
    428  f25f		       00		      .byte.b	#$00
    429  f260		       1e		      .byte.b	#$1E
    430  f261		       40		      .byte.b	#$40
    431  f262		       40		      .byte.b	#$40
    432  f263		       40		      .byte.b	#$40
    433  f264		       40		      .byte.b	#$40
    434  f265		       40		      .byte.b	#$40
    435  f266		       40		      .byte.b	#$40
    436  f267		       40		      .byte.b	#$40
    437  f268
    438  f268				   JetTurnColour
    439  f268		       1e		      .byte.b	#$1E	;
    440  f269		       1e		      .byte.b	#$1E	;
    441  f26a		       40		      .byte.b	#$40	;
    442  f26b		       40		      .byte.b	#$40	;
    443  f26c		       40		      .byte.b	#$40	;
    444  f26d		       40		      .byte.b	#$40	;
    445  f26e		       40		      .byte.b	#$40	;
    446  f26f		       40		      .byte.b	#$40	;
    447  f270		       40		      .byte.b	#$40	;
    448  f271
    449  f271				   BomberColour
    450  f271		       00		      .byte.b	#$00
    451  f272		       00		      .byte.b	#$00
    452  f273		       ff		      .byte.b	#$FF
    453  f274		       ff		      .byte.b	#$FF
    454  f275		       40		      .byte.b	#$40
    455  f276		       40		      .byte.b	#$40
    456  f277		       40		      .byte.b	#$40
    457  f278		       40		      .byte.b	#$40
    458  f279		       0f		      .byte.b	#$0F
    459  f27a
    460  f27a				   Digits
    461  f27a		       77		      .byte.b	%01110111	; ### ###
    462  f27b		       55		      .byte.b	%01010101	; # # # #
    463  f27c		       55		      .byte.b	%01010101	; # # # #
    464  f27d		       55		      .byte.b	%01010101	; # # # #
    465  f27e		       77		      .byte.b	%01110111	; ### ###
    466  f27f
    467  f27f		       11		      .byte.b	%00010001	;   #	 #
    468  f280		       11		      .byte.b	%00010001	;   #	 #
    469  f281		       11		      .byte.b	%00010001	;   #	 #
    470  f282		       11		      .byte.b	%00010001	;   #	 #
    471  f283		       11		      .byte.b	%00010001	;   #	 #
    472  f284
    473  f284		       77		      .byte.b	%01110111	; ### ###
    474  f285		       11		      .byte.b	%00010001	;   #	 #
    475  f286		       77		      .byte.b	%01110111	; ### ###
    476  f287		       44		      .byte.b	%01000100	; #   #
    477  f288		       77		      .byte.b	%01110111	; ### ###
    478  f289
    479  f289		       77		      .byte.b	%01110111	; ### ###
    480  f28a		       11		      .byte.b	%00010001	;   #	 #
    481  f28b		       33		      .byte.b	%00110011	;  ##	##
    482  f28c		       11		      .byte.b	%00010001	;   #	 #
    483  f28d		       77		      .byte.b	%01110111	; ### ###
    484  f28e
    485  f28e		       55		      .byte.b	%01010101	; # # # #
    486  f28f		       55		      .byte.b	%01010101	; # # # #
    487  f290		       77		      .byte.b	%01110111	; ### ###
    488  f291		       11		      .byte.b	%00010001	;   #	 #
    489  f292		       11		      .byte.b	%00010001	;   #	 #
    490  f293
    491  f293		       77		      .byte.b	%01110111	; ### ###
    492  f294		       44		      .byte.b	%01000100	; #   #
    493  f295		       77		      .byte.b	%01110111	; ### ###
    494  f296		       11		      .byte.b	%00010001	;   #	 #
    495  f297		       77		      .byte.b	%01110111	; ### ###
    496  f298
    497  f298		       77		      .byte.b	%01110111	; ### ###
    498  f299		       44		      .byte.b	%01000100	; #   #
    499  f29a		       77		      .byte.b	%01110111	; ### ###
    500  f29b		       55		      .byte.b	%01010101	; # # # #
    501  f29c		       77		      .byte.b	%01110111	; ### ###
    502  f29d
    503  f29d		       77		      .byte.b	%01110111	; ### ###
    504  f29e		       11		      .byte.b	%00010001	;   #	 #
    505  f29f		       11		      .byte.b	%00010001	;   #	 #
    506  f2a0		       11		      .byte.b	%00010001	;   #	 #
    507  f2a1		       11		      .byte.b	%00010001	;   #	 #
    508  f2a2
    509  f2a2		       77		      .byte.b	%01110111	; ### ###
    510  f2a3		       55		      .byte.b	%01010101	; # # # #
    511  f2a4		       77		      .byte.b	%01110111	; ### ###
    512  f2a5		       55		      .byte.b	%01010101	; # # # #
    513  f2a6		       77		      .byte.b	%01110111	; ### ###
    514  f2a7
    515  f2a7		       77		      .byte.b	%01110111	; ### ###
    516  f2a8		       55		      .byte.b	%01010101	; # # # #
    517  f2a9		       77		      .byte.b	%01110111	; ### ###
    518  f2aa		       11		      .byte.b	%00010001	;   #	 #
    519  f2ab		       77		      .byte.b	%01110111	; ### ###
    520  f2ac
    521  f2ac		       22		      .byte.b	%00100010	;  #	#
    522  f2ad		       55		      .byte.b	%01010101	; # # # #
    523  f2ae		       77		      .byte.b	%01110111	; ### ###
    524  f2af		       55		      .byte.b	%01010101	; # # # #
    525  f2b0		       55		      .byte.b	%01010101	; # # # #
    526  f2b1
    527  f2b1		       77		      .byte.b	%01110111	; ### ###
    528  f2b2		       55		      .byte.b	%01010101	; # # # #
    529  f2b3		       66		      .byte.b	%01100110	; ##  ##
    530  f2b4		       55		      .byte.b	%01010101	; # # # #
    531  f2b5		       77		      .byte.b	%01110111	; ### ###
    532  f2b6
    533  f2b6		       77		      .byte.b	%01110111	; ### ###
    534  f2b7		       44		      .byte.b	%01000100	; #   #
    535  f2b8		       44		      .byte.b	%01000100	; #   #
    536  f2b9		       44		      .byte.b	%01000100	; #   #
    537  f2ba		       77		      .byte.b	%01110111	; ### ###
    538  f2bb
    539  f2bb		       66		      .byte.b	%01100110	; ##  ##
    540  f2bc		       55		      .byte.b	%01010101	; # # # #
    541  f2bd		       55		      .byte.b	%01010101	; # # # #
    542  f2be		       55		      .byte.b	%01010101	; # # # #
    543  f2bf		       66		      .byte.b	%01100110	; ##  ##
    544  f2c0
    545  f2c0		       77		      .byte.b	%01110111	; ### ###
    546  f2c1		       44		      .byte.b	%01000100	; #   #
    547  f2c2		       77		      .byte.b	%01110111	; ### ###
    548  f2c3		       44		      .byte.b	%01000100	; #   #
    549  f2c4		       77		      .byte.b	%01110111	; ### ###
    550  f2c5
    551  f2c5		       77		      .byte.b	%01110111	; ### ###
    552  f2c6		       44		      .byte.b	%01000100	; #   #
    553  f2c7		       66		      .byte.b	%01100110	; ##  ##
    554  f2c8		       44		      .byte.b	%01000100	; #   #
    555  f2c9		       44		      .byte.b	%01000100	; #   #
    556  f2ca
    557  f2ca							;end of ROM
    558  fffc					      org	$FFFC
    559  fffc		       00 f0		      .word.w	reset
    560  fffe		       00 f0		      .word.w	reset
