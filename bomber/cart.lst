------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;include required files
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						;segment for uninitialized variables starting at $80
      8 U008d ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		;player 0 X position
     12 U0081		       00	   JetYPos    byte.b		;player 0 Y position
     13 U0082		       00	   BomberXPos byte.b		;player 1 X position
     14 U0083		       00	   BomberYPos byte.b		;player 1 Y position
     15 U0084		       00 00	   JetSpritePtr word.w		;Player 0 sprite pointer
     16 U0086		       00 00	   JetColourPtr word.w		;player 0 colour pointer
     17 U0088		       00 00	   BomberSpritePtr word.w		;Player 1 sprite pointer
     18 U008a		       00 00	   BomberColourPtr word.w		;player 1 colour pointer
     19 U008c		       00	   JetAnimOffset byte.b		;player 0 frame offset
     20 U008d
     21 U008d							;define constants
     22 U008d		       00 09	   JET_HEIGHT =	9	;Player 0 sprite height
     23 U008d		       00 09	   BOMBER_HEIGHT =	9	;PLayer 1 sprite height
     24 U008d
     25 U008d
     26 U008d							;start of ROM at $F000
     27  10000 ????				       seg	code
     28  f000					      org	$F000
     29  f000
     30  f000				   reset
      0  f000					      CLEAN_START		;call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     32  f00a
     33  f00a							;initialize variables
     34  f00a		       a9 41		      lda	#65
     35  f00c		       85 80		      sta	JetXPos	;JetXPos = 65
     36  f00e		       a9 05		      lda	#5
     37  f010		       85 81		      sta	JetYPos	;JetYPos = 5
     38  f012		       a9 53		      lda	#83
     39  f014		       85 83		      sta	BomberYPos	;BomberYPos = 83
     40  f016		       a9 41		      lda	#65
     41  f018		       85 82		      sta	BomberXPos	;BomberXPos = 65
     42  f01a
     43  f01a							;initialize pointers
     44  f01a		       a9 97		      lda	#<JetSprite
     45  f01c		       85 84		      sta	JetSpritePtr	;low byte pointer to jet sprite lookup table
     46  f01e		       a9 f1		      lda	#>JetSprite
     47  f020		       85 85		      sta	JetSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     48  f022
     49  f022		       a9 b1		      lda	#<JetColour
     50  f024		       85 86		      sta	JetColourPtr	;low byte pointer to jet colour lookup table
     51  f026		       a9 f1		      lda	#>JetColour
     52  f028		       85 87		      sta	JetColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     53  f02a
     54  f02a		       a9 a8		      lda	#<BomberSprite
     55  f02c		       85 88		      sta	BomberSpritePtr	;low byte pointer to jet sprite lookup table
     56  f02e		       a9 f1		      lda	#>BomberSprite
     57  f030		       85 89		      sta	BomberSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     58  f032
     59  f032		       a9 c3		      lda	#<BomberColour
     60  f034		       85 8a		      sta	BomberColourPtr	;low byte pointer to jet colour lookup table
     61  f036		       a9 f1		      lda	#>BomberColour
     62  f038		       85 8b		      sta	BomberColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     63  f03a
     64  f03a
     65  f03a
     66  f03a							;start main display loop
     67  f03a				   StartFrame
     68  f03a							;calculations and tasks pre VBLANK
     69  f03a		       a5 80		      lda	JetXPos
     70  f03c		       a0 00		      ldy	#0
     71  f03e		       20 83 f1 	      jsr	SetObjectXPos	;set player 0 horizontal position
     72  f041
     73  f041		       a5 82		      lda	BomberXPos
     74  f043		       a0 01		      ldy	#1
     75  f045		       20 83 f1 	      jsr	SetObjectXPos	;set player 1 horizontal position
     76  f048
     77  f048		       85 02		      sta	WSYNC
     78  f04a		       85 2a		      sta	HMOVE	;apply the horizontal offsets previously set
     79  f04c
     80  f04c
     81  f04c							;display VSYNC and VBLANK
     82  f04c		       a9 02		      lda	#2
     83  f04e		       85 00		      sta	VSYNC
     84  f050		       85 01		      sta	VBLANK
     85  f052
     86  f052							;generate 3 lines of VSYNC
     87  f052					      REPEAT	3
     88  f052		       85 02		      sta	WSYNC
     87  f052					      REPEND
     88  f054		       85 02		      sta	WSYNC
     87  f054					      REPEND
     88  f056		       85 02		      sta	WSYNC
     89  f058					      REPEND
     90  f058
     91  f058							;turn off VSYNC
     92  f058		       a9 00		      lda	#0
     93  f05a		       85 00		      sta	VSYNC
     94  f05c
     95  f05c							;generate 37 lines of VBLANK
     96  f05c					      REPEAT	37
     97  f05c		       85 02		      sta	WSYNC
     96  f05c					      REPEND
     97  f05e		       85 02		      sta	WSYNC
     96  f05e					      REPEND
     97  f060		       85 02		      sta	WSYNC
     96  f060					      REPEND
     97  f062		       85 02		      sta	WSYNC
     96  f062					      REPEND
     97  f064		       85 02		      sta	WSYNC
     96  f064					      REPEND
     97  f066		       85 02		      sta	WSYNC
     96  f066					      REPEND
     97  f068		       85 02		      sta	WSYNC
     96  f068					      REPEND
     97  f06a		       85 02		      sta	WSYNC
     96  f06a					      REPEND
     97  f06c		       85 02		      sta	WSYNC
     96  f06c					      REPEND
     97  f06e		       85 02		      sta	WSYNC
     96  f06e					      REPEND
     97  f070		       85 02		      sta	WSYNC
     96  f070					      REPEND
     97  f072		       85 02		      sta	WSYNC
     96  f072					      REPEND
     97  f074		       85 02		      sta	WSYNC
     96  f074					      REPEND
     97  f076		       85 02		      sta	WSYNC
     96  f076					      REPEND
     97  f078		       85 02		      sta	WSYNC
     96  f078					      REPEND
     97  f07a		       85 02		      sta	WSYNC
     96  f07a					      REPEND
     97  f07c		       85 02		      sta	WSYNC
     96  f07c					      REPEND
     97  f07e		       85 02		      sta	WSYNC
     96  f07e					      REPEND
     97  f080		       85 02		      sta	WSYNC
     96  f080					      REPEND
     97  f082		       85 02		      sta	WSYNC
     96  f082					      REPEND
     97  f084		       85 02		      sta	WSYNC
     96  f084					      REPEND
     97  f086		       85 02		      sta	WSYNC
     96  f086					      REPEND
     97  f088		       85 02		      sta	WSYNC
     96  f088					      REPEND
     97  f08a		       85 02		      sta	WSYNC
     96  f08a					      REPEND
     97  f08c		       85 02		      sta	WSYNC
     96  f08c					      REPEND
     97  f08e		       85 02		      sta	WSYNC
     96  f08e					      REPEND
     97  f090		       85 02		      sta	WSYNC
     96  f090					      REPEND
     97  f092		       85 02		      sta	WSYNC
     96  f092					      REPEND
     97  f094		       85 02		      sta	WSYNC
     96  f094					      REPEND
     97  f096		       85 02		      sta	WSYNC
     96  f096					      REPEND
     97  f098		       85 02		      sta	WSYNC
     96  f098					      REPEND
     97  f09a		       85 02		      sta	WSYNC
     96  f09a					      REPEND
     97  f09c		       85 02		      sta	WSYNC
     96  f09c					      REPEND
     97  f09e		       85 02		      sta	WSYNC
     96  f09e					      REPEND
     97  f0a0		       85 02		      sta	WSYNC
     96  f0a0					      REPEND
     97  f0a2		       85 02		      sta	WSYNC
     96  f0a2					      REPEND
     97  f0a4		       85 02		      sta	WSYNC
     98  f0a6					      REPEND
     99  f0a6
    100  f0a6							;turn off VBLANK
    101  f0a6		       a9 00		      lda	#0
    102  f0a8		       85 01		      sta	VBLANK
    103  f0aa
    104  f0aa
    105  f0aa							;display 96 visible scanlines (2 line kernel)
    106  f0aa				   VisibleLine
    107  f0aa		       a9 84		      lda	#$84
    108  f0ac		       85 09		      sta	COLUBK	;set background to pale blue
    109  f0ae
    110  f0ae		       a9 c2		      lda	#$C2
    111  f0b0		       85 08		      sta	COLUPF	;set playfield to green
    112  f0b2
    113  f0b2		       a5 01		      lda	%00000001
    114  f0b4		       85 0a		      sta	CTRLPF	;enable playfield reflection
    115  f0b6
    116  f0b6		       a9 f0		      lda	#$F0
    117  f0b8		       85 0d		      sta	PF0
    118  f0ba							; setting PF0 bit pattern
    119  f0ba		       a9 fc		      lda	#$FC
    120  f0bc		       85 0e		      sta	PF1
    121  f0be							; setting PF1 bit pattern
    122  f0be		       a9 00		      lda	#0
    123  f0c0		       85 0f		      sta	PF2	; setting PF2 bit pattern
    124  f0c2
    125  f0c2		       a2 60		      ldx	#96	;X counts the remaining number of scanlines
    126  f0c4				   LineLoop
    127  f0c4				   InsideJetSprite
    128  f0c4		       8a		      txa		;transfer x to acc
    129  f0c5		       38		      sec		;set carry flag for subtraction
    130  f0c6		       e5 81		      sbc	JetYPos	;subtract sprite Y coord
    131  f0c8		       c5 09		      cmp	JET_HEIGHT	;compare with jet height
    132  f0ca		       90 02		      bcc	DrawSpriteP0	;if result < SpriteHeight call draw routine
    133  f0cc		       a9 00		      lda	#0	;else, load 0
    134  f0ce
    135  f0ce				   DrawSpriteP0
    136  f0ce		       18		      clc		;clear carry before addition
    137  f0cf		       65 8c		      adc	JetAnimOffset	;jump to the sprite frame in memory
    138  f0d1
    139  f0d1		       a8		      tay		;Load Y so pointer can be worked with
    140  f0d2		       b1 84		      lda	(JetSpritePtr),Y	;Load P0 Bitmap data
    141  f0d4		       85 02		      sta	WSYNC	;wait for next scanline
    142  f0d6		       85 1b		      sta	GRP0	;set graphics for P0
    143  f0d8		       b1 86		      lda	(JetColourPtr),Y	;load P0 Colour data
    144  f0da		       85 06		      sta	COLUP0	;set colour of P0
    145  f0dc
    146  f0dc				   InsideBomberSprite
    147  f0dc		       8a		      txa		;transfer x to acc
    148  f0dd		       38		      sec		;set carry flag for subtraction
    149  f0de		       e5 83		      sbc	BomberYPos	;subtract sprite Y coord
    150  f0e0		       c5 09		      cmp	BOMBER_HEIGHT	;compare with jet height
    151  f0e2		       90 02		      bcc	DrawSpriteP1	;if result < SpriteHeight call draw routine
    152  f0e4		       a9 00		      lda	#0	;else, load 0
    153  f0e6
    154  f0e6				   DrawSpriteP1
    155  f0e6		       a8		      tay		;Load Y so pointer can be worked with
    156  f0e7		       b1 88		      lda	(BomberSpritePtr),Y	;Load P0 Bitmap data
    157  f0e9		       85 02		      sta	WSYNC	;wait for next scanline
    158  f0eb		       85 1c		      sta	GRP1	;set graphics for P0
    159  f0ed		       b1 8a		      lda	(BomberColourPtr),Y	;load P0 Colour data
    160  f0ef		       85 07		      sta	COLUP1	;set colour of P0
    161  f0f1
    162  f0f1		       ca		      dex		;X--
    163  f0f2		       d0 d0		      bne	LineLoop	;repeat next visible scanline until finished
    164  f0f4
    165  f0f4		       a9 00		      lda	#0
    166  f0f6		       85 8c		      sta	JetAnimOffset	;reset jet animation
    167  f0f8
    168  f0f8							;display 30 lines of overscan
    169  f0f8		       a9 02		      lda	#2
    170  f0fa		       85 01		      sta	VBLANK	;turn on VBLANK
    171  f0fc
    172  f0fc					      REPEAT	30
    173  f0fc		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f0fc					      REPEND
    173  f0fe		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f0fe					      REPEND
    173  f100		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f100					      REPEND
    173  f102		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f102					      REPEND
    173  f104		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f104					      REPEND
    173  f106		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f106					      REPEND
    173  f108		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f108					      REPEND
    173  f10a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f10a					      REPEND
    173  f10c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f10c					      REPEND
    173  f10e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f10e					      REPEND
    173  f110		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f110					      REPEND
    173  f112		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f112					      REPEND
    173  f114		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f114					      REPEND
    173  f116		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f116					      REPEND
    173  f118		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f118					      REPEND
    173  f11a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f11a					      REPEND
    173  f11c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f11c					      REPEND
    173  f11e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f11e					      REPEND
    173  f120		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f120					      REPEND
    173  f122		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f122					      REPEND
    173  f124		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f124					      REPEND
    173  f126		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f126					      REPEND
    173  f128		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f128					      REPEND
    173  f12a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f12a					      REPEND
    173  f12c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f12c					      REPEND
    173  f12e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f12e					      REPEND
    173  f130		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f130					      REPEND
    173  f132		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f132					      REPEND
    173  f134		       85 02		      sta	WSYNC	;display 30 lines of overscan
    172  f134					      REPEND
    173  f136		       85 02		      sta	WSYNC	;display 30 lines of overscan
    174  f138					      REPEND
    175  f138
    176  f138		       a9 00		      lda	#0
    177  f13a		       85 01		      sta	VBLANK	;turn off VBLANK
    178  f13c
    179  f13c							;process joystick input for P0
    180  f13c				   CheckP0Up
    181  f13c		       a9 10		      lda	#%00010000	;player 0 joystick up
    182  f13e		       2c 80 02 	      bit	SWCHA
    183  f141		       d0 06		      bne	CheckP0Down	;if up isnt being pressed skip to down
    184  f143		       e6 81		      inc	JetYPos
    185  f145		       a9 00		      lda	#0
    186  f147		       85 8c		      sta	JetAnimOffset	;reset animation
    187  f149
    188  f149				   CheckP0Down
    189  f149		       a9 20		      lda	#%00100000	;Player 0 joystick down
    190  f14b		       2c 80 02 	      bit	SWCHA
    191  f14e		       d0 06		      bne	CheckP0Left	;skip to left if not pressed
    192  f150		       c6 81		      dec	JetYPos
    193  f152		       a9 00		      lda	#0
    194  f154		       85 8c		      sta	JetAnimOffset	;reset animation
    195  f156
    196  f156				   CheckP0Left
    197  f156		       a9 40		      lda	#%01000000	;Player 0 joystick left
    198  f158		       2c 80 02 	      bit	SWCHA
    199  f15b		       d0 06		      bne	CheckP0Right	;skip to right if not pressed
    200  f15d		       c6 80		      dec	JetXPos
    201  f15f		       a5 09		      lda	JET_HEIGHT	;9
    202  f161		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    203  f163
    204  f163				   CheckP0Right
    205  f163		       a9 80		      lda	#%10000000	;player 0 joystick right
    206  f165		       2c 80 02 	      bit	SWCHA
    207  f168		       d0 06		      bne	NoInput	;fallback to no input
    208  f16a		       e6 80		      inc	JetXPos
    209  f16c		       a5 09		      lda	JET_HEIGHT	;9
    210  f16e		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    211  f170
    212  f170				   NoInput
    213  f170
    214  f170							;calculations to update position for next frame
    215  f170				   UpdateBomberPosition
    216  f170		       a5 83		      lda	BomberYPos	;load Bomber Y position to acc
    217  f172		       18		      clc		;clear the carry flag
    218  f173		       c9 00		      cmp	#0	;compare Y position to 0
    219  f175		       30 05		      bmi	ResetBomberPosition	;branch to ResetBomberPosition if the number is a negative
    220  f177		       c6 83		      dec	BomberYPos	;decrement the bomber y position
    221  f179		       4c 80 f1 	      jmp	EndPositionUpdate	;jump to fallback
    222  f17c
    223  f17c				   ResetBomberPosition		;resets Bomber Y position back to the top of the screen
    224  f17c		       a9 60		      lda	#96
    225  f17e		       85 83		      sta	BomberYPos
    226  f180							;TODO set BomberXPos to random number
    227  f180
    228  f180				   EndPositionUpdate		;fallback for position update code
    229  f180
    230  f180							;loop new frame
    231  f180		       4c 3a f0 	      jmp	StartFrame
    232  f183
    233  f183							;subroutine to handle sprite X offset
    234  f183							;A is the target offset position,
    235  f183							;Y is the object type (0: Player0 1: Player1 2: missile0 3: missile1 4: ball)
    236  f183				   SetObjectXPos subroutine
    237  f183		       85 02		      sta	WSYNC	;wait for fresh scanline
    238  f185		       38		      sec		;carry flag for subtraction
    239  f186				   DivideLoop
    240  f186		       e9 0f		      sbc	#15	;subtract 15 from acc
    241  f188		       b0 fc		      bcs	DivideLoop	;loop until carry flag is clear
    242  f18a		       49 07		      eor	#7	;adjust remainder to -8 to 7
    243  f18c		       0a		      asl
    244  f18d		       0a		      asl
    245  f18e		       0a		      asl
    246  f18f		       0a		      asl		;four left shifts as HMP0 only targets the top 4 bits
    247  f190		       99 20 00 	      sta	HMP0,Y	;store the fine offset
    248  f193		       99 10 00 	      sta	RESP0,Y	;fix object in 15 step intervals
    249  f196		       60		      rts
    250  f197
    251  f197
    252  f197
    253  f197							;ROM lookup tables
    254  f197				   JetSprite
    255  f197		       00		      .byte.b	#%00000000
    256  f198		       54		      .byte.b	#%01010100	;$1E
    257  f199		       54		      .byte.b	#%01010100	;$40
    258  f19a		       7c		      .byte.b	#%01111100	;$40
    259  f19b		       38		      .byte.b	#%00111000	;$40
    260  f19c		       38		      .byte.b	#%00111000	;$40
    261  f19d		       38		      .byte.b	#%00111000	;$40
    262  f19e		       10		      .byte.b	#%00010000	;$40
    263  f19f		       10		      .byte.b	#%00010000	;$40
    264  f1a0
    265  f1a0
    266  f1a0				   JetSpriteTurn
    267  f1a0		       00		      .byte.b	#%00000000	;$1E
    268  f1a1		       54		      .byte.b	#%01010100	;$1E
    269  f1a2		       54		      .byte.b	#%01010100	;$40
    270  f1a3		       38		      .byte.b	#%00111000	;$40
    271  f1a4		       10		      .byte.b	#%00010000	;$40
    272  f1a5		       10		      .byte.b	#%00010000	;$40
    273  f1a6		       10		      .byte.b	#%00010000	;$40
    274  f1a7		       10		      .byte.b	#%00010000	;$40
    275  f1a8
    276  f1a8				   BomberSprite
    277  f1a8		       00		      .byte.b	#%00000000
    278  f1a9		       00		      .byte.b	#%00000000
    279  f1aa		       08		      .byte.b	#%00001000
    280  f1ab		       14		      .byte.b	#%00010100
    281  f1ac		       2a		      .byte.b	#%00101010
    282  f1ad		       2a		      .byte.b	#%00101010
    283  f1ae		       7f		      .byte.b	#%01111111
    284  f1af		       49		      .byte.b	#%01001001
    285  f1b0		       49		      .byte.b	#%01001001
    286  f1b1
    287  f1b1				   JetColour
    288  f1b1		       00		      .byte.b	#$00
    289  f1b2		       1e		      .byte.b	#$1E
    290  f1b3		       40		      .byte.b	#$40
    291  f1b4		       40		      .byte.b	#$40
    292  f1b5		       40		      .byte.b	#$40
    293  f1b6		       40		      .byte.b	#$40
    294  f1b7		       40		      .byte.b	#$40
    295  f1b8		       40		      .byte.b	#$40
    296  f1b9		       40		      .byte.b	#$40
    297  f1ba
    298  f1ba				   JetTurnColour
    299  f1ba		       1e		      .byte.b	#$1E	;
    300  f1bb		       1e		      .byte.b	#$1E	;
    301  f1bc		       40		      .byte.b	#$40	;
    302  f1bd		       40		      .byte.b	#$40	;
    303  f1be		       40		      .byte.b	#$40	;
    304  f1bf		       40		      .byte.b	#$40	;
    305  f1c0		       40		      .byte.b	#$40	;
    306  f1c1		       40		      .byte.b	#$40	;
    307  f1c2		       40		      .byte.b	#$40	;
    308  f1c3
    309  f1c3				   BomberColour
    310  f1c3		       00		      .byte.b	#$00
    311  f1c4		       00		      .byte.b	#$00
    312  f1c5		       1e		      .byte.b	#$1E
    313  f1c6		       1e		      .byte.b	#$1E
    314  f1c7		       1e		      .byte.b	#$1E
    315  f1c8		       1e		      .byte.b	#$1E
    316  f1c9		       1e		      .byte.b	#$1E
    317  f1ca		       1e		      .byte.b	#$1E
    318  f1cb		       1e		      .byte.b	#$1E
    319  f1cc
    320  f1cc							;end of ROM
    321  fffc					      org	$FFFC
    322  fffc		       00 f0		      .word.w	reset
    323  fffe		       00 f0		      .word.w	reset
