------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;include required files
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						;segment for uninitialized variables starting at $80
      8 U0097 ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		;player 0 X position
     12 U0081		       00	   JetYPos    byte.b		;player 0 Y position
     13 U0082		       00	   BomberXPos byte.b		;player 1 X position
     14 U0083		       00	   BomberYPos byte.b		;player 1 Y position
     15 U0084		       00 00	   JetSpritePtr word.w		;Player 0 sprite pointer
     16 U0086		       00 00	   JetColourPtr word.w		;player 0 colour pointer
     17 U0088		       00 00	   BomberSpritePtr word.w		;Player 1 sprite pointer
     18 U008a		       00 00	   BomberColourPtr word.w		;player 1 colour pointer
     19 U008c		       00	   JetAnimOffset byte.b		;player 0 frame offset
     20 U008d		       00	   Random     byte.b		;set random number
     21 U008e		       00	   ScoreSprite byte.b		;store the bit pattern for the score sprite
     22 U008f		       00	   TimerSprite byte.b		;score the bit pattern for the timer sprite
     23 U0090		       00	   Score      byte.b		;2 digit score variable stored as BCD
     24 U0091		       00	   Timer      byte.b		;2 digit timer variable stored as BCD
     25 U0092		       00	   Temp       byte.b		;Temporary variable
     26 U0093		       00 00	   OnesDigitOffset word.w		;offset for score ones digit
     27 U0095		       00 00	   TensDigitOffset word.w		;offset for score tens digit
     28 U0097
     29 U0097							;define constants
     30 U0097		       00 09	   JET_HEIGHT =	9	;Player 0 sprite height
     31 U0097		       00 09	   BOMBER_HEIGHT =	9	;Player 1 sprite height
     32 U0097		       00 05	   DIGIT_HEIGHT =	5	;Scoreboard height
     33 U0097
     34 U0097
     35 U0097							;start of ROM at $F000
     36  10000 ????				       seg	code
     37  f000					      org	$F000
     38  f000
     39  f000				   reset
      0  f000					      CLEAN_START		;call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     41  f00a
     42  f00a							;initialize variables-----------------------------------------------
     43  f00a		       a9 41		      lda	#65
     44  f00c		       85 80		      sta	JetXPos	;JetXPos = 65
     45  f00e		       a9 05		      lda	#5
     46  f010		       85 81		      sta	JetYPos	;JetYPos = 5
     47  f012		       a9 53		      lda	#83
     48  f014		       85 83		      sta	BomberYPos	;BomberYPos = 83
     49  f016		       a9 41		      lda	#65
     50  f018		       85 82		      sta	BomberXPos	;BomberXPos = 65
     51  f01a		       a9 d4		      lda	#%11010100
     52  f01c		       85 8d		      sta	Random	;Random = $D4
     53  f01e		       a9 00		      lda	#0
     54  f020		       85 90		      sta	Score
     55  f022		       85 91		      sta	Timer	;score and timer = 0
     56  f024
     57  f024							;initialize pointers------------------------------------------------
     58  f024		       a9 6d		      lda	#<JetSprite
     59  f026		       85 84		      sta	JetSpritePtr	;low byte pointer to jet sprite lookup table
     60  f028		       a9 f2		      lda	#>JetSprite
     61  f02a		       85 85		      sta	JetSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     62  f02c
     63  f02c		       a9 87		      lda	#<JetColour
     64  f02e		       85 86		      sta	JetColourPtr	;low byte pointer to jet colour lookup table
     65  f030		       a9 f2		      lda	#>JetColour
     66  f032		       85 87		      sta	JetColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     67  f034
     68  f034		       a9 7e		      lda	#<BomberSprite
     69  f036		       85 88		      sta	BomberSpritePtr	;low byte pointer to jet sprite lookup table
     70  f038		       a9 f2		      lda	#>BomberSprite
     71  f03a		       85 89		      sta	BomberSpritePtr+1	;high byte pointer to jet sprite lookup table (plus one)
     72  f03c
     73  f03c		       a9 99		      lda	#<BomberColour
     74  f03e		       85 8a		      sta	BomberColourPtr	;low byte pointer to jet colour lookup table
     75  f040		       a9 f2		      lda	#>BomberColour
     76  f042		       85 8b		      sta	BomberColourPtr+1	;high byte pointer to jet colour lookup table (plus one)
     77  f044
     78  f044							;start main display loop--------------------------------------------
     79  f044				   StartFrame
     80  f044							;display VSYNC and VBLANK-------------------------------------------
     81  f044		       a9 02		      lda	#2
     82  f046		       85 00		      sta	VSYNC
     83  f048		       85 01		      sta	VBLANK
     84  f04a							;generate 3 lines of VSYNC------------------------------------------
     85  f04a					      REPEAT	3
     86  f04a		       85 02		      sta	WSYNC
     85  f04a					      REPEND
     86  f04c		       85 02		      sta	WSYNC
     85  f04c					      REPEND
     86  f04e		       85 02		      sta	WSYNC
     87  f050					      REPEND
     88  f050							;turn off VSYNC-----------------------------------------------------
     89  f050		       a9 00		      lda	#0
     90  f052		       85 00		      sta	VSYNC
     91  f054
     92  f054							;generate 37 lines of VBLANK----------------------------------------
     93  f054					      REPEAT	33
     94  f054		       85 02		      sta	WSYNC
     93  f054					      REPEND
     94  f056		       85 02		      sta	WSYNC
     93  f056					      REPEND
     94  f058		       85 02		      sta	WSYNC
     93  f058					      REPEND
     94  f05a		       85 02		      sta	WSYNC
     93  f05a					      REPEND
     94  f05c		       85 02		      sta	WSYNC
     93  f05c					      REPEND
     94  f05e		       85 02		      sta	WSYNC
     93  f05e					      REPEND
     94  f060		       85 02		      sta	WSYNC
     93  f060					      REPEND
     94  f062		       85 02		      sta	WSYNC
     93  f062					      REPEND
     94  f064		       85 02		      sta	WSYNC
     93  f064					      REPEND
     94  f066		       85 02		      sta	WSYNC
     93  f066					      REPEND
     94  f068		       85 02		      sta	WSYNC
     93  f068					      REPEND
     94  f06a		       85 02		      sta	WSYNC
     93  f06a					      REPEND
     94  f06c		       85 02		      sta	WSYNC
     93  f06c					      REPEND
     94  f06e		       85 02		      sta	WSYNC
     93  f06e					      REPEND
     94  f070		       85 02		      sta	WSYNC
     93  f070					      REPEND
     94  f072		       85 02		      sta	WSYNC
     93  f072					      REPEND
     94  f074		       85 02		      sta	WSYNC
     93  f074					      REPEND
     94  f076		       85 02		      sta	WSYNC
     93  f076					      REPEND
     94  f078		       85 02		      sta	WSYNC
     93  f078					      REPEND
     94  f07a		       85 02		      sta	WSYNC
     93  f07a					      REPEND
     94  f07c		       85 02		      sta	WSYNC
     93  f07c					      REPEND
     94  f07e		       85 02		      sta	WSYNC
     93  f07e					      REPEND
     94  f080		       85 02		      sta	WSYNC
     93  f080					      REPEND
     94  f082		       85 02		      sta	WSYNC
     93  f082					      REPEND
     94  f084		       85 02		      sta	WSYNC
     93  f084					      REPEND
     94  f086		       85 02		      sta	WSYNC
     93  f086					      REPEND
     94  f088		       85 02		      sta	WSYNC
     93  f088					      REPEND
     94  f08a		       85 02		      sta	WSYNC
     93  f08a					      REPEND
     94  f08c		       85 02		      sta	WSYNC
     93  f08c					      REPEND
     94  f08e		       85 02		      sta	WSYNC
     93  f08e					      REPEND
     94  f090		       85 02		      sta	WSYNC
     93  f090					      REPEND
     94  f092		       85 02		      sta	WSYNC
     93  f092					      REPEND
     94  f094		       85 02		      sta	WSYNC
     95  f096					      REPEND
     96  f096
     97  f096							;calculations and tasks in VBLANK-----------------------------------
     98  f096		       a5 80		      lda	JetXPos
     99  f098		       a0 00		      ldy	#0
    100  f09a		       20 15 f2 	      jsr	SetObjectXPos	;set player 0 horizontal position
    101  f09d		       a5 82		      lda	BomberXPos
    102  f09f		       a0 01		      ldy	#1
    103  f0a1		       20 15 f2 	      jsr	SetObjectXPos	;set player 1 horizontal position
    104  f0a4		       20 4c f2 	      jsr	CalculateDigitOffset	;calculate the scoreboard offset
    105  f0a7		       85 02		      sta	WSYNC
    106  f0a9		       85 2a		      sta	HMOVE	;apply the horizontal offsets previously set
    107  f0ab
    108  f0ab							;turn off VBLANK---------------------------------------------------
    109  f0ab		       a9 00		      lda	#0
    110  f0ad		       85 01		      sta	VBLANK
    111  f0af
    112  f0af							;clear TIA registers-----------------------------------------------
    113  f0af		       a9 00		      lda	#0	;clear TIA registers
    114  f0b1		       85 0d		      sta	PF0
    115  f0b3		       85 0e		      sta	PF1
    116  f0b5		       85 0f		      sta	PF2
    117  f0b7		       85 1b		      sta	GRP0
    118  f0b9		       85 1c		      sta	GRP1
    119  f0bb		       85 09		      sta	COLUBK
    120  f0bd		       a9 1c		      lda	#$1C	;set scoreboard colour to white
    121  f0bf		       85 08		      sta	COLUPF
    122  f0c1		       a9 00		      lda	#%00000000
    123  f0c3		       85 0a		      sta	CTRLPF	;disable playfield reflection
    124  f0c5
    125  f0c5							;display scoreboard lines------------------------------------------
    126  f0c5		       a2 05		      ldx	#DIGIT_HEIGHT	;store 5 in X
    127  f0c7				   ScoreDigitLoop
    128  f0c7		       a4 95		      ldy	TensDigitOffset	;get the tens digit offset for the score
    129  f0c9		       b9 a2 f2 	      lda	Digits,Y	;load sprite
    130  f0cc		       29 f0		      and	#$F0	;mask the graphics for ones digit
    131  f0ce		       85 8e		      sta	ScoreSprite	;score the tens digit pattern
    132  f0d0
    133  f0d0		       a4 93		      ldy	OnesDigitOffset
    134  f0d2		       b9 a2 f2 	      lda	Digits,Y
    135  f0d5		       29 0f		      and	#$0F
    136  f0d7		       05 8e		      ora	ScoreSprite	;merge ones and tens into one sprite
    137  f0d9		       85 8e		      sta	ScoreSprite
    138  f0db		       85 02		      sta	WSYNC	;wait for new scanline
    139  f0dd		       85 0e		      sta	PF1	;update the playfield
    140  f0df
    141  f0df		       a4 96		      ldy	TensDigitOffset+1
    142  f0e1		       b9 a2 f2 	      lda	Digits,Y
    143  f0e4		       29 f0		      and	#$F0
    144  f0e6		       85 8f		      sta	TimerSprite
    145  f0e8
    146  f0e8		       a4 94		      ldy	OnesDigitOffset+1
    147  f0ea		       b9 a2 f2 	      lda	Digits,Y
    148  f0ed		       29 0f		      and	#$0F
    149  f0ef		       05 8f		      ora	TimerSprite
    150  f0f1		       85 8f		      sta	TimerSprite
    151  f0f3
    152  f0f3		       20 6c f2 	      jsr	Sleep12Cycles
    153  f0f6		       85 0e		      sta	PF1
    154  f0f8		       a4 8e		      ldy	ScoreSprite
    155  f0fa		       85 02		      sta	WSYNC
    156  f0fc
    157  f0fc		       84 0e		      sty	PF1
    158  f0fe		       e6 95		      inc	TensDigitOffset
    159  f100		       e6 96		      inc	TensDigitOffset+1
    160  f102		       e6 93		      inc	OnesDigitOffset
    161  f104		       e6 94		      inc	OnesDigitOffset+1
    162  f106
    163  f106		       20 6c f2 	      jsr	Sleep12Cycles
    164  f109
    165  f109		       ca		      dex		;X--
    166  f10a		       85 0e		      sta	PF1
    167  f10c		       d0 b9		      bne	ScoreDigitLoop	;branch back to ScoreDigitLoop if dex != 0
    168  f10e		       85 02		      sta	WSYNC
    169  f110
    170  f110		       a9 00		      lda	#0
    171  f112		       85 0d		      sta	PF0
    172  f114		       85 0e		      sta	PF1
    173  f116		       85 0f		      sta	PF2
    174  f118		       85 02		      sta	WSYNC
    175  f11a		       85 02		      sta	WSYNC
    176  f11c		       85 02		      sta	WSYNC
    177  f11e
    178  f11e							;display 96 visible scanlines (2 line kernel)-----------------------------
    179  f11e				   VisibleLine
    180  f11e		       a9 84		      lda	#$84
    181  f120		       85 09		      sta	COLUBK	;set background to pale blue
    182  f122
    183  f122		       a9 c2		      lda	#$C2
    184  f124		       85 08		      sta	COLUPF	;set playfield to green
    185  f126
    186  f126		       a5 01		      lda	%00000001
    187  f128		       85 0a		      sta	CTRLPF	;enable playfield reflection
    188  f12a
    189  f12a		       a9 f0		      lda	#$F0
    190  f12c		       85 0d		      sta	PF0
    191  f12e							; setting PF0 bit pattern
    192  f12e		       a9 fc		      lda	#$FC
    193  f130		       85 0e		      sta	PF1
    194  f132							; setting PF1 bit pattern
    195  f132		       a9 00		      lda	#0
    196  f134		       85 0f		      sta	PF2	; setting PF2 bit pattern
    197  f136
    198  f136		       a2 55		      ldx	#85	;X counts the remaining number of scanlines
    199  f138				   LineLoop
    200  f138				   InsideJetSprite
    201  f138		       8a		      txa		;transfer x to acc
    202  f139		       38		      sec		;set carry flag for subtraction
    203  f13a		       e5 81		      sbc	JetYPos	;subtract sprite Y coord
    204  f13c		       c5 09		      cmp	JET_HEIGHT	;compare with jet height
    205  f13e		       90 02		      bcc	DrawSpriteP0	;if result < SpriteHeight call draw routine
    206  f140		       a9 00		      lda	#0	;else, load 0
    207  f142
    208  f142				   DrawSpriteP0
    209  f142		       18		      clc		;clear carry before addition
    210  f143		       65 8c		      adc	JetAnimOffset	;jump to the sprite frame in memory
    211  f145
    212  f145		       a8		      tay		;Load Y so pointer can be worked with
    213  f146		       b1 84		      lda	(JetSpritePtr),Y	;Load P0 Bitmap data
    214  f148		       85 02		      sta	WSYNC	;wait for next scanline
    215  f14a		       85 1b		      sta	GRP0	;set graphics for P0
    216  f14c		       b1 86		      lda	(JetColourPtr),Y	;load P0 Colour data
    217  f14e		       85 06		      sta	COLUP0	;set colour of P0
    218  f150
    219  f150				   InsideBomberSprite
    220  f150		       8a		      txa		;transfer x to acc
    221  f151		       38		      sec		;set carry flag for subtraction
    222  f152		       e5 83		      sbc	BomberYPos	;subtract sprite Y coord
    223  f154		       c5 09		      cmp	BOMBER_HEIGHT	;compare with jet height
    224  f156		       90 02		      bcc	DrawSpriteP1	;if result < SpriteHeight call draw routine
    225  f158		       a9 00		      lda	#0	;else, load 0
    226  f15a
    227  f15a				   DrawSpriteP1
    228  f15a		       a8		      tay		;Load Y so pointer can be worked with
    229  f15b		       b1 88		      lda	(BomberSpritePtr),Y	;Load P0 Bitmap data
    230  f15d		       85 02		      sta	WSYNC	;wait for next scanline
    231  f15f		       85 1c		      sta	GRP1	;set graphics for P0
    232  f161		       b1 8a		      lda	(BomberColourPtr),Y	;load P0 Colour data
    233  f163		       85 07		      sta	COLUP1	;set colour of P0
    234  f165
    235  f165		       ca		      dex		;X--
    236  f166		       d0 d0		      bne	LineLoop	;repeat next visible scanline until finished
    237  f168
    238  f168		       a9 00		      lda	#0
    239  f16a		       85 8c		      sta	JetAnimOffset	;reset jet animation
    240  f16c
    241  f16c
    242  f16c		       a9 02		      lda	#2
    243  f16e		       85 01		      sta	VBLANK	;turn on VBLANK
    244  f170
    245  f170					      REPEAT	30
    246  f170		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f170					      REPEND
    246  f172		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f172					      REPEND
    246  f174		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f174					      REPEND
    246  f176		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f176					      REPEND
    246  f178		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f178					      REPEND
    246  f17a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f17a					      REPEND
    246  f17c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f17c					      REPEND
    246  f17e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f17e					      REPEND
    246  f180		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f180					      REPEND
    246  f182		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f182					      REPEND
    246  f184		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f184					      REPEND
    246  f186		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f186					      REPEND
    246  f188		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f188					      REPEND
    246  f18a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f18a					      REPEND
    246  f18c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f18c					      REPEND
    246  f18e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f18e					      REPEND
    246  f190		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f190					      REPEND
    246  f192		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f192					      REPEND
    246  f194		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f194					      REPEND
    246  f196		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f196					      REPEND
    246  f198		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f198					      REPEND
    246  f19a		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f19a					      REPEND
    246  f19c		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f19c					      REPEND
    246  f19e		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f19e					      REPEND
    246  f1a0		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f1a0					      REPEND
    246  f1a2		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f1a2					      REPEND
    246  f1a4		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f1a4					      REPEND
    246  f1a6		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f1a6					      REPEND
    246  f1a8		       85 02		      sta	WSYNC	;display 30 lines of overscan
    245  f1a8					      REPEND
    246  f1aa		       85 02		      sta	WSYNC	;display 30 lines of overscan
    247  f1ac					      REPEND
    248  f1ac
    249  f1ac		       a9 00		      lda	#0
    250  f1ae		       85 01		      sta	VBLANK	;turn off VBLANK
    251  f1b0
    252  f1b0							;process joystick input for P0--------------------------------------------------------------------
    253  f1b0				   CheckP0Up
    254  f1b0		       a9 10		      lda	#%00010000	;player 0 joystick up
    255  f1b2		       2c 80 02 	      bit	SWCHA
    256  f1b5		       d0 06		      bne	CheckP0Down	;if up isnt being pressed skip to down
    257  f1b7		       e6 81		      inc	JetYPos
    258  f1b9		       a9 00		      lda	#0
    259  f1bb		       85 8c		      sta	JetAnimOffset	;reset animation
    260  f1bd
    261  f1bd				   CheckP0Down
    262  f1bd		       a9 20		      lda	#%00100000	;Player 0 joystick down
    263  f1bf		       2c 80 02 	      bit	SWCHA
    264  f1c2		       d0 06		      bne	CheckP0Left	;skip to left if not pressed
    265  f1c4		       c6 81		      dec	JetYPos
    266  f1c6		       a9 00		      lda	#0
    267  f1c8		       85 8c		      sta	JetAnimOffset	;reset animation
    268  f1ca
    269  f1ca				   CheckP0Left
    270  f1ca		       a9 40		      lda	#%01000000	;Player 0 joystick left
    271  f1cc		       2c 80 02 	      bit	SWCHA
    272  f1cf		       d0 06		      bne	CheckP0Right	;skip to right if not pressed
    273  f1d1		       c6 80		      dec	JetXPos
    274  f1d3		       a5 09		      lda	JET_HEIGHT	;9
    275  f1d5		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    276  f1d7
    277  f1d7				   CheckP0Right
    278  f1d7		       a9 80		      lda	#%10000000	;player 0 joystick right
    279  f1d9		       85 8f		      sta	TimerSprite
    280  f1db
    281  f1db		       20 6c f2 	      jsr	Sleep12Cycles
    282  f1de
    283  f1de		       2c 80 02 	      bit	SWCHA
    284  f1e1		       d0 06		      bne	NoInput	;fallback to no input
    285  f1e3		       e6 80		      inc	JetXPos
    286  f1e5		       a5 09		      lda	JET_HEIGHT	;9
    287  f1e7		       85 8c		      sta	JetAnimOffset	;set the animation offset to the next frame
    288  f1e9
    289  f1e9				   NoInput
    290  f1e9
    291  f1e9							;calculations to update position for next frame--------------------------------------------------
    292  f1e9				   UpdateBomberPosition
    293  f1e9		       a5 83		      lda	BomberYPos	;load Bomber Y position to acc
    294  f1eb		       18		      clc		;clear the carry flag
    295  f1ec		       c9 00		      cmp	#0	;compare Y position to 0
    296  f1ee		       30 05		      bmi	ResetBomberPosition	;branch to ResetBomberPosition if the number is a negative
    297  f1f0		       c6 83		      dec	BomberYPos	;decrement the bomber y position
    298  f1f2		       4c f8 f1 	      jmp	EndPositionUpdate	;jump to fallback
    299  f1f5
    300  f1f5				   ResetBomberPosition		;resets Bomber Y position back to the top of the screen
    301  f1f5		       20 2e f2 	      jsr	GetRandomBomberPosition	;call subroutine for random bomber x position
    302  f1f8
    303  f1f8				   EndPositionUpdate		;fallback for position update code
    304  f1f8
    305  f1f8							;check for object collision----------------------------------------------------------------------
    306  f1f8				   CheckCollisionP0P1
    307  f1f8		       a9 80		      lda	#%10000000	;CXPPMM bit 7 detects P0 and P1 collision
    308  f1fa		       24 07		      bit	CXPPMM	;check CXPPMM with the above pattern
    309  f1fc		       d0 0c		      bne	CollisionP0P1	;collision between P0 and P1
    310  f1fe		       4c 01 f2 	      jmp	CheckCollisionP0PF
    311  f201
    312  f201				   CheckCollisionP0PF
    313  f201		       a9 80		      lda	#%10000000	;CXP0FB bit 7 detects P0 and PF collision
    314  f203		       24 02		      bit	CXP0FB	;checks CXP0FB with the abover pattern
    315  f205		       d0 06		      bne	CollisionP0PF
    316  f207		       4c 10 f2 	      jmp	EndCollisionCheck
    317  f20a
    318  f20a				   CollisionP0P1
    319  f20a		       20 29 f2 	      jsr	GameOver	;game over
    320  f20d
    321  f20d				   CollisionP0PF
    322  f20d		       20 29 f2 	      jsr	GameOver
    323  f210
    324  f210				   EndCollisionCheck		;collision check fallback
    325  f210		       85 2c		      sta	CXCLR
    326  f212
    327  f212							;loop new frame
    328  f212		       4c 44 f0 	      jmp	StartFrame
    329  f215
    330  f215							;subroutine to handle sprite X offset----------------------------------------------------------
    331  f215							;A is the target offset position,
    332  f215							;Y is the object type (0: Player0 1: Player1 2: missile0 3: missile1 4: ball)
    333  f215				   SetObjectXPos subroutine
    334  f215		       85 02		      sta	WSYNC	;wait for fresh scanline
    335  f217		       38		      sec		;carry flag for subtraction
    336  f218				   DivideLoop
    337  f218		       e9 0f		      sbc	#15	;subtract 15 from acc
    338  f21a		       b0 fc		      bcs	DivideLoop	;loop until carry flag is clear
    339  f21c		       49 07		      eor	#7	;adjust remainder to -8 to 7
    340  f21e		       0a		      asl
    341  f21f		       0a		      asl
    342  f220		       0a		      asl
    343  f221		       0a		      asl		;four left shifts as HMP0 only targets the top 4 bits
    344  f222		       99 20 00 	      sta	HMP0,Y	;store the fine offset
    345  f225		       99 10 00 	      sta	RESP0,Y	;fix object in 15 step intervals
    346  f228		       60		      rts
    347  f229
    348  f229							;Game over Subroutine-------------------------------------------------------------------------
    349  f229				   GameOver   subroutine
    350  f229		       a9 30		      lda	#$30
    351  f22b		       85 09		      sta	COLUBK
    352  f22d		       60		      rts
    353  f22e
    354  f22e							;subroutine to generate Linear Feedback Shift Register random number--------------------------
    355  f22e							;generate a random number
    356  f22e							;divide the random by 4 to match river width
    357  f22e							;add 30 to compensate for left playfield
    358  f22e				   GetRandomBomberPosition subroutine
    359  f22e		       a5 8d		      lda	Random
    360  f230		       0a		      asl
    361  f231		       45 8d		      eor	Random
    362  f233		       0a		      asl
    363  f234		       45 8d		      eor	Random
    364  f236		       0a		      asl
    365  f237		       0a		      asl
    366  f238		       45 8d		      eor	Random
    367  f23a		       0a		      asl
    368  f23b		       26 8d		      rol	Random	; performs a series of shifts and bit operations
    369  f23d
    370  f23d		       4a		      lsr
    371  f23e		       4a		      lsr		; divide the value by 4 with 2 right shifts
    372  f23f		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    373  f241		       a9 1e		      lda	#30
    374  f243		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    375  f245		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    376  f247
    377  f247		       a9 60		      lda	#96
    378  f249		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    379  f24b
    380  f24b		       60		      rts
    381  f24c
    382  f24c							;Subroutine to handle scoreboard digits---------------------------------------------------------------------
    383  f24c							;convert the top and bottom nybbles into the score and timer offset
    384  f24c							;each digit is 5 bytes tall
    385  f24c							;for low nybble multiplication of 5 is required
    386  f24c							;left shift to multiply by two
    387  f24c							;right shift to divide
    388  f24c
    389  f24c				   CalculateDigitOffset subroutine
    390  f24c		       a2 01		      ldx	#1	;loop counter
    391  f24e				   PrepareScoreLoop		;loop twice, first 1 then 0
    392  f24e		       b5 90		      lda	Score,X	;Score + 1 = timer
    393  f250		       29 0f		      and	#$0F	;remove the tens digit by masking 4 bits
    394  f252		       85 92		      sta	Temp	;Save the value in a temporary variable
    395  f254		       0a		      asl		;shift left twice and add N for multiplication by 5
    396  f255		       0a		      asl
    397  f256		       65 92		      adc	Temp
    398  f258		       95 93		      sta	OnesDigitOffset,X
    399  f25a
    400  f25a		       b5 90		      lda	Score,X
    401  f25c		       29 f0		      and	#$F0
    402  f25e		       4a		      lsr
    403  f25f		       4a		      lsr
    404  f260		       85 92		      sta	Temp
    405  f262		       4a		      lsr
    406  f263		       4a		      lsr
    407  f264		       65 92		      adc	Temp
    408  f266		       95 95		      sta	TensDigitOffset,X
    409  f268
    410  f268		       ca		      dex
    411  f269		       10 e3		      bpl	PrepareScoreLoop	;to prepare score loop
    412  f26b		       60		      rts
    413  f26c
    414  f26c				   Sleep12Cycles subroutine
    415  f26c		       60		      rts
    416  f26d
    417  f26d							;ROM lookup tables-----------------------------------------------------------------------
    418  f26d				   JetSprite
    419  f26d		       00		      .byte.b	#%00000000
    420  f26e		       54		      .byte.b	#%01010100	;$1E
    421  f26f		       54		      .byte.b	#%01010100	;$40
    422  f270		       7c		      .byte.b	#%01111100	;$40
    423  f271		       38		      .byte.b	#%00111000	;$40
    424  f272		       38		      .byte.b	#%00111000	;$40
    425  f273		       38		      .byte.b	#%00111000	;$40
    426  f274		       10		      .byte.b	#%00010000	;$40
    427  f275		       10		      .byte.b	#%00010000	;$40
    428  f276
    429  f276
    430  f276				   JetSpriteTurn
    431  f276		       00		      .byte.b	#%00000000	;$1E
    432  f277		       28		      .byte.b	#%00101000	;$1E
    433  f278		       38		      .byte.b	#%00111000	;$40
    434  f279		       38		      .byte.b	#%00111000	;$40
    435  f27a		       10		      .byte.b	#%00010000	;$40
    436  f27b		       10		      .byte.b	#%00010000	;$40
    437  f27c		       10		      .byte.b	#%00010000	;$40
    438  f27d		       10		      .byte.b	#%00010000	;$40
    439  f27e
    440  f27e				   BomberSprite
    441  f27e		       00		      .byte.b	#%00000000
    442  f27f		       00		      .byte.b	#%00000000
    443  f280		       08		      .byte.b	#%00001000
    444  f281		       14		      .byte.b	#%00010100
    445  f282		       2a		      .byte.b	#%00101010
    446  f283		       2a		      .byte.b	#%00101010
    447  f284		       7f		      .byte.b	#%01111111
    448  f285		       49		      .byte.b	#%01001001
    449  f286		       49		      .byte.b	#%01001001
    450  f287
    451  f287				   JetColour
    452  f287		       00		      .byte.b	#$00
    453  f288		       1e		      .byte.b	#$1E
    454  f289		       40		      .byte.b	#$40
    455  f28a		       40		      .byte.b	#$40
    456  f28b		       40		      .byte.b	#$40
    457  f28c		       40		      .byte.b	#$40
    458  f28d		       40		      .byte.b	#$40
    459  f28e		       40		      .byte.b	#$40
    460  f28f		       40		      .byte.b	#$40
    461  f290
    462  f290				   JetTurnColour
    463  f290		       1e		      .byte.b	#$1E	;
    464  f291		       1e		      .byte.b	#$1E	;
    465  f292		       40		      .byte.b	#$40	;
    466  f293		       40		      .byte.b	#$40	;
    467  f294		       40		      .byte.b	#$40	;
    468  f295		       40		      .byte.b	#$40	;
    469  f296		       40		      .byte.b	#$40	;
    470  f297		       40		      .byte.b	#$40	;
    471  f298		       40		      .byte.b	#$40	;
    472  f299
    473  f299				   BomberColour
    474  f299		       00		      .byte.b	#$00
    475  f29a		       00		      .byte.b	#$00
    476  f29b		       ff		      .byte.b	#$FF
    477  f29c		       ff		      .byte.b	#$FF
    478  f29d		       40		      .byte.b	#$40
    479  f29e		       40		      .byte.b	#$40
    480  f29f		       40		      .byte.b	#$40
    481  f2a0		       40		      .byte.b	#$40
    482  f2a1		       0f		      .byte.b	#$0F
    483  f2a2
    484  f2a2				   Digits
    485  f2a2		       77		      .byte.b	%01110111	; ### ###
    486  f2a3		       55		      .byte.b	%01010101	; # # # #
    487  f2a4		       55		      .byte.b	%01010101	; # # # #
    488  f2a5		       55		      .byte.b	%01010101	; # # # #
    489  f2a6		       77		      .byte.b	%01110111	; ### ###
    490  f2a7
    491  f2a7		       11		      .byte.b	%00010001	;   #	 #
    492  f2a8		       11		      .byte.b	%00010001	;   #	 #
    493  f2a9		       11		      .byte.b	%00010001	;   #	 #
    494  f2aa		       11		      .byte.b	%00010001	;   #	 #
    495  f2ab		       11		      .byte.b	%00010001	;   #	 #
    496  f2ac
    497  f2ac		       77		      .byte.b	%01110111	; ### ###
    498  f2ad		       11		      .byte.b	%00010001	;   #	 #
    499  f2ae		       77		      .byte.b	%01110111	; ### ###
    500  f2af		       44		      .byte.b	%01000100	; #   #
    501  f2b0		       77		      .byte.b	%01110111	; ### ###
    502  f2b1
    503  f2b1		       77		      .byte.b	%01110111	; ### ###
    504  f2b2		       11		      .byte.b	%00010001	;   #	 #
    505  f2b3		       33		      .byte.b	%00110011	;  ##	##
    506  f2b4		       11		      .byte.b	%00010001	;   #	 #
    507  f2b5		       77		      .byte.b	%01110111	; ### ###
    508  f2b6
    509  f2b6		       55		      .byte.b	%01010101	; # # # #
    510  f2b7		       55		      .byte.b	%01010101	; # # # #
    511  f2b8		       77		      .byte.b	%01110111	; ### ###
    512  f2b9		       11		      .byte.b	%00010001	;   #	 #
    513  f2ba		       11		      .byte.b	%00010001	;   #	 #
    514  f2bb
    515  f2bb		       77		      .byte.b	%01110111	; ### ###
    516  f2bc		       44		      .byte.b	%01000100	; #   #
    517  f2bd		       77		      .byte.b	%01110111	; ### ###
    518  f2be		       11		      .byte.b	%00010001	;   #	 #
    519  f2bf		       77		      .byte.b	%01110111	; ### ###
    520  f2c0
    521  f2c0		       77		      .byte.b	%01110111	; ### ###
    522  f2c1		       44		      .byte.b	%01000100	; #   #
    523  f2c2		       77		      .byte.b	%01110111	; ### ###
    524  f2c3		       55		      .byte.b	%01010101	; # # # #
    525  f2c4		       77		      .byte.b	%01110111	; ### ###
    526  f2c5
    527  f2c5		       77		      .byte.b	%01110111	; ### ###
    528  f2c6		       11		      .byte.b	%00010001	;   #	 #
    529  f2c7		       11		      .byte.b	%00010001	;   #	 #
    530  f2c8		       11		      .byte.b	%00010001	;   #	 #
    531  f2c9		       11		      .byte.b	%00010001	;   #	 #
    532  f2ca
    533  f2ca		       77		      .byte.b	%01110111	; ### ###
    534  f2cb		       55		      .byte.b	%01010101	; # # # #
    535  f2cc		       77		      .byte.b	%01110111	; ### ###
    536  f2cd		       55		      .byte.b	%01010101	; # # # #
    537  f2ce		       77		      .byte.b	%01110111	; ### ###
    538  f2cf
    539  f2cf		       77		      .byte.b	%01110111	; ### ###
    540  f2d0		       55		      .byte.b	%01010101	; # # # #
    541  f2d1		       77		      .byte.b	%01110111	; ### ###
    542  f2d2		       11		      .byte.b	%00010001	;   #	 #
    543  f2d3		       77		      .byte.b	%01110111	; ### ###
    544  f2d4
    545  f2d4		       22		      .byte.b	%00100010	;  #	#
    546  f2d5		       55		      .byte.b	%01010101	; # # # #
    547  f2d6		       77		      .byte.b	%01110111	; ### ###
    548  f2d7		       55		      .byte.b	%01010101	; # # # #
    549  f2d8		       55		      .byte.b	%01010101	; # # # #
    550  f2d9
    551  f2d9		       77		      .byte.b	%01110111	; ### ###
    552  f2da		       55		      .byte.b	%01010101	; # # # #
    553  f2db		       66		      .byte.b	%01100110	; ##  ##
    554  f2dc		       55		      .byte.b	%01010101	; # # # #
    555  f2dd		       77		      .byte.b	%01110111	; ### ###
    556  f2de
    557  f2de		       77		      .byte.b	%01110111	; ### ###
    558  f2df		       44		      .byte.b	%01000100	; #   #
    559  f2e0		       44		      .byte.b	%01000100	; #   #
    560  f2e1		       44		      .byte.b	%01000100	; #   #
    561  f2e2		       77		      .byte.b	%01110111	; ### ###
    562  f2e3
    563  f2e3		       66		      .byte.b	%01100110	; ##  ##
    564  f2e4		       55		      .byte.b	%01010101	; # # # #
    565  f2e5		       55		      .byte.b	%01010101	; # # # #
    566  f2e6		       55		      .byte.b	%01010101	; # # # #
    567  f2e7		       66		      .byte.b	%01100110	; ##  ##
    568  f2e8
    569  f2e8		       77		      .byte.b	%01110111	; ### ###
    570  f2e9		       44		      .byte.b	%01000100	; #   #
    571  f2ea		       77		      .byte.b	%01110111	; ### ###
    572  f2eb		       44		      .byte.b	%01000100	; #   #
    573  f2ec		       77		      .byte.b	%01110111	; ### ###
    574  f2ed
    575  f2ed		       77		      .byte.b	%01110111	; ### ###
    576  f2ee		       44		      .byte.b	%01000100	; #   #
    577  f2ef		       66		      .byte.b	%01100110	; ##  ##
    578  f2f0		       44		      .byte.b	%01000100	; #   #
    579  f2f1		       44		      .byte.b	%01000100	; #   #
    580  f2f2
    581  f2f2							;end of ROM------------------------------------------------------------------
    582  fffc					      org	$FFFC
    583  fffc		       00 f0		      .word.w	reset
    584  fffe		       00 f0		      .word.w	reset
