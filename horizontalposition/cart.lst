------- FILE horizontalposition.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE horizontalposition.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE horizontalposition.asm
      5  0000 ????
      6  0000 ????						;uninitialized segment for variables
      7 U0081 ????				      seg.u	variables
      8 U0080					      org	$80
      9 U0080		       00	   P0XPos     byte.b		;Player 0 X coordinate variable
     10 U0081
     11  10000 ????				       seg	code
     12  f000					      org	$F000
     13  f000
     14  f000				   reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     16  f00a
     17  f00a		       a2 00		      ldx	#$00	;black background colour
     18  f00c		       86 09		      stx	COLUBK
     19  f00e
     20  f00e							;initialize variables
     21  f00e		       a9 32		      lda	#50
     22  f010		       85 80		      sta	P0XPos
     23  f012
     24  f012
     25  f012				   StartFrame
     26  f012							;configure VSYNC and VBLANK
     27  f012		       a9 02		      lda	#2
     28  f014		       85 00		      sta	VSYNC
     29  f016		       85 01		      sta	VBLANK
     30  f018
     31  f018							;generate 3 lines of VSYNC
     32  f018					      REPEAT	3
     33  f018		       85 02		      sta	WSYNC
     32  f018					      REPEND
     33  f01a		       85 02		      sta	WSYNC
     32  f01a					      REPEND
     33  f01c		       85 02		      sta	WSYNC
     34  f01e					      REPEND
     35  f01e
     36  f01e		       a9 00		      lda	#0
     37  f020		       85 00		      sta	VSYNC	;turn VSYNC off
     38  f022
     39  f022							;set player 0 horizontal position during VBLANK
     40  f022		       a5 80		      lda	P0XPos	;load a with desired X position
     41  f024		       29 7f		      and	#$7F	;forces bit 8 to 0 making a an unsigned integer (always positive)
     42  f026
     43  f026		       85 02		      sta	WSYNC	;wait for fresh scanline
     44  f028		       85 2b		      sta	HMCLR	;clears old Horizontal position values
     45  f02a
     46  f02a		       38		      sec		;set carry flag before subtraction
     47  f02b				   DivideLoop
     48  f02b		       e9 0f		      sbc	#15	;subtract 15 from A
     49  f02d		       b0 fc		      bcs	DivideLoop	;loop while carry flag is still set
     50  f02f
     51  f02f		       49 07		      eor	#7	;adjust the remainder to between -8 and 7
     52  f031		       0a		      asl		;shift left by 4 bits (HMP0 only uses the top 4 bits)
     53  f032		       0a		      asl
     54  f033		       0a		      asl
     55  f034		       0a		      asl
     56  f035		       85 20		      sta	HMP0	;set fine position
     57  f037		       85 10		      sta	RESP0	;reset x15 rough position
     58  f039		       85 02		      sta	WSYNC	;wait for new scanline
     59  f03b		       85 2a		      sta	HMOVE	;apply new fine position offset
     60  f03d
     61  f03d							;generate 37(-2) VBLANK lines (2 scanlines were wasted due to the 2 WSYNC instructions used)
     62  f03d					      REPEAT	35
     63  f03d		       85 01		      sta	VBLANK
     62  f03d					      REPEND
     63  f03f		       85 01		      sta	VBLANK
     62  f03f					      REPEND
     63  f041		       85 01		      sta	VBLANK
     62  f041					      REPEND
     63  f043		       85 01		      sta	VBLANK
     62  f043					      REPEND
     63  f045		       85 01		      sta	VBLANK
     62  f045					      REPEND
     63  f047		       85 01		      sta	VBLANK
     62  f047					      REPEND
     63  f049		       85 01		      sta	VBLANK
     62  f049					      REPEND
     63  f04b		       85 01		      sta	VBLANK
     62  f04b					      REPEND
     63  f04d		       85 01		      sta	VBLANK
     62  f04d					      REPEND
     63  f04f		       85 01		      sta	VBLANK
     62  f04f					      REPEND
     63  f051		       85 01		      sta	VBLANK
     62  f051					      REPEND
     63  f053		       85 01		      sta	VBLANK
     62  f053					      REPEND
     63  f055		       85 01		      sta	VBLANK
     62  f055					      REPEND
     63  f057		       85 01		      sta	VBLANK
     62  f057					      REPEND
     63  f059		       85 01		      sta	VBLANK
     62  f059					      REPEND
     63  f05b		       85 01		      sta	VBLANK
     62  f05b					      REPEND
     63  f05d		       85 01		      sta	VBLANK
     62  f05d					      REPEND
     63  f05f		       85 01		      sta	VBLANK
     62  f05f					      REPEND
     63  f061		       85 01		      sta	VBLANK
     62  f061					      REPEND
     63  f063		       85 01		      sta	VBLANK
     62  f063					      REPEND
     63  f065		       85 01		      sta	VBLANK
     62  f065					      REPEND
     63  f067		       85 01		      sta	VBLANK
     62  f067					      REPEND
     63  f069		       85 01		      sta	VBLANK
     62  f069					      REPEND
     63  f06b		       85 01		      sta	VBLANK
     62  f06b					      REPEND
     63  f06d		       85 01		      sta	VBLANK
     62  f06d					      REPEND
     63  f06f		       85 01		      sta	VBLANK
     62  f06f					      REPEND
     63  f071		       85 01		      sta	VBLANK
     62  f071					      REPEND
     63  f073		       85 01		      sta	VBLANK
     62  f073					      REPEND
     63  f075		       85 01		      sta	VBLANK
     62  f075					      REPEND
     63  f077		       85 01		      sta	VBLANK
     62  f077					      REPEND
     63  f079		       85 01		      sta	VBLANK
     62  f079					      REPEND
     63  f07b		       85 01		      sta	VBLANK
     62  f07b					      REPEND
     63  f07d		       85 01		      sta	VBLANK
     62  f07d					      REPEND
     63  f07f		       85 01		      sta	VBLANK
     62  f07f					      REPEND
     63  f081		       85 01		      sta	VBLANK
     64  f083					      REPEND
     65  f083
     66  f083		       a9 00		      lda	#0
     67  f085		       85 01		      sta	VBLANK
     68  f087
     69  f087							;draw 192 visible scanlines
     70  f087					      REPEAT	60
     71  f087		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f087					      REPEND
     71  f089		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f089					      REPEND
     71  f08b		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f08b					      REPEND
     71  f08d		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f08d					      REPEND
     71  f08f		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f08f					      REPEND
     71  f091		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f091					      REPEND
     71  f093		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f093					      REPEND
     71  f095		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f095					      REPEND
     71  f097		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f097					      REPEND
     71  f099		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f099					      REPEND
     71  f09b		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f09b					      REPEND
     71  f09d		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f09d					      REPEND
     71  f09f		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f09f					      REPEND
     71  f0a1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0a1					      REPEND
     71  f0a3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0a3					      REPEND
     71  f0a5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0a5					      REPEND
     71  f0a7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0a7					      REPEND
     71  f0a9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0a9					      REPEND
     71  f0ab		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0ab					      REPEND
     71  f0ad		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0ad					      REPEND
     71  f0af		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0af					      REPEND
     71  f0b1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0b1					      REPEND
     71  f0b3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0b3					      REPEND
     71  f0b5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0b5					      REPEND
     71  f0b7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0b7					      REPEND
     71  f0b9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0b9					      REPEND
     71  f0bb		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0bb					      REPEND
     71  f0bd		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0bd					      REPEND
     71  f0bf		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0bf					      REPEND
     71  f0c1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0c1					      REPEND
     71  f0c3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0c3					      REPEND
     71  f0c5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0c5					      REPEND
     71  f0c7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0c7					      REPEND
     71  f0c9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0c9					      REPEND
     71  f0cb		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0cb					      REPEND
     71  f0cd		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0cd					      REPEND
     71  f0cf		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0cf					      REPEND
     71  f0d1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0d1					      REPEND
     71  f0d3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0d3					      REPEND
     71  f0d5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0d5					      REPEND
     71  f0d7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0d7					      REPEND
     71  f0d9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0d9					      REPEND
     71  f0db		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0db					      REPEND
     71  f0dd		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0dd					      REPEND
     71  f0df		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0df					      REPEND
     71  f0e1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0e1					      REPEND
     71  f0e3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0e3					      REPEND
     71  f0e5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0e5					      REPEND
     71  f0e7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0e7					      REPEND
     71  f0e9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0e9					      REPEND
     71  f0eb		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0eb					      REPEND
     71  f0ed		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0ed					      REPEND
     71  f0ef		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0ef					      REPEND
     71  f0f1		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0f1					      REPEND
     71  f0f3		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0f3					      REPEND
     71  f0f5		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0f5					      REPEND
     71  f0f7		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0f7					      REPEND
     71  f0f9		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0f9					      REPEND
     71  f0fb		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     70  f0fb					      REPEND
     71  f0fd		       85 02		      sta	WSYNC	;wait for 60 empty scanlines
     72  f0ff					      REPEND
     73  f0ff
     74  f0ff		       a0 08		      ldy	#8	;counter to draw 8 bitmap rows
     75  f101				   DrawBitmap
     76  f101		       b9 55 f2 	      lda	P0Bitmap,Y	;load slice of bitmap
     77  f104		       85 1b		      sta	GRP0	;set graphics for player 0
     78  f106
     79  f106		       b9 5d f2 	      lda	P0Colour,Y
     80  f109		       85 06		      sta	COLUP0	;set colour for player 0
     81  f10b
     82  f10b		       85 02		      sta	WSYNC	;wait for next scanline
     83  f10d
     84  f10d		       88		      dey
     85  f10e		       d0 f1		      bne	DrawBitmap	;repeat next scanline until finished
     86  f110
     87  f110		       a9 00		      lda	#0
     88  f112		       85 1b		      sta	GRP0	;disable player 0 graphics
     89  f114
     90  f114					      REPEAT	124
     91  f114		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f114					      REPEND
     91  f116		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f116					      REPEND
     91  f118		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f118					      REPEND
     91  f11a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f11a					      REPEND
     91  f11c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f11c					      REPEND
     91  f11e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f11e					      REPEND
     91  f120		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f120					      REPEND
     91  f122		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f122					      REPEND
     91  f124		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f124					      REPEND
     91  f126		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f126					      REPEND
     91  f128		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f128					      REPEND
     91  f12a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f12a					      REPEND
     91  f12c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f12c					      REPEND
     91  f12e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f12e					      REPEND
     91  f130		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f130					      REPEND
     91  f132		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f132					      REPEND
     91  f134		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f134					      REPEND
     91  f136		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f136					      REPEND
     91  f138		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f138					      REPEND
     91  f13a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f13a					      REPEND
     91  f13c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f13c					      REPEND
     91  f13e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f13e					      REPEND
     91  f140		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f140					      REPEND
     91  f142		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f142					      REPEND
     91  f144		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f144					      REPEND
     91  f146		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f146					      REPEND
     91  f148		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f148					      REPEND
     91  f14a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f14a					      REPEND
     91  f14c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f14c					      REPEND
     91  f14e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f14e					      REPEND
     91  f150		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f150					      REPEND
     91  f152		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f152					      REPEND
     91  f154		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f154					      REPEND
     91  f156		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f156					      REPEND
     91  f158		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f158					      REPEND
     91  f15a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f15a					      REPEND
     91  f15c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f15c					      REPEND
     91  f15e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f15e					      REPEND
     91  f160		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f160					      REPEND
     91  f162		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f162					      REPEND
     91  f164		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f164					      REPEND
     91  f166		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f166					      REPEND
     91  f168		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f168					      REPEND
     91  f16a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f16a					      REPEND
     91  f16c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f16c					      REPEND
     91  f16e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f16e					      REPEND
     91  f170		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f170					      REPEND
     91  f172		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f172					      REPEND
     91  f174		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f174					      REPEND
     91  f176		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f176					      REPEND
     91  f178		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f178					      REPEND
     91  f17a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f17a					      REPEND
     91  f17c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f17c					      REPEND
     91  f17e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f17e					      REPEND
     91  f180		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f180					      REPEND
     91  f182		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f182					      REPEND
     91  f184		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f184					      REPEND
     91  f186		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f186					      REPEND
     91  f188		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f188					      REPEND
     91  f18a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f18a					      REPEND
     91  f18c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f18c					      REPEND
     91  f18e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f18e					      REPEND
     91  f190		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f190					      REPEND
     91  f192		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f192					      REPEND
     91  f194		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f194					      REPEND
     91  f196		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f196					      REPEND
     91  f198		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f198					      REPEND
     91  f19a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f19a					      REPEND
     91  f19c		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f19c					      REPEND
     91  f19e		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f19e					      REPEND
     91  f1a0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1a0					      REPEND
     91  f1a2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1a2					      REPEND
     91  f1a4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1a4					      REPEND
     91  f1a6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1a6					      REPEND
     91  f1a8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1a8					      REPEND
     91  f1aa		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1aa					      REPEND
     91  f1ac		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ac					      REPEND
     91  f1ae		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ae					      REPEND
     91  f1b0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1b0					      REPEND
     91  f1b2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1b2					      REPEND
     91  f1b4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1b4					      REPEND
     91  f1b6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1b6					      REPEND
     91  f1b8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1b8					      REPEND
     91  f1ba		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ba					      REPEND
     91  f1bc		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1bc					      REPEND
     91  f1be		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1be					      REPEND
     91  f1c0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1c0					      REPEND
     91  f1c2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1c2					      REPEND
     91  f1c4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1c4					      REPEND
     91  f1c6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1c6					      REPEND
     91  f1c8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1c8					      REPEND
     91  f1ca		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ca					      REPEND
     91  f1cc		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1cc					      REPEND
     91  f1ce		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ce					      REPEND
     91  f1d0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1d0					      REPEND
     91  f1d2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1d2					      REPEND
     91  f1d4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1d4					      REPEND
     91  f1d6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1d6					      REPEND
     91  f1d8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1d8					      REPEND
     91  f1da		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1da					      REPEND
     91  f1dc		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1dc					      REPEND
     91  f1de		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1de					      REPEND
     91  f1e0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1e0					      REPEND
     91  f1e2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1e2					      REPEND
     91  f1e4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1e4					      REPEND
     91  f1e6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1e6					      REPEND
     91  f1e8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1e8					      REPEND
     91  f1ea		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ea					      REPEND
     91  f1ec		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ec					      REPEND
     91  f1ee		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1ee					      REPEND
     91  f1f0		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1f0					      REPEND
     91  f1f2		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1f2					      REPEND
     91  f1f4		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1f4					      REPEND
     91  f1f6		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1f6					      REPEND
     91  f1f8		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1f8					      REPEND
     91  f1fa		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1fa					      REPEND
     91  f1fc		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1fc					      REPEND
     91  f1fe		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f1fe					      REPEND
     91  f200		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f200					      REPEND
     91  f202		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f202					      REPEND
     91  f204		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f204					      REPEND
     91  f206		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f206					      REPEND
     91  f208		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     90  f208					      REPEND
     91  f20a		       85 02		      sta	WSYNC	;wait for the remaining 124 scanlines
     92  f20c					      REPEND
     93  f20c
     94  f20c							;draw 30 lines of overscan
     95  f20c		       a9 02		      lda	#2
     96  f20e		       85 01		      sta	VBLANK
     97  f210
     98  f210					      REPEAT	30
     99  f210		       85 02		      sta	WSYNC
     98  f210					      REPEND
     99  f212		       85 02		      sta	WSYNC
     98  f212					      REPEND
     99  f214		       85 02		      sta	WSYNC
     98  f214					      REPEND
     99  f216		       85 02		      sta	WSYNC
     98  f216					      REPEND
     99  f218		       85 02		      sta	WSYNC
     98  f218					      REPEND
     99  f21a		       85 02		      sta	WSYNC
     98  f21a					      REPEND
     99  f21c		       85 02		      sta	WSYNC
     98  f21c					      REPEND
     99  f21e		       85 02		      sta	WSYNC
     98  f21e					      REPEND
     99  f220		       85 02		      sta	WSYNC
     98  f220					      REPEND
     99  f222		       85 02		      sta	WSYNC
     98  f222					      REPEND
     99  f224		       85 02		      sta	WSYNC
     98  f224					      REPEND
     99  f226		       85 02		      sta	WSYNC
     98  f226					      REPEND
     99  f228		       85 02		      sta	WSYNC
     98  f228					      REPEND
     99  f22a		       85 02		      sta	WSYNC
     98  f22a					      REPEND
     99  f22c		       85 02		      sta	WSYNC
     98  f22c					      REPEND
     99  f22e		       85 02		      sta	WSYNC
     98  f22e					      REPEND
     99  f230		       85 02		      sta	WSYNC
     98  f230					      REPEND
     99  f232		       85 02		      sta	WSYNC
     98  f232					      REPEND
     99  f234		       85 02		      sta	WSYNC
     98  f234					      REPEND
     99  f236		       85 02		      sta	WSYNC
     98  f236					      REPEND
     99  f238		       85 02		      sta	WSYNC
     98  f238					      REPEND
     99  f23a		       85 02		      sta	WSYNC
     98  f23a					      REPEND
     99  f23c		       85 02		      sta	WSYNC
     98  f23c					      REPEND
     99  f23e		       85 02		      sta	WSYNC
     98  f23e					      REPEND
     99  f240		       85 02		      sta	WSYNC
     98  f240					      REPEND
     99  f242		       85 02		      sta	WSYNC
     98  f242					      REPEND
     99  f244		       85 02		      sta	WSYNC
     98  f244					      REPEND
     99  f246		       85 02		      sta	WSYNC
     98  f246					      REPEND
     99  f248		       85 02		      sta	WSYNC
     98  f248					      REPEND
     99  f24a		       85 02		      sta	WSYNC
    100  f24c					      REPEND
    101  f24c
    102  f24c		       a9 00		      lda	#0
    103  f24e		       85 01		      sta	VBLANK
    104  f250
    105  f250							;increment X coordinate for sweeping animation
    106  f250		       e6 80		      inc	P0XPos
    107  f252
    108  f252							;loop next frame
    109  f252		       4c 12 f0 	      jmp	StartFrame
    110  f255
    111  f255							;player graphics bitmap
    112  f255
    113  f255				   P0Bitmap
    114  f255		       00		      .byte.b	#%00000000
    115  f256		       10		      .byte.b	#%00010000
    116  f257		       08		      .byte.b	#%00001000
    117  f258		       1c		      .byte.b	#%00011100
    118  f259		       36		      .byte.b	#%00110110
    119  f25a		       2e		      .byte.b	#%00101110
    120  f25b		       3e		      .byte.b	#%00111110
    121  f25c		       1c		      .byte.b	#%00011100
    122  f25d
    123  f25d				   P0Colour
    124  f25d		       00		      .byte.b	#$00
    125  f25e		       02		      .byte.b	#$02
    126  f25f		       02		      .byte.b	#$02
    127  f260		       52		      .byte.b	#$52
    128  f261		       52		      .byte.b	#$52
    129  f262		       52		      .byte.b	#$52
    130  f263		       52		      .byte.b	#$52
    131  f264		       52		      .byte.b	#$52
    132  f265
    133  f265							;end of rom
    134  fffc					      org	$FFFC
    135  fffc		       00 f0		      .word.w	reset
    136  fffe		       00 f0		      .word.w	reset
