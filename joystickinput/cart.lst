------- FILE joystickinput.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE joystickinput.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE joystickinput.asm
      5  0000 ????
      6  0000 ????						;uninitialized segment for variables
      7 U0081 ????				      seg.u	variables
      8 U0080					      org	$80
      9 U0080		       00	   P0XPos     byte.b		;Player 0 X position
     10 U0081
     11  10000 ????				       seg	code
     12  f000					      org	$F000
     13  f000
     14  f000				   reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     16  f00a
     17  f00a		       a9 80		      lda	#$80
     18  f00c		       85 09		      sta	COLUBK	;blue background
     19  f00e
     20  f00e		       a9 c3		      lda	#$C3
     21  f010		       85 08		      sta	COLUPF	;green playfield
     22  f012
     23  f012							;initialize variables
     24  f012		       a9 0a		      lda	#10
     25  f014		       85 80		      sta	P0XPos
     26  f016
     27  f016				   StartFrame
     28  f016							;start VSYNC and VBLANK
     29  f016		       a9 02		      lda	#2
     30  f018		       85 00		      sta	VSYNC
     31  f01a		       85 01		      sta	VBLANK
     32  f01c
     33  f01c							;generate 3 lines of VSYNC
     34  f01c					      REPEAT	3
     35  f01c		       85 02		      sta	WSYNC
     34  f01c					      REPEND
     35  f01e		       85 02		      sta	WSYNC
     34  f01e					      REPEND
     35  f020		       85 02		      sta	WSYNC
     36  f022					      REPEND
     37  f022
     38  f022		       a9 00		      lda	#0
     39  f024		       85 00		      sta	VSYNC	;turn off VSYNC
     40  f026
     41  f026							;set horizontal position while in VBLANK
     42  f026		       a5 80		      lda	P0XPos	;load a with desired X position
     43  f028		       29 7f		      and	#$7F	;force bit 8 off to make an unsigned integer
     44  f02a
     45  f02a		       85 02		      sta	WSYNC	;wait for a new scanline
     46  f02c		       85 2b		      sta	HMCLR	;clear any previous horizontal positioning
     47  f02e
     48  f02e		       38		      sec		;set carry flag
     49  f02f				   DivLoop
     50  f02f		       e9 0f		      sbc	#15	;subtract 15 from a
     51  f031		       b0 fc		      bcs	DivLoop	;loop while carry flag is still set
     52  f033
     53  f033		       49 07		      eor	#7	;adjust remainder to a range of -8 to 7
     54  f035		       0a		      asl		;shift the result left by 4 bits (HMP0 only uses the top 4 bits)
     55  f036		       0a		      asl
     56  f037		       0a		      asl
     57  f038		       0a		      asl
     58  f039		       85 20		      sta	HMP0	;set fine position
     59  f03b		       85 10		      sta	RESP0	;set rough position
     60  f03d		       85 02		      sta	WSYNC	;wait for a new scanline
     61  f03f		       85 2a		      sta	HMOVE	;apply new fine offset
     62  f041
     63  f041							;draw 35 (subtract previous used scanlines during horizontal position) VBLANK lines
     64  f041					      REPEAT	35
     65  f041		       85 02		      sta	WSYNC
     64  f041					      REPEND
     65  f043		       85 02		      sta	WSYNC
     64  f043					      REPEND
     65  f045		       85 02		      sta	WSYNC
     64  f045					      REPEND
     65  f047		       85 02		      sta	WSYNC
     64  f047					      REPEND
     65  f049		       85 02		      sta	WSYNC
     64  f049					      REPEND
     65  f04b		       85 02		      sta	WSYNC
     64  f04b					      REPEND
     65  f04d		       85 02		      sta	WSYNC
     64  f04d					      REPEND
     65  f04f		       85 02		      sta	WSYNC
     64  f04f					      REPEND
     65  f051		       85 02		      sta	WSYNC
     64  f051					      REPEND
     65  f053		       85 02		      sta	WSYNC
     64  f053					      REPEND
     65  f055		       85 02		      sta	WSYNC
     64  f055					      REPEND
     65  f057		       85 02		      sta	WSYNC
     64  f057					      REPEND
     65  f059		       85 02		      sta	WSYNC
     64  f059					      REPEND
     65  f05b		       85 02		      sta	WSYNC
     64  f05b					      REPEND
     65  f05d		       85 02		      sta	WSYNC
     64  f05d					      REPEND
     65  f05f		       85 02		      sta	WSYNC
     64  f05f					      REPEND
     65  f061		       85 02		      sta	WSYNC
     64  f061					      REPEND
     65  f063		       85 02		      sta	WSYNC
     64  f063					      REPEND
     65  f065		       85 02		      sta	WSYNC
     64  f065					      REPEND
     65  f067		       85 02		      sta	WSYNC
     64  f067					      REPEND
     65  f069		       85 02		      sta	WSYNC
     64  f069					      REPEND
     65  f06b		       85 02		      sta	WSYNC
     64  f06b					      REPEND
     65  f06d		       85 02		      sta	WSYNC
     64  f06d					      REPEND
     65  f06f		       85 02		      sta	WSYNC
     64  f06f					      REPEND
     65  f071		       85 02		      sta	WSYNC
     64  f071					      REPEND
     65  f073		       85 02		      sta	WSYNC
     64  f073					      REPEND
     65  f075		       85 02		      sta	WSYNC
     64  f075					      REPEND
     65  f077		       85 02		      sta	WSYNC
     64  f077					      REPEND
     65  f079		       85 02		      sta	WSYNC
     64  f079					      REPEND
     65  f07b		       85 02		      sta	WSYNC
     64  f07b					      REPEND
     65  f07d		       85 02		      sta	WSYNC
     64  f07d					      REPEND
     65  f07f		       85 02		      sta	WSYNC
     64  f07f					      REPEND
     65  f081		       85 02		      sta	WSYNC
     64  f081					      REPEND
     65  f083		       85 02		      sta	WSYNC
     64  f083					      REPEND
     65  f085		       85 02		      sta	WSYNC
     66  f087					      REPEND
     67  f087
     68  f087		       a9 00		      lda	#0
     69  f089		       85 01		      sta	VBLANK	;turn VBLANK off
     70  f08b
     71  f08b							;Draw 192 visible scanlines
     72  f08b					      REPEAT	160	;wait 160 lines
     73  f08b		       85 02		      sta	WSYNC
     72  f08b					      REPEND
     73  f08d		       85 02		      sta	WSYNC
     72  f08d					      REPEND
     73  f08f		       85 02		      sta	WSYNC
     72  f08f					      REPEND
     73  f091		       85 02		      sta	WSYNC
     72  f091					      REPEND
     73  f093		       85 02		      sta	WSYNC
     72  f093					      REPEND
     73  f095		       85 02		      sta	WSYNC
     72  f095					      REPEND
     73  f097		       85 02		      sta	WSYNC
     72  f097					      REPEND
     73  f099		       85 02		      sta	WSYNC
     72  f099					      REPEND
     73  f09b		       85 02		      sta	WSYNC
     72  f09b					      REPEND
     73  f09d		       85 02		      sta	WSYNC
     72  f09d					      REPEND
     73  f09f		       85 02		      sta	WSYNC
     72  f09f					      REPEND
     73  f0a1		       85 02		      sta	WSYNC
     72  f0a1					      REPEND
     73  f0a3		       85 02		      sta	WSYNC
     72  f0a3					      REPEND
     73  f0a5		       85 02		      sta	WSYNC
     72  f0a5					      REPEND
     73  f0a7		       85 02		      sta	WSYNC
     72  f0a7					      REPEND
     73  f0a9		       85 02		      sta	WSYNC
     72  f0a9					      REPEND
     73  f0ab		       85 02		      sta	WSYNC
     72  f0ab					      REPEND
     73  f0ad		       85 02		      sta	WSYNC
     72  f0ad					      REPEND
     73  f0af		       85 02		      sta	WSYNC
     72  f0af					      REPEND
     73  f0b1		       85 02		      sta	WSYNC
     72  f0b1					      REPEND
     73  f0b3		       85 02		      sta	WSYNC
     72  f0b3					      REPEND
     73  f0b5		       85 02		      sta	WSYNC
     72  f0b5					      REPEND
     73  f0b7		       85 02		      sta	WSYNC
     72  f0b7					      REPEND
     73  f0b9		       85 02		      sta	WSYNC
     72  f0b9					      REPEND
     73  f0bb		       85 02		      sta	WSYNC
     72  f0bb					      REPEND
     73  f0bd		       85 02		      sta	WSYNC
     72  f0bd					      REPEND
     73  f0bf		       85 02		      sta	WSYNC
     72  f0bf					      REPEND
     73  f0c1		       85 02		      sta	WSYNC
     72  f0c1					      REPEND
     73  f0c3		       85 02		      sta	WSYNC
     72  f0c3					      REPEND
     73  f0c5		       85 02		      sta	WSYNC
     72  f0c5					      REPEND
     73  f0c7		       85 02		      sta	WSYNC
     72  f0c7					      REPEND
     73  f0c9		       85 02		      sta	WSYNC
     72  f0c9					      REPEND
     73  f0cb		       85 02		      sta	WSYNC
     72  f0cb					      REPEND
     73  f0cd		       85 02		      sta	WSYNC
     72  f0cd					      REPEND
     73  f0cf		       85 02		      sta	WSYNC
     72  f0cf					      REPEND
     73  f0d1		       85 02		      sta	WSYNC
     72  f0d1					      REPEND
     73  f0d3		       85 02		      sta	WSYNC
     72  f0d3					      REPEND
     73  f0d5		       85 02		      sta	WSYNC
     72  f0d5					      REPEND
     73  f0d7		       85 02		      sta	WSYNC
     72  f0d7					      REPEND
     73  f0d9		       85 02		      sta	WSYNC
     72  f0d9					      REPEND
     73  f0db		       85 02		      sta	WSYNC
     72  f0db					      REPEND
     73  f0dd		       85 02		      sta	WSYNC
     72  f0dd					      REPEND
     73  f0df		       85 02		      sta	WSYNC
     72  f0df					      REPEND
     73  f0e1		       85 02		      sta	WSYNC
     72  f0e1					      REPEND
     73  f0e3		       85 02		      sta	WSYNC
     72  f0e3					      REPEND
     73  f0e5		       85 02		      sta	WSYNC
     72  f0e5					      REPEND
     73  f0e7		       85 02		      sta	WSYNC
     72  f0e7					      REPEND
     73  f0e9		       85 02		      sta	WSYNC
     72  f0e9					      REPEND
     73  f0eb		       85 02		      sta	WSYNC
     72  f0eb					      REPEND
     73  f0ed		       85 02		      sta	WSYNC
     72  f0ed					      REPEND
     73  f0ef		       85 02		      sta	WSYNC
     72  f0ef					      REPEND
     73  f0f1		       85 02		      sta	WSYNC
     72  f0f1					      REPEND
     73  f0f3		       85 02		      sta	WSYNC
     72  f0f3					      REPEND
     73  f0f5		       85 02		      sta	WSYNC
     72  f0f5					      REPEND
     73  f0f7		       85 02		      sta	WSYNC
     72  f0f7					      REPEND
     73  f0f9		       85 02		      sta	WSYNC
     72  f0f9					      REPEND
     73  f0fb		       85 02		      sta	WSYNC
     72  f0fb					      REPEND
     73  f0fd		       85 02		      sta	WSYNC
     72  f0fd					      REPEND
     73  f0ff		       85 02		      sta	WSYNC
     72  f0ff					      REPEND
     73  f101		       85 02		      sta	WSYNC
     72  f101					      REPEND
     73  f103		       85 02		      sta	WSYNC
     72  f103					      REPEND
     73  f105		       85 02		      sta	WSYNC
     72  f105					      REPEND
     73  f107		       85 02		      sta	WSYNC
     72  f107					      REPEND
     73  f109		       85 02		      sta	WSYNC
     72  f109					      REPEND
     73  f10b		       85 02		      sta	WSYNC
     72  f10b					      REPEND
     73  f10d		       85 02		      sta	WSYNC
     72  f10d					      REPEND
     73  f10f		       85 02		      sta	WSYNC
     72  f10f					      REPEND
     73  f111		       85 02		      sta	WSYNC
     72  f111					      REPEND
     73  f113		       85 02		      sta	WSYNC
     72  f113					      REPEND
     73  f115		       85 02		      sta	WSYNC
     72  f115					      REPEND
     73  f117		       85 02		      sta	WSYNC
     72  f117					      REPEND
     73  f119		       85 02		      sta	WSYNC
     72  f119					      REPEND
     73  f11b		       85 02		      sta	WSYNC
     72  f11b					      REPEND
     73  f11d		       85 02		      sta	WSYNC
     72  f11d					      REPEND
     73  f11f		       85 02		      sta	WSYNC
     72  f11f					      REPEND
     73  f121		       85 02		      sta	WSYNC
     72  f121					      REPEND
     73  f123		       85 02		      sta	WSYNC
     72  f123					      REPEND
     73  f125		       85 02		      sta	WSYNC
     72  f125					      REPEND
     73  f127		       85 02		      sta	WSYNC
     72  f127					      REPEND
     73  f129		       85 02		      sta	WSYNC
     72  f129					      REPEND
     73  f12b		       85 02		      sta	WSYNC
     72  f12b					      REPEND
     73  f12d		       85 02		      sta	WSYNC
     72  f12d					      REPEND
     73  f12f		       85 02		      sta	WSYNC
     72  f12f					      REPEND
     73  f131		       85 02		      sta	WSYNC
     72  f131					      REPEND
     73  f133		       85 02		      sta	WSYNC
     72  f133					      REPEND
     73  f135		       85 02		      sta	WSYNC
     72  f135					      REPEND
     73  f137		       85 02		      sta	WSYNC
     72  f137					      REPEND
     73  f139		       85 02		      sta	WSYNC
     72  f139					      REPEND
     73  f13b		       85 02		      sta	WSYNC
     72  f13b					      REPEND
     73  f13d		       85 02		      sta	WSYNC
     72  f13d					      REPEND
     73  f13f		       85 02		      sta	WSYNC
     72  f13f					      REPEND
     73  f141		       85 02		      sta	WSYNC
     72  f141					      REPEND
     73  f143		       85 02		      sta	WSYNC
     72  f143					      REPEND
     73  f145		       85 02		      sta	WSYNC
     72  f145					      REPEND
     73  f147		       85 02		      sta	WSYNC
     72  f147					      REPEND
     73  f149		       85 02		      sta	WSYNC
     72  f149					      REPEND
     73  f14b		       85 02		      sta	WSYNC
     72  f14b					      REPEND
     73  f14d		       85 02		      sta	WSYNC
     72  f14d					      REPEND
     73  f14f		       85 02		      sta	WSYNC
     72  f14f					      REPEND
     73  f151		       85 02		      sta	WSYNC
     72  f151					      REPEND
     73  f153		       85 02		      sta	WSYNC
     72  f153					      REPEND
     73  f155		       85 02		      sta	WSYNC
     72  f155					      REPEND
     73  f157		       85 02		      sta	WSYNC
     72  f157					      REPEND
     73  f159		       85 02		      sta	WSYNC
     72  f159					      REPEND
     73  f15b		       85 02		      sta	WSYNC
     72  f15b					      REPEND
     73  f15d		       85 02		      sta	WSYNC
     72  f15d					      REPEND
     73  f15f		       85 02		      sta	WSYNC
     72  f15f					      REPEND
     73  f161		       85 02		      sta	WSYNC
     72  f161					      REPEND
     73  f163		       85 02		      sta	WSYNC
     72  f163					      REPEND
     73  f165		       85 02		      sta	WSYNC
     72  f165					      REPEND
     73  f167		       85 02		      sta	WSYNC
     72  f167					      REPEND
     73  f169		       85 02		      sta	WSYNC
     72  f169					      REPEND
     73  f16b		       85 02		      sta	WSYNC
     72  f16b					      REPEND
     73  f16d		       85 02		      sta	WSYNC
     72  f16d					      REPEND
     73  f16f		       85 02		      sta	WSYNC
     72  f16f					      REPEND
     73  f171		       85 02		      sta	WSYNC
     72  f171					      REPEND
     73  f173		       85 02		      sta	WSYNC
     72  f173					      REPEND
     73  f175		       85 02		      sta	WSYNC
     72  f175					      REPEND
     73  f177		       85 02		      sta	WSYNC
     72  f177					      REPEND
     73  f179		       85 02		      sta	WSYNC
     72  f179					      REPEND
     73  f17b		       85 02		      sta	WSYNC
     72  f17b					      REPEND
     73  f17d		       85 02		      sta	WSYNC
     72  f17d					      REPEND
     73  f17f		       85 02		      sta	WSYNC
     72  f17f					      REPEND
     73  f181		       85 02		      sta	WSYNC
     72  f181					      REPEND
     73  f183		       85 02		      sta	WSYNC
     72  f183					      REPEND
     73  f185		       85 02		      sta	WSYNC
     72  f185					      REPEND
     73  f187		       85 02		      sta	WSYNC
     72  f187					      REPEND
     73  f189		       85 02		      sta	WSYNC
     72  f189					      REPEND
     73  f18b		       85 02		      sta	WSYNC
     72  f18b					      REPEND
     73  f18d		       85 02		      sta	WSYNC
     72  f18d					      REPEND
     73  f18f		       85 02		      sta	WSYNC
     72  f18f					      REPEND
     73  f191		       85 02		      sta	WSYNC
     72  f191					      REPEND
     73  f193		       85 02		      sta	WSYNC
     72  f193					      REPEND
     73  f195		       85 02		      sta	WSYNC
     72  f195					      REPEND
     73  f197		       85 02		      sta	WSYNC
     72  f197					      REPEND
     73  f199		       85 02		      sta	WSYNC
     72  f199					      REPEND
     73  f19b		       85 02		      sta	WSYNC
     72  f19b					      REPEND
     73  f19d		       85 02		      sta	WSYNC
     72  f19d					      REPEND
     73  f19f		       85 02		      sta	WSYNC
     72  f19f					      REPEND
     73  f1a1		       85 02		      sta	WSYNC
     72  f1a1					      REPEND
     73  f1a3		       85 02		      sta	WSYNC
     72  f1a3					      REPEND
     73  f1a5		       85 02		      sta	WSYNC
     72  f1a5					      REPEND
     73  f1a7		       85 02		      sta	WSYNC
     72  f1a7					      REPEND
     73  f1a9		       85 02		      sta	WSYNC
     72  f1a9					      REPEND
     73  f1ab		       85 02		      sta	WSYNC
     72  f1ab					      REPEND
     73  f1ad		       85 02		      sta	WSYNC
     72  f1ad					      REPEND
     73  f1af		       85 02		      sta	WSYNC
     72  f1af					      REPEND
     73  f1b1		       85 02		      sta	WSYNC
     72  f1b1					      REPEND
     73  f1b3		       85 02		      sta	WSYNC
     72  f1b3					      REPEND
     73  f1b5		       85 02		      sta	WSYNC
     72  f1b5					      REPEND
     73  f1b7		       85 02		      sta	WSYNC
     72  f1b7					      REPEND
     73  f1b9		       85 02		      sta	WSYNC
     72  f1b9					      REPEND
     73  f1bb		       85 02		      sta	WSYNC
     72  f1bb					      REPEND
     73  f1bd		       85 02		      sta	WSYNC
     72  f1bd					      REPEND
     73  f1bf		       85 02		      sta	WSYNC
     72  f1bf					      REPEND
     73  f1c1		       85 02		      sta	WSYNC
     72  f1c1					      REPEND
     73  f1c3		       85 02		      sta	WSYNC
     72  f1c3					      REPEND
     73  f1c5		       85 02		      sta	WSYNC
     72  f1c5					      REPEND
     73  f1c7		       85 02		      sta	WSYNC
     72  f1c7					      REPEND
     73  f1c9		       85 02		      sta	WSYNC
     74  f1cb					      REPEND
     75  f1cb
     76  f1cb		       a0 11		      ldy	#17	;counter to draw 17 lines of bitmap
     77  f1cd				   DrawBitmap
     78  f1cd		       b9 79 f2 	      lda	P0Bitmap,Y	;load slice of bitmap
     79  f1d0		       85 1b		      sta	GRP0	;set graphics for player 0
     80  f1d2
     81  f1d2		       b9 8a f2 	      lda	P0Colour,Y	;set colour for player 0
     82  f1d5		       85 06		      sta	COLUP0
     83  f1d7
     84  f1d7		       85 02		      sta	WSYNC	;wait for next scanline
     85  f1d9
     86  f1d9		       88		      dey
     87  f1da		       d0 f1		      bne	DrawBitmap	;repeat next scanline until finished
     88  f1dc
     89  f1dc		       a9 00		      lda	#0
     90  f1de		       85 1b		      sta	GRP0	;disable player 0 graphics
     91  f1e0
     92  f1e0		       a9 ff		      lda	#$FF	;enable playfield
     93  f1e2		       85 0d		      sta	PF0
     94  f1e4		       85 0e		      sta	PF1
     95  f1e6		       85 0f		      sta	PF2
     96  f1e8
     97  f1e8					      REPEAT	15	;wait remaining 15 scanlines
     98  f1e8		       85 02		      sta	WSYNC
     97  f1e8					      REPEND
     98  f1ea		       85 02		      sta	WSYNC
     97  f1ea					      REPEND
     98  f1ec		       85 02		      sta	WSYNC
     97  f1ec					      REPEND
     98  f1ee		       85 02		      sta	WSYNC
     97  f1ee					      REPEND
     98  f1f0		       85 02		      sta	WSYNC
     97  f1f0					      REPEND
     98  f1f2		       85 02		      sta	WSYNC
     97  f1f2					      REPEND
     98  f1f4		       85 02		      sta	WSYNC
     97  f1f4					      REPEND
     98  f1f6		       85 02		      sta	WSYNC
     97  f1f6					      REPEND
     98  f1f8		       85 02		      sta	WSYNC
     97  f1f8					      REPEND
     98  f1fa		       85 02		      sta	WSYNC
     97  f1fa					      REPEND
     98  f1fc		       85 02		      sta	WSYNC
     97  f1fc					      REPEND
     98  f1fe		       85 02		      sta	WSYNC
     97  f1fe					      REPEND
     98  f200		       85 02		      sta	WSYNC
     97  f200					      REPEND
     98  f202		       85 02		      sta	WSYNC
     97  f202					      REPEND
     98  f204		       85 02		      sta	WSYNC
     99  f206					      REPEND
    100  f206
    101  f206		       a9 00		      lda	#0	;disable playfield
    102  f208		       85 0d		      sta	PF0
    103  f20a		       85 0e		      sta	PF1
    104  f20c		       85 0f		      sta	PF2
    105  f20e
    106  f20e							;draw 30 lines of overscan
    107  f20e		       a9 02		      lda	#2
    108  f210		       85 01		      sta	VBLANK
    109  f212
    110  f212					      REPEAT	30
    111  f212		       85 02		      sta	WSYNC
    110  f212					      REPEND
    111  f214		       85 02		      sta	WSYNC
    110  f214					      REPEND
    111  f216		       85 02		      sta	WSYNC
    110  f216					      REPEND
    111  f218		       85 02		      sta	WSYNC
    110  f218					      REPEND
    111  f21a		       85 02		      sta	WSYNC
    110  f21a					      REPEND
    111  f21c		       85 02		      sta	WSYNC
    110  f21c					      REPEND
    111  f21e		       85 02		      sta	WSYNC
    110  f21e					      REPEND
    111  f220		       85 02		      sta	WSYNC
    110  f220					      REPEND
    111  f222		       85 02		      sta	WSYNC
    110  f222					      REPEND
    111  f224		       85 02		      sta	WSYNC
    110  f224					      REPEND
    111  f226		       85 02		      sta	WSYNC
    110  f226					      REPEND
    111  f228		       85 02		      sta	WSYNC
    110  f228					      REPEND
    111  f22a		       85 02		      sta	WSYNC
    110  f22a					      REPEND
    111  f22c		       85 02		      sta	WSYNC
    110  f22c					      REPEND
    111  f22e		       85 02		      sta	WSYNC
    110  f22e					      REPEND
    111  f230		       85 02		      sta	WSYNC
    110  f230					      REPEND
    111  f232		       85 02		      sta	WSYNC
    110  f232					      REPEND
    111  f234		       85 02		      sta	WSYNC
    110  f234					      REPEND
    111  f236		       85 02		      sta	WSYNC
    110  f236					      REPEND
    111  f238		       85 02		      sta	WSYNC
    110  f238					      REPEND
    111  f23a		       85 02		      sta	WSYNC
    110  f23a					      REPEND
    111  f23c		       85 02		      sta	WSYNC
    110  f23c					      REPEND
    111  f23e		       85 02		      sta	WSYNC
    110  f23e					      REPEND
    111  f240		       85 02		      sta	WSYNC
    110  f240					      REPEND
    111  f242		       85 02		      sta	WSYNC
    110  f242					      REPEND
    111  f244		       85 02		      sta	WSYNC
    110  f244					      REPEND
    111  f246		       85 02		      sta	WSYNC
    110  f246					      REPEND
    111  f248		       85 02		      sta	WSYNC
    110  f248					      REPEND
    111  f24a		       85 02		      sta	WSYNC
    110  f24a					      REPEND
    111  f24c		       85 02		      sta	WSYNC
    112  f24e					      REPEND
    113  f24e		       a9 00		      lda	#0
    114  f250		       85 01		      sta	VBLANK
    115  f252
    116  f252							;joystick test for P0 Left/Right/Up/Down
    117  f252				   CheckP0Up
    118  f252		       a9 10		      lda	#%00010000
    119  f254		       2c 80 02 	      bit	SWCHA
    120  f257		       d0 02		      bne	CheckP0Down
    121  f259		       e6 80		      inc	P0XPos
    122  f25b
    123  f25b				   CheckP0Down
    124  f25b		       a9 20		      lda	#%00100000
    125  f25d		       2c 80 02 	      bit	SWCHA
    126  f260		       d0 02		      bne	CheckP0Left
    127  f262		       c6 80		      dec	P0XPos
    128  f264
    129  f264				   CheckP0Left
    130  f264		       a9 40		      lda	#%01000000
    131  f266		       2c 80 02 	      bit	SWCHA
    132  f269		       d0 02		      bne	CheckP0Right
    133  f26b		       c6 80		      dec	P0XPos
    134  f26d
    135  f26d				   CheckP0Right
    136  f26d		       a9 80		      lda	#%10000000
    137  f26f		       2c 80 02 	      bit	SWCHA
    138  f272		       d0 02		      bne	NoInput
    139  f274		       e6 80		      inc	P0XPos
    140  f276
    141  f276				   NoInput
    142  f276							;Fallback if no input is detected
    143  f276
    144  f276
    145  f276
    146  f276							;loop to next frame
    147  f276		       4c 16 f0 	      jmp	StartFrame
    148  f279
    149  f279
    150  f279				   P0Bitmap
    151  f279		       00		      .byte.b	#%00000000
    152  f27a		       14		      .byte.b	#%00010100
    153  f27b		       14		      .byte.b	#%00010100
    154  f27c		       14		      .byte.b	#%00010100
    155  f27d		       14		      .byte.b	#%00010100
    156  f27e		       14		      .byte.b	#%00010100
    157  f27f		       1c		      .byte.b	#%00011100
    158  f280		       5d		      .byte.b	#%01011101
    159  f281		       5d		      .byte.b	#%01011101
    160  f282		       5d		      .byte.b	#%01011101
    161  f283		       5d		      .byte.b	#%01011101
    162  f284		       7f		      .byte.b	#%01111111
    163  f285		       3e		      .byte.b	#%00111110
    164  f286		       10		      .byte.b	#%00010000
    165  f287		       1c		      .byte.b	#%00011100
    166  f288		       1c		      .byte.b	#%00011100
    167  f289		       1c		      .byte.b	#%00011100
    168  f28a
    169  f28a				   P0Colour
    170  f28a		       00		      .byte.b	#$00
    171  f28b		       f6		      .byte.b	#$F6
    172  f28c		       f2		      .byte.b	#$F2
    173  f28d		       f2		      .byte.b	#$F2
    174  f28e		       f2		      .byte.b	#$F2
    175  f28f		       f2		      .byte.b	#$F2
    176  f290		       f2		      .byte.b	#$F2
    177  f291		       c2		      .byte.b	#$C2
    178  f292		       c2		      .byte.b	#$C2
    179  f293		       c2		      .byte.b	#$C2
    180  f294		       c2		      .byte.b	#$C2
    181  f295		       c2		      .byte.b	#$C2
    182  f296		       c2		      .byte.b	#$C2
    183  f297		       3e		      .byte.b	#$3E
    184  f298		       3e		      .byte.b	#$3E
    185  f299		       3e		      .byte.b	#$3E
    186  f29a		       24		      .byte.b	#$24
    187  f29b
    188  f29b
    189  f29b							;end of ROM
    190  fffc					      org	$FFFC
    191  fffc		       00 f0		      .word.w	reset
    192  fffe		       00 f0		      .word.w	reset
