------- FILE atari instructions.asm LEVEL 1 PASS 1
      1  0000 ????						;Processor = MOS 6507
      2  0000 ????						;Graphics chip = TIA (Television Interface Adapter)
      3  0000 ????
      4  0000 ????						;Place makefile into project directory and assemble using the command "make"
      5  0000 ????
      6  0000 ????			   LDX			;loads a value into the X register
      7  0000 ????			   LDA			;loads a value into the A register
      8  0000 ????			   LDY			;loads a value into the Y register
      9  0000 ????
     10  0000 ????			   STA			;stores a value in the A register into a defined memory address
     11  0000 ????			   STX			;stores a value in the X register into a defined memory address
     12  0000 ????			   STY			;stores a value in the Y register into a defined memory address
     13  0000 ????
     14  0000 ????			   ADC			;add a value to the A register (with the carry flag)
     15  0000 ????			   SBC			;subtract a value from the A register (with the carry flag)
     16  0000 ????
     17  0000 ????			   CLC			;clears the carry flag (usually used before addition)
     18  0000 ????			   SEC			;sets the carry flag (usually used before subtraction)
     19  0000 ????
     20  0000 ????			   INC			;increment value in a memory address by one
     21  0000 ????			   INX			;increment the value in register X by one
     22  0000 ????			   INY			;increment the value in register Y by one
     23  0000 ????
     24  0000 ????			   DEC			;decrement value in a memory address by one
     25  0000 ????			   DEX			;decrememnt value in register X by one
     26  0000 ????			   DEY			;decrement value in register Y by one
     27  0000 ????
     28  0000 ????	       00 01	   Z	      =	1	;if the result of a decremation is 0 set the Z flag to 1, otherwise set it to 0
     29  0000 ????	       00 01	   N	      =	1	;if the sign bit (most significant bit) is 1 set the N flag to 1, otherwise set to 0
     30  0000 ????
     31  0000 ????			   JMP			;jump to another ROM address
     32  0000 ????
     33  0000 ????						;branches are similar to conditional jumps in x86
     34  0000 ????
     35  0000 ????			   BCC			;branch on carry clear 	C=0
     36  0000 ????			   BCS			;branch on carry set		C=1
     37  0000 ????			   BEQ			;branch on equal to zero	Z=1
     38  0000 ????			   BNE			;branch on not equal to zero	Z=0
     39  0000 ????			   BMI			;branch on minus		N=1
     40  0000 ????			   BPL			;branch on plus		N=0
     41  0000 ????			   BVC			;branch on overflow clear	V=0
     42  0000 ????			   BVS			;branch on overflow set	V=1
     43  0000 ????
     44  0000 ????						;Loop example;
atari instructions.asm (45): error: Unknown Mnemonic 'LDY'.
     45  0000 ????				      LDY	#100	;set Y register to 100
     46  0000 ????			   Loop 		;label (basically a function)
atari instructions.asm (47): error: Unknown Mnemonic 'DEY'.
     47  0000 ????				      DEY		;decrement Y register by one (Y = 99)
atari instructions.asm (48): error: Unknown Mnemonic 'BNE'.
     48  0000 ????				      BNE	Loop	;repeat loop until Y = 0
     49  0000 ????
     50  0000 ????			   TAX			;transfer accumulator to X
     51  0000 ????			   TAY			;transfer accumulator to Y
     52  0000 ????			   TSX			;transfer stack pointer to X
     53  0000 ????			   TXA			;transfer X to accumulator
     54  0000 ????			   TXS			;transfer X to stack pointer
     55  0000 ????			   TYA			;transfer Y to accumulator
     56  0000 ????
     57  0000 ????			   EOR			;exclusive or
     58  0000 ????			   ASL			;arithmetic shift left
     59  0000 ????
     60  0000 ????						;VCS Memory map
atari instructions.asm (61): error: Unknown Mnemonic '-'.
     61  0000 ????			   $00	      -	$7F	;TIA registers
atari instructions.asm (62): error: Unknown Mnemonic '-'.
     62  0000 ????			   $80	      -	$FF	;memory addresses for PIA RAM
atari instructions.asm (63): error: Unknown Mnemonic '-'.
     63  0000 ????			   $F000      -	$FFFF	;ROM space
     64  0000 ????			   $FFFC		;Reset vector
     65  0000 ????			   $FFFE		;interrupt break
     66  0000 ????
     67  0000 ????						;how to set horizontal position
     68  0000 ????						;load a register with desired x position
     69  0000 ????						;wait for a new scanline (sta WSYNC)
     70  0000 ????						;clear old horizontal position by writing to HMCLR
     71  0000 ????						;wait (X+68)/15 CPU clock cycles and keep the remainder
     72  0000 ????						;use the remainder as the "Fine" offset
     73  0000 ????						;write to RESP0/P1 to fix the low resolution position (multiple of 15)
     74  0000 ????						;write to HMP0/P1 to set the fine adjustment (-8 to +7 pixels)
     75  0000 ????						;wait for next scanline (sta WSYNC)
     76  0000 ????						;write to HMOVE to apply changes
     77  0000 ????
     78  0000 ????
     79  0000 ????
     80  0000 ????
